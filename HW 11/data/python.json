[
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hi folks\n\nDoes anyone used SQLite in production using Django or any other micro frameworks\n\nPlease tell me about what is your website done and your experience using it\n\nAlso why you choiced it in the first place\n",
            "author_fullname": "t2_1bnbkj16w0",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Using SQLite in production",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": true,
            "name": "t3_1gtjgg0",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.67,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 1,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 1,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731866476.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi folks&lt;/p&gt;\n\n&lt;p&gt;Does anyone used SQLite in production using Django or any other micro frameworks&lt;/p&gt;\n\n&lt;p&gt;Please tell me about what is your website done and your experience using it&lt;/p&gt;\n\n&lt;p&gt;Also why you choiced it in the first place&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gtjgg0",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "djv-mo",
            "discussion_type": null,
            "num_comments": 3,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gtjgg0/using_sqlite_in_production/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gtjgg0/using_sqlite_in_production/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731866476.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hello everyone,\n\nMy name is Archil. I'm a Python/PHP developer originally from Ukraine, now living in Wrocław, Poland. I've been working on a tool called [Deply](https://github.com/Vashkatsi/deply), and I'd love to get your feedback and thoughts on it.\n\n# What My Project Does\n\n**Deply** is a standalone Python tool designed to enforce architectural patterns and dependencies in large Python projects. Deply analyzes your code structure and dependencies to ensure that architectural rules are followed. This promotes cleaner, more maintainable, and modular codebases.\n\n**Key Features:**\n\n* **Layer-Based Analysis**: Define custom layers (e.g., models, views, services) and restrict their dependencies.\n* **Dynamic Configuration**: Easily configure collectors for each layer using file patterns and class inheritance.\n* **CI Integration**: Integrate Deply into your Continuous Integration pipeline to automatically detect and prevent architecture violations before they reach production.\n\n# Target Audience\n\n* **Who It's For**: Developers and teams working on medium to large Python projects who want to maintain a clean architecture.\n* **Intended Use**: Ideal for production environments where enforcing module boundaries is critical, as well as educational purposes to teach best practices.\n\n# Use Cases\n\n* **Continuous Integration**: Add Deply to your CI/CD pipeline to catch architectural violations early in the development process.\n* **Refactoring**: Use Deply to understand existing dependencies in your codebase, making large-scale refactoring safer and more manageable.\n* **Code Reviews**: Assist in code reviews by automatically checking if new changes adhere to architectural rules.\n\n# Comparison\n\nWhile there are existing tools like [pydeps](https://github.com/thebjorn/pydeps) that visualize dependencies, Deply focuses on:\n\n* **Enforcement Over Visualization**: Not just displaying dependencies but actively enforcing architectural rules by detecting violations.\n* **Customization**: Offers dynamic configuration with various collectors to suit different project structures.\n\n# Links\n\n* **GitHub**: [https://github.com/Vashkatsi/deply](https://github.com/Vashkatsi/deply)\n* **PyPI**: [https://pypi.org/project/deply/](https://pypi.org/project/deply/)\n\nI'm eager to hear your thoughts, suggestions, or criticisms. Deply is currently at version 0.1.5, so it's not entirely stable yet, but I'm actively working on it. I'm open to pull requests and looking forward to making Deply a useful tool for the Python community.\n\nThank you for your time!",
            "author_fullname": "t2_3ie03pp2",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Deply: keep your python architecture clean",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": true,
            "name": "t3_1gthdpy",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.96,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 34,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 34,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1731861142.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731861123.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello everyone,&lt;/p&gt;\n\n&lt;p&gt;My name is Archil. I&amp;#39;m a Python/PHP developer originally from Ukraine, now living in Wrocław, Poland. I&amp;#39;ve been working on a tool called &lt;a href=\"https://github.com/Vashkatsi/deply\"&gt;Deply&lt;/a&gt;, and I&amp;#39;d love to get your feedback and thoughts on it.&lt;/p&gt;\n\n&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;&lt;strong&gt;Deply&lt;/strong&gt; is a standalone Python tool designed to enforce architectural patterns and dependencies in large Python projects. Deply analyzes your code structure and dependencies to ensure that architectural rules are followed. This promotes cleaner, more maintainable, and modular codebases.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Key Features:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Layer-Based Analysis&lt;/strong&gt;: Define custom layers (e.g., models, views, services) and restrict their dependencies.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Dynamic Configuration&lt;/strong&gt;: Easily configure collectors for each layer using file patterns and class inheritance.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;CI Integration&lt;/strong&gt;: Integrate Deply into your Continuous Integration pipeline to automatically detect and prevent architecture violations before they reach production.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Who It&amp;#39;s For&lt;/strong&gt;: Developers and teams working on medium to large Python projects who want to maintain a clean architecture.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Intended Use&lt;/strong&gt;: Ideal for production environments where enforcing module boundaries is critical, as well as educational purposes to teach best practices.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Use Cases&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Continuous Integration&lt;/strong&gt;: Add Deply to your CI/CD pipeline to catch architectural violations early in the development process.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Refactoring&lt;/strong&gt;: Use Deply to understand existing dependencies in your codebase, making large-scale refactoring safer and more manageable.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Code Reviews&lt;/strong&gt;: Assist in code reviews by automatically checking if new changes adhere to architectural rules.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;While there are existing tools like &lt;a href=\"https://github.com/thebjorn/pydeps\"&gt;pydeps&lt;/a&gt; that visualize dependencies, Deply focuses on:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Enforcement Over Visualization&lt;/strong&gt;: Not just displaying dependencies but actively enforcing architectural rules by detecting violations.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Customization&lt;/strong&gt;: Offers dynamic configuration with various collectors to suit different project structures.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Links&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;GitHub&lt;/strong&gt;: &lt;a href=\"https://github.com/Vashkatsi/deply\"&gt;https://github.com/Vashkatsi/deply&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;PyPI&lt;/strong&gt;: &lt;a href=\"https://pypi.org/project/deply/\"&gt;https://pypi.org/project/deply/&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I&amp;#39;m eager to hear your thoughts, suggestions, or criticisms. Deply is currently at version 0.1.5, so it&amp;#39;s not entirely stable yet, but I&amp;#39;m actively working on it. I&amp;#39;m open to pull requests and looking forward to making Deply a useful tool for the Python community.&lt;/p&gt;\n\n&lt;p&gt;Thank you for your time!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/T8uUBa5IvPytZlt4Av-Fx60Lq_a4cgpgIOEeiUSI-YE.jpg?auto=webp&amp;s=c2f4cb79d85e5fbbdbedb80b5f51dbf6cffdf1a5",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/T8uUBa5IvPytZlt4Av-Fx60Lq_a4cgpgIOEeiUSI-YE.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=9fd3ccd52f55b34291b206356850da24021279e8",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/T8uUBa5IvPytZlt4Av-Fx60Lq_a4cgpgIOEeiUSI-YE.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=b3b06602d8f6af79b9df4ebb9ee4f39ca8cc442a",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/T8uUBa5IvPytZlt4Av-Fx60Lq_a4cgpgIOEeiUSI-YE.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=7ecfb920fc019e72d5cbc0055f5c711388c5600b",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/T8uUBa5IvPytZlt4Av-Fx60Lq_a4cgpgIOEeiUSI-YE.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=c39ffd381623b057dcefc0486274f1809bd78fd1",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/T8uUBa5IvPytZlt4Av-Fx60Lq_a4cgpgIOEeiUSI-YE.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=24e35294c58ffb28faa69d62ac6891fcd79cb557",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/T8uUBa5IvPytZlt4Av-Fx60Lq_a4cgpgIOEeiUSI-YE.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=0d422fa7339e7d0613fa6cbcde1ac43c7e6da572",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "UNGifDBdZ01tRLQSKNCATxSCfaX3y9Uvmh75enH8WAc"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gthdpy",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "vashkatsi",
            "discussion_type": null,
            "num_comments": 4,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gthdpy/deply_keep_your_python_architecture_clean/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gthdpy/deply_keep_your_python_architecture_clean/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731861123.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "uv is a fast Python package and project manager, written in Rust. It can be used instead of pip, pip-tools, pipx, poetry, pyenv, and virtualenv tools. uv provides a complete ecosystem for managing Python projects, allowing you to add dependencies, manage tools, run scripts, and more. In short, from installing Python to building Python applications, uv makes the process faster and easier. One of the best features of uv is its compatibility with the pip tool. This means that you just need to add \"uv\" in front of your command and all of your previous commands will work out of the box. \n\nLearn how to install uv and explore its various features. We will create a project, add dependencies, run scripts, use tools, and also learn about its pip interface.\n\nLink: [https://www.kdnuggets.com/new-python-package-manager](https://www.kdnuggets.com/new-python-package-manager)",
            "author_fullname": "t2_yeda6sl",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "A New Python Package Manager",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Tutorial"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "tutorial",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gtfhwc",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.24,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Tutorial",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731856022.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;uv is a fast Python package and project manager, written in Rust. It can be used instead of pip, pip-tools, pipx, poetry, pyenv, and virtualenv tools. uv provides a complete ecosystem for managing Python projects, allowing you to add dependencies, manage tools, run scripts, and more. In short, from installing Python to building Python applications, uv makes the process faster and easier. One of the best features of uv is its compatibility with the pip tool. This means that you just need to add &amp;quot;uv&amp;quot; in front of your command and all of your previous commands will work out of the box. &lt;/p&gt;\n\n&lt;p&gt;Learn how to install uv and explore its various features. We will create a project, add dependencies, run scripts, use tools, and also learn about its pip interface.&lt;/p&gt;\n\n&lt;p&gt;Link: &lt;a href=\"https://www.kdnuggets.com/new-python-package-manager\"&gt;https://www.kdnuggets.com/new-python-package-manager&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/fQjiIBav7ChDeZw0BKfxjiPmIRYplDTS_3aIU7DFDZg.jpg?auto=webp&amp;s=0281dd061e311791308df4509078f75181bc6412",
                            "width": 1200,
                            "height": 720
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/fQjiIBav7ChDeZw0BKfxjiPmIRYplDTS_3aIU7DFDZg.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=03c57e05538add67b48fe0cb76a830298eea17b2",
                                "width": 108,
                                "height": 64
                            },
                            {
                                "url": "https://external-preview.redd.it/fQjiIBav7ChDeZw0BKfxjiPmIRYplDTS_3aIU7DFDZg.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=836092679b7bfffd02cdff8d1b32b971bb00900d",
                                "width": 216,
                                "height": 129
                            },
                            {
                                "url": "https://external-preview.redd.it/fQjiIBav7ChDeZw0BKfxjiPmIRYplDTS_3aIU7DFDZg.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=0c9ba62df1bf28466ccce5d959c2a14e356618f0",
                                "width": 320,
                                "height": 192
                            },
                            {
                                "url": "https://external-preview.redd.it/fQjiIBav7ChDeZw0BKfxjiPmIRYplDTS_3aIU7DFDZg.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=14e96da45804f1a7ffcf281d5dd73fba9b8e8f19",
                                "width": 640,
                                "height": 384
                            },
                            {
                                "url": "https://external-preview.redd.it/fQjiIBav7ChDeZw0BKfxjiPmIRYplDTS_3aIU7DFDZg.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=b2739b2452379539fdc7c38ea22c6cb82b70136d",
                                "width": 960,
                                "height": 576
                            },
                            {
                                "url": "https://external-preview.redd.it/fQjiIBav7ChDeZw0BKfxjiPmIRYplDTS_3aIU7DFDZg.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=924398752f2d6094f0c8bf4a8b9d66f3a08b30db",
                                "width": 1080,
                                "height": 648
                            }
                        ],
                        "variants": {},
                        "id": "74cF2npUZJ2npzhWeI7aiKIzrFYkuTWfiy8XuJob-Nc"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#dadada",
            "id": "1gtfhwc",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "kingabzpro",
            "discussion_type": null,
            "num_comments": 1,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gtfhwc/a_new_python_package_manager/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gtfhwc/a_new_python_package_manager/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731856022.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hey guys, I hope everybody is doing great.  \nAs in the title, I wanted to ask about the best optino for developing a project in python, I've seen many option for web developement like Django and many other GUI solution like tkinter or PyQT.\n\nI already tried tkinter and customtkinter, and to be honest I dont like them since it feels outdated and looks bads (designing nice looking interface was hell). \n\nI'm opting heavily towards web driven solutions since I'll handle graphs, images, tables, metrics, databases, models, client customised experience ...",
            "author_fullname": "t2_fet1wu3f",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Best option for python based project development",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gtf2rc",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.77,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 7,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 7,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731854815.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey guys, I hope everybody is doing great.&lt;br/&gt;\nAs in the title, I wanted to ask about the best optino for developing a project in python, I&amp;#39;ve seen many option for web developement like Django and many other GUI solution like tkinter or PyQT.&lt;/p&gt;\n\n&lt;p&gt;I already tried tkinter and customtkinter, and to be honest I dont like them since it feels outdated and looks bads (designing nice looking interface was hell). &lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m opting heavily towards web driven solutions since I&amp;#39;ll handle graphs, images, tables, metrics, databases, models, client customised experience ...&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gtf2rc",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Red-Hat999",
            "discussion_type": null,
            "num_comments": 5,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gtf2rc/best_option_for_python_based_project_development/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gtf2rc/best_option_for_python_based_project_development/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731854815.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "[AnyModal](https://github.com/ritabratamaiti/AnyModal) is a modular and extensible framework for integrating diverse input modalities (e.g., images, audio) into large language models (LLMs). It enables seamless tokenization, encoding, and language generation using pre-trained models for various modalities.\n\n### Why I Built AnyModal\n\nI created AnyModal to address a gap in existing resources for designing vision-language models (VLMs) or other multimodal LLMs. While there are excellent tools for specific tasks, there wasn’t a cohesive framework for easily combining different input types with LLMs. AnyModal aims to fill that gap by simplifying the process of adding new input processors and tokenizers while leveraging the strengths of pre-trained language models.\n\n### Features\n\n- **Modular Design**: Plug and play with different modalities like vision, audio, or custom data types.\n- **Ease of Use**: Minimal setup—just implement your modality-specific tokenization and pass it to the framework.\n- **Extensibility**: Add support for new modalities with only a few lines of code.\n\n### Example Usage\n\n```python\nfrom transformers import ViTImageProcessor, ViTForImageClassification\nfrom anymodal import MultiModalModel\nfrom vision import VisionEncoder, Projector\n\n# Load vision processor and model\nprocessor = ViTImageProcessor.from_pretrained('google/vit-base-patch16-224')\nvision_model = ViTForImageClassification.from_pretrained('google/vit-base-patch16-224')\nhidden_size = vision_model.config.hidden_size\n\n# Initialize vision encoder and projector\nvision_encoder = VisionEncoder(vision_model)\nvision_tokenizer = Projector(in_features=hidden_size, out_features=768)\n\n# Load LLM components\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\nllm_tokenizer = AutoTokenizer.from_pretrained(\"gpt2\")\nllm_model = AutoModelForCausalLM.from_pretrained(\"gpt2\")\n\n# Initialize AnyModal\nmultimodal_model = MultiModalModel(\n    input_processor=None,\n    input_encoder=vision_encoder,\n    input_tokenizer=vision_tokenizer,\n    language_tokenizer=llm_tokenizer,\n    language_model=llm_model,\n    input_start_token='&lt;|imstart|&gt;',\n    input_end_token='&lt;|imend|&gt;',\n    prompt_text=\"The interpretation of the given image is: \"\n)\n```\n\n### What My Project Does\n\nAnyModal provides a unified framework for combining inputs from different modalities with LLMs. It abstracts much of the boilerplate, allowing users to focus on their specific tasks without worrying about low-level integration.\n\n### Target Audience\n\n- **Researchers and developers** exploring multimodal systems.\n- **Prototype builders** testing new ideas quickly.\n- **Anyone experimenting with LLMs** for tasks like image captioning, visual question answering, and audio transcription.\n\n### Comparison\n\nUnlike existing tools like Hugging Face’s transformers or task-specific VLMs such as CLIP, AnyModal offers a flexible framework for arbitrary modality combinations. It’s ideal for niche multimodal tasks or experiments requiring custom data types.\n\n### Current Demos\n\n- LaTeX OCR  \n- Chest X-Ray Captioning (in progress)  \n- Image Captioning  \n- Visual Question Answering (planned)  \n- Audio Captioning (planned)  \n\n### Contributions Welcome\n\nThe project is still a work in progress, and I’d love feedback or contributions from the community. Whether you’re interested in adding new features, fixing bugs, or simply trying it out, all input is welcome.\n\nGitHub repo: [https://github.com/ritabratamaiti/AnyModal](https://github.com/ritabratamaiti/AnyModal)\n\nLet me know what you think or if you have any questions.",
            "author_fullname": "t2_7r2mp2ms",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "AnyModal: A Python Framework for Multimodal LLMs",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gtbrzb",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.89,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 20,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 20,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731843659.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/ritabratamaiti/AnyModal\"&gt;AnyModal&lt;/a&gt; is a modular and extensible framework for integrating diverse input modalities (e.g., images, audio) into large language models (LLMs). It enables seamless tokenization, encoding, and language generation using pre-trained models for various modalities.&lt;/p&gt;\n\n&lt;h3&gt;Why I Built AnyModal&lt;/h3&gt;\n\n&lt;p&gt;I created AnyModal to address a gap in existing resources for designing vision-language models (VLMs) or other multimodal LLMs. While there are excellent tools for specific tasks, there wasn’t a cohesive framework for easily combining different input types with LLMs. AnyModal aims to fill that gap by simplifying the process of adding new input processors and tokenizers while leveraging the strengths of pre-trained language models.&lt;/p&gt;\n\n&lt;h3&gt;Features&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Modular Design&lt;/strong&gt;: Plug and play with different modalities like vision, audio, or custom data types.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Ease of Use&lt;/strong&gt;: Minimal setup—just implement your modality-specific tokenization and pass it to the framework.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Extensibility&lt;/strong&gt;: Add support for new modalities with only a few lines of code.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3&gt;Example Usage&lt;/h3&gt;\n\n&lt;p&gt;```python\nfrom transformers import ViTImageProcessor, ViTForImageClassification\nfrom anymodal import MultiModalModel\nfrom vision import VisionEncoder, Projector&lt;/p&gt;\n\n&lt;h1&gt;Load vision processor and model&lt;/h1&gt;\n\n&lt;p&gt;processor = ViTImageProcessor.from_pretrained(&amp;#39;google/vit-base-patch16-224&amp;#39;)\nvision_model = ViTForImageClassification.from_pretrained(&amp;#39;google/vit-base-patch16-224&amp;#39;)\nhidden_size = vision_model.config.hidden_size&lt;/p&gt;\n\n&lt;h1&gt;Initialize vision encoder and projector&lt;/h1&gt;\n\n&lt;p&gt;vision_encoder = VisionEncoder(vision_model)\nvision_tokenizer = Projector(in_features=hidden_size, out_features=768)&lt;/p&gt;\n\n&lt;h1&gt;Load LLM components&lt;/h1&gt;\n\n&lt;p&gt;from transformers import AutoTokenizer, AutoModelForCausalLM\nllm_tokenizer = AutoTokenizer.from_pretrained(&amp;quot;gpt2&amp;quot;)\nllm_model = AutoModelForCausalLM.from_pretrained(&amp;quot;gpt2&amp;quot;)&lt;/p&gt;\n\n&lt;h1&gt;Initialize AnyModal&lt;/h1&gt;\n\n&lt;p&gt;multimodal_model = MultiModalModel(\n    input_processor=None,\n    input_encoder=vision_encoder,\n    input_tokenizer=vision_tokenizer,\n    language_tokenizer=llm_tokenizer,\n    language_model=llm_model,\n    input_start_token=&amp;#39;&amp;lt;|imstart|&amp;gt;&amp;#39;,\n    input_end_token=&amp;#39;&amp;lt;|imend|&amp;gt;&amp;#39;,\n    prompt_text=&amp;quot;The interpretation of the given image is: &amp;quot;\n)\n```&lt;/p&gt;\n\n&lt;h3&gt;What My Project Does&lt;/h3&gt;\n\n&lt;p&gt;AnyModal provides a unified framework for combining inputs from different modalities with LLMs. It abstracts much of the boilerplate, allowing users to focus on their specific tasks without worrying about low-level integration.&lt;/p&gt;\n\n&lt;h3&gt;Target Audience&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Researchers and developers&lt;/strong&gt; exploring multimodal systems.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Prototype builders&lt;/strong&gt; testing new ideas quickly.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Anyone experimenting with LLMs&lt;/strong&gt; for tasks like image captioning, visual question answering, and audio transcription.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3&gt;Comparison&lt;/h3&gt;\n\n&lt;p&gt;Unlike existing tools like Hugging Face’s transformers or task-specific VLMs such as CLIP, AnyModal offers a flexible framework for arbitrary modality combinations. It’s ideal for niche multimodal tasks or experiments requiring custom data types.&lt;/p&gt;\n\n&lt;h3&gt;Current Demos&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;LaTeX OCR&lt;br/&gt;&lt;/li&gt;\n&lt;li&gt;Chest X-Ray Captioning (in progress)&lt;br/&gt;&lt;/li&gt;\n&lt;li&gt;Image Captioning&lt;br/&gt;&lt;/li&gt;\n&lt;li&gt;Visual Question Answering (planned)&lt;br/&gt;&lt;/li&gt;\n&lt;li&gt;Audio Captioning (planned)&lt;br/&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3&gt;Contributions Welcome&lt;/h3&gt;\n\n&lt;p&gt;The project is still a work in progress, and I’d love feedback or contributions from the community. Whether you’re interested in adding new features, fixing bugs, or simply trying it out, all input is welcome.&lt;/p&gt;\n\n&lt;p&gt;GitHub repo: &lt;a href=\"https://github.com/ritabratamaiti/AnyModal\"&gt;https://github.com/ritabratamaiti/AnyModal&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Let me know what you think or if you have any questions.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/XlvH402IWS1EmqizLaWh-fR7dDXB3NTOxpKKyfaQxgA.jpg?auto=webp&amp;s=338ad3a4756cd97e96007b6bc4cafa5671daa1e9",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/XlvH402IWS1EmqizLaWh-fR7dDXB3NTOxpKKyfaQxgA.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=75558f8a1eb8198d640c003c86dd259e0e1b009d",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/XlvH402IWS1EmqizLaWh-fR7dDXB3NTOxpKKyfaQxgA.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=8f128643537a7f98ce0e67a74b66ba254e45433e",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/XlvH402IWS1EmqizLaWh-fR7dDXB3NTOxpKKyfaQxgA.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=d62df0e5cb90428bdb11043fe6a8df081017cd17",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/XlvH402IWS1EmqizLaWh-fR7dDXB3NTOxpKKyfaQxgA.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=719f3eaf0bf1cde6666bf5c35c893ce582f5947d",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/XlvH402IWS1EmqizLaWh-fR7dDXB3NTOxpKKyfaQxgA.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=1353949c7f6c6ebc91b44ec21faa9718a737016b",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/XlvH402IWS1EmqizLaWh-fR7dDXB3NTOxpKKyfaQxgA.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=f1c3b6f679a2703c70a288716c9cfe8b3423e1f9",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "PDKrR-an1F_mH2XEpuqJ9BxGwK5Tatt9TpsyErhB0qY"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gtbrzb",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Alternative_Detail31",
            "discussion_type": null,
            "num_comments": 3,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gtbrzb/anymodal_a_python_framework_for_multimodal_llms/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gtbrzb/anymodal_a_python_framework_for_multimodal_llms/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731843659.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": " Idea's ?\n\n    import tkinter as tk\n    from tkinter import ttk, filedialog, messagebox\n    from PIL import Image, ImageTk, ImageDraw, ImageFont\n    import os\n    from copy import deepcopy\n    import gc\n    \n    class OptimizedImageHandler:\n        def __init__(self):\n            self._current_image = None\n            self._photo_image = None\n    \n        def get_image_dimensions(self, file_path):\n            \"\"\"Get the dimensions of an image without fully loading it.\"\"\"\n            with Image.open(file_path) as img:\n                return img.size\n    \n        def load_image(self, file_path, max_width, max_height):\n            \"\"\"Load and optimize an image for display, maintaining aspect ratio.\"\"\"\n            try:\n                if self._photo_image:\n                    del self._photo_image\n                if self._current_image:\n                    del self._current_image\n    \n                gc.collect()\n    \n                image = Image.open(file_path)\n                if image.mode != 'RGBA':\n                    image = image.convert('RGBA')\n    \n                # Store original dimensions\n                original_width = image.width\n                original_height = image.height\n    \n                # Calculate scaling factor to fit within max dimensions\n                width_ratio = max_width / image.width\n                height_ratio = max_height / image.height\n                scale_factor = min(width_ratio, height_ratio)\n    \n                if scale_factor &lt; 1:\n                    new_width = int(image.width * scale_factor)\n                    new_height = int(image.height * scale_factor)\n                    image = image.resize((new_width, new_height), Image.Resampling.LANCZOS)\n    \n                self._current_image = image\n                self._photo_image = ImageTk.PhotoImage(image)\n    \n                return self._photo_image, scale_factor\n    \n            except Exception as e:\n                raise Exception(f\"Failed to load image: {str(e)}\")\n    \n        def get_current_image(self):\n            \"\"\"Get the current PIL Image object.\"\"\"\n            return self._current_image\n    \n        def cleanup(self):\n            \"\"\"Clean up image resources.\"\"\"\n            if self._photo_image:\n                del self._photo_image\n            if self._current_image:\n                del self._current_image\n            gc.collect()\n    \n    class TextOverlayTool:\n        def __init__(self, root):\n            self.root = root\n            self.root.title(\"Text Overlay Tool\")\n    \n            # Initialize handlers and variables\n            self.image_handler = OptimizedImageHandler()\n            self.initialize_variables()\n    \n            # Set up initial window size and position\n            self.setup_window_geometry()\n    \n            # Set up UI components\n            self.setup_ui()\n            self.setup_bindings()\n    \n        def initialize_variables(self):\n            \"\"\"Initialize all class variables.\"\"\"\n            self.image_path = None\n            self.original_image = None\n            self.display_image = None\n            self.canvas = None\n            self.preview_photo = None\n            self.scale_factor = 1.0\n            self.status_var = tk.StringVar()\n    \n            # UI constraints\n            self.MIN_WINDOW_WIDTH = 800\n            self.MIN_WINDOW_HEIGHT = 600\n            self.SIDEBAR_WIDTH = 250\n            self.PADDING = 40\n    \n            # Text handling variables\n            self.text_boxes = []\n            self.current_text_box = None\n            self.dragging = False\n            self.drag_start = None\n            self.history = []\n            self.current_state = 0\n    \n            # Text properties\n            self.font_size = tk.IntVar(value=24)\n            self.text_content = tk.StringVar(value=\"\")\n    \n        def setup_window_geometry(self, image_width=None, image_height=None):\n            \"\"\"Set up window geometry based on screen size and optionally image size.\"\"\"\n            screen_width = self.root.winfo_screenwidth()\n            screen_height = self.root.winfo_screenheight()\n    \n            if image_width and image_height:\n                window_width = min(image_width + self.SIDEBAR_WIDTH + self.PADDING,\n                                 screen_width * 0.9)\n                window_height = min(image_height + self.PADDING,\n                                  screen_height * 0.9)\n            else:\n                window_width = min(self.MIN_WINDOW_WIDTH, screen_width * 0.8)\n                window_height = min(self.MIN_WINDOW_HEIGHT, screen_height * 0.8)\n    \n            window_width = max(window_width, self.MIN_WINDOW_WIDTH)\n            window_height = max(window_height, self.MIN_WINDOW_HEIGHT)\n    \n            x = (screen_width - window_width) // 2\n            y = (screen_height - window_height) // 2\n    \n            self.root.geometry(f\"{int(window_width)}x{int(window_height)}+{int(x)}+{int(y)}\")\n    \n        def setup_ui(self):\n            \"\"\"Set up the user interface components.\"\"\"\n            # Main container\n            self.main_container = ttk.PanedWindow(self.root, orient=tk.HORIZONTAL)\n            self.main_container.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)\n    \n            # Create sidebar\n            self.setup_sidebar()\n    \n            # Create canvas area\n            self.setup_canvas_area()\n    \n        def setup_sidebar(self):\n            \"\"\"Set up the sidebar with all controls.\"\"\"\n            # Sidebar frame\n            self.sidebar = ttk.Frame(self.main_container, width=self.SIDEBAR_WIDTH)\n            self.main_container.add(self.sidebar, weight=0)\n    \n            # Title\n            ttk.Label(self.sidebar, text=\"Text Overlay Tool\", font=('Arial', 16, 'bold')).pack(pady=10)\n    \n            # File operations frame\n            file_frame = ttk.LabelFrame(self.sidebar, text=\"File Operations\")\n            file_frame.pack(pady=5, padx=5, fill=tk.X)\n            ttk.Button(file_frame, text=\"Load Image\", command=self.load_image).pack(pady=2, fill=tk.X, padx=5)\n            ttk.Button(file_frame, text=\"Save Image\", command=self.save_result).pack(pady=2, fill=tk.X, padx=5)\n            ttk.Label(file_frame, textvariable=self.status_var).pack(pady=2, padx=5)\n    \n            # Text properties frame\n            text_frame = ttk.LabelFrame(self.sidebar, text=\"Text Properties\")\n            text_frame.pack(pady=5, padx=5, fill=tk.X)\n    \n            # Text input\n            ttk.Label(text_frame, text=\"Enter Text:\").pack(pady=2, padx=5, anchor=tk.W)\n            self.text_entry = ttk.Entry(text_frame, textvariable=self.text_content)\n            self.text_entry.pack(pady=2, padx=5, fill=tk.X)\n    \n            # Font size slider\n            ttk.Label(text_frame, text=\"Font Size:\").pack(pady=2, padx=5, anchor=tk.W)\n            font_scale = ttk.Scale(text_frame, from_=8, to=72, variable=self.font_size, orient=tk.HORIZONTAL)\n            font_scale.pack(pady=2, padx=5, fill=tk.X)\n    \n            # Color selection\n            color_frame = ttk.LabelFrame(text_frame, text=\"Color Settings\")\n            color_frame.pack(pady=5, padx=5, fill=tk.X)\n    \n            # Color sliders\n            self.red_slider = self.create_color_slider(color_frame, \"Red:\", 0, 255)\n            self.green_slider = self.create_color_slider(color_frame, \"Green:\", 0, 255)\n            self.blue_slider = self.create_color_slider(color_frame, \"Blue:\", 0, 255)\n            self.alpha_slider = self.create_color_slider(color_frame, \"Opacity:\", 0, 255, 255)\n    \n            # Color preview\n            self.color_preview = tk.Canvas(color_frame, width=50, height=25, bd=1, relief='solid')\n            self.color_preview.pack(pady=5)\n    \n            # Edit operations frame\n            edit_frame = ttk.LabelFrame(self.sidebar, text=\"Edit Operations\")\n            edit_frame.pack(pady=5, padx=5, fill=tk.X)\n    \n            ttk.Button(edit_frame, text=\"Add Text Box\", command=self.add_text_box).pack(pady=2, fill=tk.X, padx=5)\n            ttk.Button(edit_frame, text=\"Delete Selected\", command=self.delete_selected).pack(pady=2, fill=tk.X, padx=5)\n            ttk.Button(edit_frame, text=\"Clear All\", command=self.clear_all).pack(pady=2, fill=tk.X, padx=5)\n            ttk.Button(edit_frame, text=\"Undo\", command=self.undo).pack(pady=2, fill=tk.X, padx=5)\n    \n            # Bind color updates\n            for slider in [self.red_slider, self.green_slider, self.blue_slider, self.alpha_slider]:\n                slider.configure(command=self.update_color_preview)\n    \n        def setup_canvas_area(self):\n            \"\"\"Set up the canvas area for image display.\"\"\"\n            self.canvas_frame = ttk.Frame(self.main_container)\n            self.main_container.add(self.canvas_frame, weight=1)\n    \n            self.canvas = tk.Canvas(self.canvas_frame, bg='white')\n            self.canvas.pack(fill=tk.BOTH, expand=True)\n    \n        def create_color_slider(self, parent, label, from_, to, default=0):\n            \"\"\"Helper method to create color sliders.\"\"\"\n            ttk.Label(parent, text=label).pack(pady=2, padx=5, anchor=tk.W)\n            slider = ttk.Scale(parent, from_=from_, to=to, orient=tk.HORIZONTAL)\n            slider.set(default)\n            slider.pack(pady=2, padx=5, fill=tk.X)\n            return slider\n    \n        def setup_bindings(self):\n            \"\"\"Set up event bindings.\"\"\"\n            self.canvas.bind('&lt;Button-1&gt;', self.on_canvas_click)\n            self.canvas.bind('&lt;B1-Motion&gt;', self.on_drag)\n            self.canvas.bind('&lt;ButtonRelease-1&gt;', self.on_release)\n            self.root.bind('&lt;Delete&gt;', lambda e: self.delete_selected())\n            self.root.bind('&lt;Control-z&gt;', lambda e: self.undo())\n    \n        def update_color_preview(self, _=None):\n            \"\"\"Update the color preview box.\"\"\"\n            color = (\n                int(self.red_slider.get()),\n                int(self.green_slider.get()),\n                int(self.blue_slider.get()),\n                int(self.alpha_slider.get())\n            )\n    \n            preview = Image.new('RGBA', (50, 25), color)\n            self.preview_photo = ImageTk.PhotoImage(preview)\n            self.color_preview.delete('all')\n            self.color_preview.create_image(0, 0, anchor='nw', image=self.preview_photo)\n    \n        def get_current_color(self):\n            \"\"\"Get current RGBA color tuple from sliders.\"\"\"\n            return (\n                int(self.red_slider.get()),\n                int(self.green_slider.get()),\n                int(self.blue_slider.get()),\n                int(self.alpha_slider.get())\n            )\n    \n        def load_image(self):\n            \"\"\"Load and display an image with dynamic window resizing.\"\"\"\n            try:\n                file_path = filedialog.askopenfilename(\n                    filetypes=[(\"Image files\", \"*.png *.jpg *.jpeg *.gif *.bmp\")]\n                )\n    \n                if not file_path:\n                    return\n    \n                self.image_path = file_path\n    \n                # Get initial image dimensions\n                img_width, img_height = self.image_handler.get_image_dimensions(file_path)\n    \n                # Resize window to accommodate image\n                self.setup_window_geometry(img_width, img_height)\n    \n                # Update window before calculating available space\n                self.root.update_idletasks()\n    \n                # Calculate available space for image\n                available_width = self.root.winfo_width() - self.SIDEBAR_WIDTH - self.PADDING\n                available_height = self.root.winfo_height() - self.PADDING\n    \n                # Load and scale image\n                self.display_image, self.scale_factor = self.image_handler.load_image(\n                    file_path, available_width, available_height\n                )\n    \n                # Load original image for saving\n                self.original_image = Image.open(file_path).convert('RGBA')\n    \n                # Clear existing text boxes and history\n                self.text_boxes = []\n                self.current_text_box = None\n                self.history = []\n                self.current_state = 0\n    \n                # Update canvas\n                self.update_canvas_display()\n    \n                # Update status\n                self.status_var.set(f\"Loaded: {os.path.basename(file_path)}\")\n    \n            except Exception as e:\n                messagebox.showerror(\"Error\", f\"Failed to load image: {str(e)}\")\n            finally:\n                gc.collect()\n    \n        def update_canvas_display(self):\n            \"\"\"Update canvas size and display image.\"\"\"\n            if self.display_image:\n                # Configure canvas size\n                self.canvas.config(\n                    width=self.display_image.width(),\n                    height=self.display_image.height()\n                )\n    \n                # Clear and display image\n                self.canvas.delete('all')\n                self.canvas.create_image(0, 0, anchor='nw', image=self.display_image)\n                self.redraw_canvas()\n    \n        def add_text_box(self):\n            \"\"\"Add a new text box to the canvas.\"\"\"\n            if not self.original_image:\n                messagebox.showwarning(\"Warning\", \"Please load an image first!\")\n                return\n    \n            if not self.text_content.get().strip():\n                messagebox.showwarning(\"Warning\", \"Please enter some text!\")\n                return\n    \n            text_box = {\n                'text': self.text_content.get(),\n                'x': 50,\n                'y': 50,\n                'font_size': self.font_size.get(),\n                'color': self.get_current_color()\n            }\n    \n            self.save_state()\n            self.text_boxes.append(text_box)\n            self.current_text_box = text_box\n            self.redraw_canvas()\n    \n        def get_text_bounds(self, text_box):\n            \"\"\"Calculate the bounds of a text box.\"\"\"\n            try:\n                font = ImageFont.truetype(\"arial.ttf\", text_box['font_size'])\n            except:\n                font = ImageFont.load_default()\n    \n            temp_img = Image.new('RGBA', (1, 1), (0, 0, 0, 0))\n            draw = ImageDraw.Draw(temp_img)\n            bbox = draw.textbbox((0, 0), text_box['text'], font=font)\n            return {\n                'width': bbox[2] - bbox[0],\n                'height': bbox[3] - bbox[1]\n            }\n    \n        def on_canvas_click(self, event):\n            \"\"\"Handle mouse click on canvas.\"\"\"\n            clicked_box = None\n            for text_box in reversed(self.text_boxes):\n                bounds = self.get_text_bounds(text_box)\n                if (text_box['x'] &lt;= event.x &lt;= text_box['x'] + bounds['width'] and\n                    text_box['y'] &lt;= event.y &lt;= text_box['y'] + bounds['height']):\n                    clicked_box = text_box\n                    break\n    \n            self.current_text_box = clicked_box\n            if clicked_box:\n                self.drag_start = (event.x - clicked_box['x'], event.y - clicked_box['y'])\n            self.redraw_canvas()\n    \n        def on_drag(self, event):\n            \"\"\"Handle dragging of text boxes.\"\"\"\n            if self.current_text_box and self.drag_start:\n                new_x = event.x - self.drag_start[0]\n                new_y = event.y - self.drag_start[1]\n    \n                # Keep text within canvas bounds\n                bounds = self.get_text_bounds(self.current_text_box)\n                canvas_width = self.canvas.winfo_width()\n                canvas_height = self.canvas.winfo_height()\n    \n                new_x = max(0, min(new_x, canvas_width - bounds['width']))\n                new_y = max(0, min(new_y, canvas_height - bounds['height']))\n    \n                self.current_text_box['x'] = new_x\n                self.current_text_box['y'] = new_y\n                self.redraw_canvas()\n    \n        def on_release(self, event):\n            \"\"\"Handle mouse release after dragging.\"\"\"\n            if self.current_text_box:\n                self.save_state()\n            self.drag_start = None\n    \n        def delete_selected(self):\n            \"\"\"Delete the currently selected text box.\"\"\"\n            if self.current_text_box in self.text_boxes:\n                self.save_state()\n                self.text_boxes.remove(self.current_text_box)\n                self.current_text_box = None\n                self.redraw_canvas()\n    \n        def clear_all(self):\n            \"\"\"Clear all text boxes from the canvas.\"\"\"\n            if self.text_boxes:\n                self.save_state()\n                self.text_boxes = []\n                self.current_text_box = None\n                self.redraw_canvas()\n    \n        def undo(self):\n            \"\"\"Undo the last action.\"\"\"\n            if self.current_state &gt; 0:\n                self.current_state -= 1\n                self.text_boxes = deepcopy(self.history[self.current_state])\n                self.current_text_box = None\n                self.redraw_canvas()\n    \n        def save_state(self):\n            \"\"\"Save current state for undo functionality.\"\"\"\n            self.history = self.history[:self.current_state]\n            self.history.append(deepcopy(self.text_boxes))\n            self.current_state = len(self.history)\n    \n        def redraw_canvas(self):\n            \"\"\"Redraw the canvas with all text boxes.\"\"\"\n            if not self.canvas or not self.original_image:\n                return\n    \n            # Create a fresh copy of the displayed image\n            temp_image = self.image_handler.get_current_image().copy()\n    \n            # Create a transparent layer for text\n            text_layer = Image.new('RGBA', temp_image.size, (0, 0, 0, 0))\n            draw = ImageDraw.Draw(text_layer)\n    \n            # Draw all text boxes\n            for text_box in self.text_boxes:\n                try:\n                    font = ImageFont.truetype(\"arial.ttf\", text_box['font_size'])\n                except:\n                    font = ImageFont.load_default()\n    \n                draw.text(\n                    (text_box['x'], text_box['y']),\n                    text_box['text'],\n                    font=font,\n                    fill=text_box['color']\n                )\n    \n            # Composite the text layer over the image\n            temp_image = Image.alpha_composite(temp_image, text_layer)\n    \n            # Update display\n            self.display_image = ImageTk.PhotoImage(temp_image)\n            self.canvas.delete('all')\n            self.canvas.create_image(0, 0, anchor='nw', image=self.display_image)\n    \n            # Draw selection indicator if there's a selected text box\n            if self.current_text_box:\n                bounds = self.get_text_bounds(self.current_text_box)\n                x, y = self.current_text_box['x'], self.current_text_box['y']\n                self.canvas.create_rectangle(\n                    x - 2, y - 2,\n                    x + bounds['width'] + 2, y + bounds['height'] + 2,\n                    outline='red', width=2\n                )\n    \n        def save_result(self):\n            \"\"\"Save the final image with text overlays.\"\"\"\n            if not self.original_image:\n                messagebox.showwarning(\"Warning\", \"Please load an image first!\")\n                return\n    \n            try:\n                save_path = filedialog.asksaveasfilename(\n                    defaultextension=\".png\",\n                    filetypes=[(\"PNG files\", \"*.png\")]\n                )\n    \n                if not save_path:\n                    return\n    \n                # Create final image at original size\n                final_image = self.original_image.copy()\n                text_layer = Image.new('RGBA', final_image.size, (0, 0, 0, 0))\n                draw = ImageDraw.Draw(text_layer)\n    \n                # Scale text boxes back to original image size\n                inverse_scale = 1 / self.scale_factor\n                for text_box in self.text_boxes:\n                    try:\n                        original_font_size = int(text_box['font_size'] * inverse_scale)\n                        font = ImageFont.truetype(\"arial.ttf\", original_font_size)\n                    except:\n                        font = ImageFont.load_default()\n    \n                    original_x = int(text_box['x'] * inverse_scale)\n                    original_y = int(text_box['y'] * inverse_scale)\n    \n                    draw.text(\n                        (original_x, original_y),\n                        text_box['text'],\n                        font=font,\n                        fill=text_box['color']\n                    )\n    \n                # Composite the text layer over the original image\n                final_image = Image.alpha_composite(final_image, text_layer)\n                final_image.save(save_path, \"PNG\")\n                messagebox.showinfo(\"Success\", \"Image saved successfully!\")\n    \n            except Exception as e:\n                messagebox.showerror(\"Error\", f\"Failed to save image: {str(e)}\")\n    \n    if __name__ == \"__main__\":\n        root = tk.Tk()\n        app = TextOverlayTool(root)\n        root.mainloop()\n\n    import tkinter as tk\n    from tkinter import ttk, filedialog, messagebox\n    from PIL import Image, ImageTk, ImageDraw\n    import os\n    from copy import deepcopy\n    import gc\n    \n    class OptimizedImageHandler:\n        def __init__(self):\n            self.current_image = None\n            self.working_image = None\n            self.photo_image = None\n            self.scale_factor = 1.0\n            self.history = []\n    \n        def load_image(self, file_path, max_width, max_height):\n            try:\n                image = Image.open(file_path)\n                if image.mode != 'RGBA':\n                    image = image.convert('RGBA')\n    \n                width_ratio = max_width / image.width\n                height_ratio = max_height / image.height\n                self.scale_factor = min(width_ratio, height_ratio)\n    \n                if self.scale_factor &lt; 1:\n                    new_width = int(image.width * self.scale_factor)\n                    new_height = int(image.height * self.scale_factor)\n                    self.working_image = image.resize((new_width, new_height), Image.Resampling.LANCZOS)\n                else:\n                    self.working_image = image.copy()\n    \n                self.current_image = image\n                self.photo_image = ImageTk.PhotoImage(self.working_image)\n                return True\n    \n            except Exception as e:\n                raise Exception(f\"Failed to load image: {str(e)}\")\n    \n        def cleanup(self):\n            if self.photo_image:\n                del self.photo_image\n            if self.current_image:\n                del self.current_image\n            if self.working_image:\n                del self.working_image\n            gc.collect()\n    \n    class ImageOverlayTool:\n        def __init__(self, root):\n            self.root = root\n            self.root.title(\"Enhanced Image Overlay Tool\")\n    \n            self.image_handler = OptimizedImageHandler()\n            self.initialize_variables()\n            self.setup_window_geometry()\n            self.create_ui()\n            self.setup_bindings()\n    \n        def initialize_variables(self):\n            self.overlays = []\n            self.selected_overlay = None\n            self.dragging = False\n            self.drag_start = None\n    \n            # Control variables\n            self.opacity_var = tk.IntVar(value=255)\n            self.scale_var = tk.DoubleVar(value=1.0)\n            self.rotation_var = tk.IntVar(value=0)\n    \n            # Window constraints\n            self.MIN_WINDOW_WIDTH = 800\n            self.MIN_WINDOW_HEIGHT = 600\n            self.SIDEBAR_WIDTH = 250\n    \n        def create_ui(self):\n            # Main container\n            self.main_container = ttk.PanedWindow(self.root, orient=tk.HORIZONTAL)\n            self.main_container.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)\n    \n            self.create_sidebar()\n            self.create_canvas_area()\n    \n        def create_sidebar(self):\n            self.sidebar = ttk.Frame(self.main_container, width=self.SIDEBAR_WIDTH)\n            self.main_container.add(self.sidebar, weight=0)\n    \n            # File Operations\n            file_frame = ttk.LabelFrame(self.sidebar, text=\"File Operations\")\n            file_frame.pack(pady=5, padx=5, fill=tk.X)\n    \n            ttk.Button(file_frame, text=\"Load Base Image\", command=self.load_base_image).pack(pady=2, fill=tk.X)\n            ttk.Button(file_frame, text=\"Add Overlay\", command=self.add_overlay).pack(pady=2, fill=tk.X)\n            ttk.Button(file_frame, text=\"Save Result\", command=self.save_result).pack(pady=2, fill=tk.X)\n    \n            # Overlay Properties\n            overlay_frame = ttk.LabelFrame(self.sidebar, text=\"Overlay Properties\")\n            overlay_frame.pack(pady=5, padx=5, fill=tk.X)\n    \n            self.create_slider(overlay_frame, \"Opacity:\", self.opacity_var, 0, 255)\n            self.create_slider(overlay_frame, \"Scale:\", self.scale_var, 0.1, 2.0)\n            self.create_slider(overlay_frame, \"Rotation:\", self.rotation_var, 0, 360)\n    \n            # Edit Operations\n            edit_frame = ttk.LabelFrame(self.sidebar, text=\"Edit Operations\")\n            edit_frame.pack(pady=5, padx=5, fill=tk.X)\n    \n            ttk.Button(edit_frame, text=\"Delete Selected\", command=self.delete_selected).pack(pady=2, fill=tk.X)\n            ttk.Button(edit_frame, text=\"Clear All\", command=self.clear_all).pack(pady=2, fill=tk.X)\n            ttk.Button(edit_frame, text=\"Undo\", command=self.undo).pack(pady=2, fill=tk.X)\n    \n        def create_slider(self, parent, label, variable, min_val, max_val):\n            ttk.Label(parent, text=label).pack(pady=2, padx=5, anchor=tk.W)\n            ttk.Scale(parent, from_=min_val, to=max_val, variable=variable, orient=tk.HORIZONTAL).pack(pady=2, padx=5, fill=tk.X)\n    \n        def create_canvas_area(self):\n            self.canvas_frame = ttk.Frame(self.main_container)\n            self.main_container.add(self.canvas_frame, weight=1)\n    \n            self.canvas = tk.Canvas(self.canvas_frame, bg='white')\n            self.canvas.pack(fill=tk.BOTH, expand=True)\n    \n        def setup_bindings(self):\n            self.canvas.bind('&lt;Button-1&gt;', self.on_canvas_click)\n            self.canvas.bind('&lt;B1-Motion&gt;', self.on_drag)\n            self.canvas.bind('&lt;ButtonRelease-1&gt;', self.on_release)\n    \n            self.opacity_var.trace('w', lambda *args: self.update_selected_overlay())\n            self.scale_var.trace('w', lambda *args: self.update_selected_overlay())\n            self.rotation_var.trace('w', lambda *args: self.update_selected_overlay())\n    \n        def load_base_image(self):\n            file_path = filedialog.askopenfilename(filetypes=[(\"Image files\", \"*.png *.jpg *.jpeg *.gif *.bmp\")])\n            if file_path:\n                try:\n                    available_width = self.canvas.winfo_width()\n                    available_height = self.canvas.winfo_height()\n                    self.image_handler.load_image(file_path, available_width, available_height)\n                    self.update_canvas()\n                    self.clear_all()\n                except Exception as e:\n                    messagebox.showerror(\"Error\", str(e))\n    \n        def add_overlay(self):\n            if not self.image_handler.working_image:\n                messagebox.showinfo(\"Info\", \"Please load a base image first\")\n                return\n    \n            file_path = filedialog.askopenfilename(filetypes=[(\"PNG files\", \"*.png\")])\n            if file_path:\n                try:\n                    overlay_image = Image.open(file_path).convert('RGBA')\n                    overlay = {\n                        'image': overlay_image,\n                        'x': 50,\n                        'y': 50,\n                        'opacity': 255,\n                        'scale': 1.0,\n                        'rotation': 0\n                    }\n                    self.overlays.append(overlay)\n                    self.selected_overlay = overlay\n                    self.save_state()\n                    self.update_canvas()\n                except Exception as e:\n                    messagebox.showerror(\"Error\", f\"Failed to add overlay: {str(e)}\")\n    \n        def update_canvas(self):\n            if not self.image_handler.working_image:\n                return\n    \n            composite = self.image_handler.working_image.copy()\n    \n            for overlay in self.overlays:\n                temp = Image.new('RGBA', composite.size, (0,0,0,0))\n                overlay_img = self.transform_overlay(overlay)\n    \n                temp.paste(\n                    overlay_img,\n                    (int(overlay['x']), int(overlay['y'])),\n                    overlay_img\n                )\n                composite = Image.alpha_composite(composite, temp)\n    \n            self.image_handler.photo_image = ImageTk.PhotoImage(composite)\n            self.canvas.delete('all')\n            self.canvas.create_image(0, 0, anchor='nw', image=self.image_handler.photo_image)\n    \n            if self.selected_overlay:\n                self.draw_selection_box()\n    \n        def transform_overlay(self, overlay):\n            img = overlay['image'].copy()\n    \n            if overlay['scale'] != 1.0:\n                new_size = (\n                    int(img.width * overlay['scale']),\n                    int(img.height * overlay['scale'])\n                )\n                img = img.resize(new_size, Image.Resampling.LANCZOS)\n    \n            if overlay['rotation']:\n                img = img.rotate(\n                    overlay['rotation'],\n                    expand=True,\n                    resample=Image.Resampling.BICUBIC\n                )\n    \n            if overlay['opacity'] != 255:\n                img.putalpha(\n                    Image.eval(img.getchannel('A'),\n                            lambda x: x * overlay['opacity'] // 255)\n                )\n    \n            return img\n    \n        def draw_selection_box(self):\n            overlay = self.selected_overlay\n            img = self.transform_overlay(overlay)\n    \n            self.canvas.create_rectangle(\n                overlay['x'], overlay['y'],\n                overlay['x'] + img.width,\n                overlay['y'] + img.height,\n                outline='red',\n                width=2\n            )\n    \n        def on_canvas_click(self, event):\n            clicked = None\n            for overlay in reversed(self.overlays):\n                img = self.transform_overlay(overlay)\n                if (overlay['x'] &lt;= event.x &lt;= overlay['x'] + img.width and\n                    overlay['y'] &lt;= event.y &lt;= overlay['y'] + img.height):\n                    clicked = overlay\n                    break\n    \n            self.selected_overlay = clicked\n            if clicked:\n                self.drag_start = (event.x - clicked['x'], event.y - clicked['y'])\n                self.update_property_values(clicked)\n            self.update_canvas()\n    \n        def on_drag(self, event):\n            if self.selected_overlay and self.drag_start:\n                new_x = event.x - self.drag_start[0]\n                new_y = event.y - self.drag_start[1]\n    \n                # Keep overlay within canvas bounds\n                canvas_width = self.canvas.winfo_width()\n                canvas_height = self.canvas.winfo_height()\n                img = self.transform_overlay(self.selected_overlay)\n    \n                new_x = max(0, min(new_x, canvas_width - img.width))\n                new_y = max(0, min(new_y, canvas_height - img.height))\n    \n                self.selected_overlay['x'] = new_x\n                self.selected_overlay['y'] = new_y\n                self.update_canvas()\n    \n        def save_result(self):\n            if not self.image_handler.current_image:\n                messagebox.showinfo(\"Info\", \"No image to save\")\n                return\n    \n            save_path = filedialog.asksaveasfilename(\n                defaultextension=\".png\",\n                filetypes=[(\"PNG files\", \"*.png\")]\n            )\n    \n            if save_path:\n                try:\n                    final_image = self.image_handler.current_image.copy()\n                    scale_factor = self.image_handler.scale_factor\n    \n                    for overlay in self.overlays:\n                        temp = Image.new('RGBA', final_image.size, (0,0,0,0))\n                        overlay_img = self.transform_overlay(overlay)\n    \n                        # Scale positions back to original size\n                        original_x = int(overlay['x'] / scale_factor)\n                        original_y = int(overlay['y'] / scale_factor)\n    \n                        temp.paste(\n                            overlay_img,\n                            (original_x, original_y),\n                            overlay_img\n                        )\n                        final_image = Image.alpha_composite(final_image, temp)\n    \n                    final_image.save(save_path)\n                    messagebox.showinfo(\"Success\", \"Image saved successfully!\")\n                except Exception as e:\n                    messagebox.showerror(\"Error\", f\"Failed to save image: {str(e)}\")\n    \n        def save_state(self):\n            self.image_handler.history.append(deepcopy(self.overlays))\n            if len(self.image_handler.history) &gt; 10:\n                self.image_handler.history.pop(0)\n    \n        def undo(self):\n            if self.image_handler.history:\n                self.overlays = deepcopy(self.image_handler.history.pop())\n                self.selected_overlay = None\n                self.update_canvas()\n    \n        def clear_all(self):\n            if self.overlays:\n                self.save_state()\n                self.overlays = []\n                self.selected_overlay = None\n                self.update_canvas()\n    \n        def delete_selected(self):\n            if self.selected_overlay in self.overlays:\n                self.save_state()\n                self.overlays.remove(self.selected_overlay)\n                self.selected_overlay = None\n                self.update_canvas()\n    \n        def update_property_values(self, overlay):\n            self.opacity_var.set(overlay['opacity'])\n            self.scale_var.set(overlay['scale'])\n            self.rotation_var.set(overlay['rotation'])\n    \n        def update_selected_overlay(self):\n            if self.selected_overlay:\n                self.selected_overlay['opacity'] = self.opacity_var.get()\n                self.selected_overlay['scale'] = self.scale_var.get()\n                self.selected_overlay['rotation'] = self.rotation_var.get()\n                self.update_canvas()\n    \n        def setup_window_geometry(self):\n            self.root.minsize(self.MIN_WINDOW_WIDTH, self.MIN_WINDOW_HEIGHT)\n            screen_width = self.root.winfo_screenwidth()\n            screen_height = self.root.winfo_screenheight()\n            window_width = min(screen_width - 100, 1200)\n            window_height = min(screen_height - 100, 800)\n            x = (screen_width - window_width) // 2\n            y = (screen_height - window_height) // 2\n            self.root.geometry(f\"{window_width}x{window_height}+{x}+{y}\")\n    \n        def on_release(self, event):\n            if self.selected_overlay and self.drag_start:\n                self.save_state()\n            self.drag_start = None\n    \n    def main():\n        root = tk.Tk()\n        app = ImageOverlayTool(root)\n        root.mainloop()\n    \n    if __name__ == \"__main__\":\n        main()\n    \n    \n\n",
            "author_fullname": "t2_bcby533b",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Im trying to make an image overlay tool that matches the code below but Im having a hard time",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gtafeg",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.27,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731837761.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Idea&amp;#39;s ?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import tkinter as tk\nfrom tkinter import ttk, filedialog, messagebox\nfrom PIL import Image, ImageTk, ImageDraw, ImageFont\nimport os\nfrom copy import deepcopy\nimport gc\n\nclass OptimizedImageHandler:\n    def __init__(self):\n        self._current_image = None\n        self._photo_image = None\n\n    def get_image_dimensions(self, file_path):\n        &amp;quot;&amp;quot;&amp;quot;Get the dimensions of an image without fully loading it.&amp;quot;&amp;quot;&amp;quot;\n        with Image.open(file_path) as img:\n            return img.size\n\n    def load_image(self, file_path, max_width, max_height):\n        &amp;quot;&amp;quot;&amp;quot;Load and optimize an image for display, maintaining aspect ratio.&amp;quot;&amp;quot;&amp;quot;\n        try:\n            if self._photo_image:\n                del self._photo_image\n            if self._current_image:\n                del self._current_image\n\n            gc.collect()\n\n            image = Image.open(file_path)\n            if image.mode != &amp;#39;RGBA&amp;#39;:\n                image = image.convert(&amp;#39;RGBA&amp;#39;)\n\n            # Store original dimensions\n            original_width = image.width\n            original_height = image.height\n\n            # Calculate scaling factor to fit within max dimensions\n            width_ratio = max_width / image.width\n            height_ratio = max_height / image.height\n            scale_factor = min(width_ratio, height_ratio)\n\n            if scale_factor &amp;lt; 1:\n                new_width = int(image.width * scale_factor)\n                new_height = int(image.height * scale_factor)\n                image = image.resize((new_width, new_height), Image.Resampling.LANCZOS)\n\n            self._current_image = image\n            self._photo_image = ImageTk.PhotoImage(image)\n\n            return self._photo_image, scale_factor\n\n        except Exception as e:\n            raise Exception(f&amp;quot;Failed to load image: {str(e)}&amp;quot;)\n\n    def get_current_image(self):\n        &amp;quot;&amp;quot;&amp;quot;Get the current PIL Image object.&amp;quot;&amp;quot;&amp;quot;\n        return self._current_image\n\n    def cleanup(self):\n        &amp;quot;&amp;quot;&amp;quot;Clean up image resources.&amp;quot;&amp;quot;&amp;quot;\n        if self._photo_image:\n            del self._photo_image\n        if self._current_image:\n            del self._current_image\n        gc.collect()\n\nclass TextOverlayTool:\n    def __init__(self, root):\n        self.root = root\n        self.root.title(&amp;quot;Text Overlay Tool&amp;quot;)\n\n        # Initialize handlers and variables\n        self.image_handler = OptimizedImageHandler()\n        self.initialize_variables()\n\n        # Set up initial window size and position\n        self.setup_window_geometry()\n\n        # Set up UI components\n        self.setup_ui()\n        self.setup_bindings()\n\n    def initialize_variables(self):\n        &amp;quot;&amp;quot;&amp;quot;Initialize all class variables.&amp;quot;&amp;quot;&amp;quot;\n        self.image_path = None\n        self.original_image = None\n        self.display_image = None\n        self.canvas = None\n        self.preview_photo = None\n        self.scale_factor = 1.0\n        self.status_var = tk.StringVar()\n\n        # UI constraints\n        self.MIN_WINDOW_WIDTH = 800\n        self.MIN_WINDOW_HEIGHT = 600\n        self.SIDEBAR_WIDTH = 250\n        self.PADDING = 40\n\n        # Text handling variables\n        self.text_boxes = []\n        self.current_text_box = None\n        self.dragging = False\n        self.drag_start = None\n        self.history = []\n        self.current_state = 0\n\n        # Text properties\n        self.font_size = tk.IntVar(value=24)\n        self.text_content = tk.StringVar(value=&amp;quot;&amp;quot;)\n\n    def setup_window_geometry(self, image_width=None, image_height=None):\n        &amp;quot;&amp;quot;&amp;quot;Set up window geometry based on screen size and optionally image size.&amp;quot;&amp;quot;&amp;quot;\n        screen_width = self.root.winfo_screenwidth()\n        screen_height = self.root.winfo_screenheight()\n\n        if image_width and image_height:\n            window_width = min(image_width + self.SIDEBAR_WIDTH + self.PADDING,\n                             screen_width * 0.9)\n            window_height = min(image_height + self.PADDING,\n                              screen_height * 0.9)\n        else:\n            window_width = min(self.MIN_WINDOW_WIDTH, screen_width * 0.8)\n            window_height = min(self.MIN_WINDOW_HEIGHT, screen_height * 0.8)\n\n        window_width = max(window_width, self.MIN_WINDOW_WIDTH)\n        window_height = max(window_height, self.MIN_WINDOW_HEIGHT)\n\n        x = (screen_width - window_width) // 2\n        y = (screen_height - window_height) // 2\n\n        self.root.geometry(f&amp;quot;{int(window_width)}x{int(window_height)}+{int(x)}+{int(y)}&amp;quot;)\n\n    def setup_ui(self):\n        &amp;quot;&amp;quot;&amp;quot;Set up the user interface components.&amp;quot;&amp;quot;&amp;quot;\n        # Main container\n        self.main_container = ttk.PanedWindow(self.root, orient=tk.HORIZONTAL)\n        self.main_container.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)\n\n        # Create sidebar\n        self.setup_sidebar()\n\n        # Create canvas area\n        self.setup_canvas_area()\n\n    def setup_sidebar(self):\n        &amp;quot;&amp;quot;&amp;quot;Set up the sidebar with all controls.&amp;quot;&amp;quot;&amp;quot;\n        # Sidebar frame\n        self.sidebar = ttk.Frame(self.main_container, width=self.SIDEBAR_WIDTH)\n        self.main_container.add(self.sidebar, weight=0)\n\n        # Title\n        ttk.Label(self.sidebar, text=&amp;quot;Text Overlay Tool&amp;quot;, font=(&amp;#39;Arial&amp;#39;, 16, &amp;#39;bold&amp;#39;)).pack(pady=10)\n\n        # File operations frame\n        file_frame = ttk.LabelFrame(self.sidebar, text=&amp;quot;File Operations&amp;quot;)\n        file_frame.pack(pady=5, padx=5, fill=tk.X)\n        ttk.Button(file_frame, text=&amp;quot;Load Image&amp;quot;, command=self.load_image).pack(pady=2, fill=tk.X, padx=5)\n        ttk.Button(file_frame, text=&amp;quot;Save Image&amp;quot;, command=self.save_result).pack(pady=2, fill=tk.X, padx=5)\n        ttk.Label(file_frame, textvariable=self.status_var).pack(pady=2, padx=5)\n\n        # Text properties frame\n        text_frame = ttk.LabelFrame(self.sidebar, text=&amp;quot;Text Properties&amp;quot;)\n        text_frame.pack(pady=5, padx=5, fill=tk.X)\n\n        # Text input\n        ttk.Label(text_frame, text=&amp;quot;Enter Text:&amp;quot;).pack(pady=2, padx=5, anchor=tk.W)\n        self.text_entry = ttk.Entry(text_frame, textvariable=self.text_content)\n        self.text_entry.pack(pady=2, padx=5, fill=tk.X)\n\n        # Font size slider\n        ttk.Label(text_frame, text=&amp;quot;Font Size:&amp;quot;).pack(pady=2, padx=5, anchor=tk.W)\n        font_scale = ttk.Scale(text_frame, from_=8, to=72, variable=self.font_size, orient=tk.HORIZONTAL)\n        font_scale.pack(pady=2, padx=5, fill=tk.X)\n\n        # Color selection\n        color_frame = ttk.LabelFrame(text_frame, text=&amp;quot;Color Settings&amp;quot;)\n        color_frame.pack(pady=5, padx=5, fill=tk.X)\n\n        # Color sliders\n        self.red_slider = self.create_color_slider(color_frame, &amp;quot;Red:&amp;quot;, 0, 255)\n        self.green_slider = self.create_color_slider(color_frame, &amp;quot;Green:&amp;quot;, 0, 255)\n        self.blue_slider = self.create_color_slider(color_frame, &amp;quot;Blue:&amp;quot;, 0, 255)\n        self.alpha_slider = self.create_color_slider(color_frame, &amp;quot;Opacity:&amp;quot;, 0, 255, 255)\n\n        # Color preview\n        self.color_preview = tk.Canvas(color_frame, width=50, height=25, bd=1, relief=&amp;#39;solid&amp;#39;)\n        self.color_preview.pack(pady=5)\n\n        # Edit operations frame\n        edit_frame = ttk.LabelFrame(self.sidebar, text=&amp;quot;Edit Operations&amp;quot;)\n        edit_frame.pack(pady=5, padx=5, fill=tk.X)\n\n        ttk.Button(edit_frame, text=&amp;quot;Add Text Box&amp;quot;, command=self.add_text_box).pack(pady=2, fill=tk.X, padx=5)\n        ttk.Button(edit_frame, text=&amp;quot;Delete Selected&amp;quot;, command=self.delete_selected).pack(pady=2, fill=tk.X, padx=5)\n        ttk.Button(edit_frame, text=&amp;quot;Clear All&amp;quot;, command=self.clear_all).pack(pady=2, fill=tk.X, padx=5)\n        ttk.Button(edit_frame, text=&amp;quot;Undo&amp;quot;, command=self.undo).pack(pady=2, fill=tk.X, padx=5)\n\n        # Bind color updates\n        for slider in [self.red_slider, self.green_slider, self.blue_slider, self.alpha_slider]:\n            slider.configure(command=self.update_color_preview)\n\n    def setup_canvas_area(self):\n        &amp;quot;&amp;quot;&amp;quot;Set up the canvas area for image display.&amp;quot;&amp;quot;&amp;quot;\n        self.canvas_frame = ttk.Frame(self.main_container)\n        self.main_container.add(self.canvas_frame, weight=1)\n\n        self.canvas = tk.Canvas(self.canvas_frame, bg=&amp;#39;white&amp;#39;)\n        self.canvas.pack(fill=tk.BOTH, expand=True)\n\n    def create_color_slider(self, parent, label, from_, to, default=0):\n        &amp;quot;&amp;quot;&amp;quot;Helper method to create color sliders.&amp;quot;&amp;quot;&amp;quot;\n        ttk.Label(parent, text=label).pack(pady=2, padx=5, anchor=tk.W)\n        slider = ttk.Scale(parent, from_=from_, to=to, orient=tk.HORIZONTAL)\n        slider.set(default)\n        slider.pack(pady=2, padx=5, fill=tk.X)\n        return slider\n\n    def setup_bindings(self):\n        &amp;quot;&amp;quot;&amp;quot;Set up event bindings.&amp;quot;&amp;quot;&amp;quot;\n        self.canvas.bind(&amp;#39;&amp;lt;Button-1&amp;gt;&amp;#39;, self.on_canvas_click)\n        self.canvas.bind(&amp;#39;&amp;lt;B1-Motion&amp;gt;&amp;#39;, self.on_drag)\n        self.canvas.bind(&amp;#39;&amp;lt;ButtonRelease-1&amp;gt;&amp;#39;, self.on_release)\n        self.root.bind(&amp;#39;&amp;lt;Delete&amp;gt;&amp;#39;, lambda e: self.delete_selected())\n        self.root.bind(&amp;#39;&amp;lt;Control-z&amp;gt;&amp;#39;, lambda e: self.undo())\n\n    def update_color_preview(self, _=None):\n        &amp;quot;&amp;quot;&amp;quot;Update the color preview box.&amp;quot;&amp;quot;&amp;quot;\n        color = (\n            int(self.red_slider.get()),\n            int(self.green_slider.get()),\n            int(self.blue_slider.get()),\n            int(self.alpha_slider.get())\n        )\n\n        preview = Image.new(&amp;#39;RGBA&amp;#39;, (50, 25), color)\n        self.preview_photo = ImageTk.PhotoImage(preview)\n        self.color_preview.delete(&amp;#39;all&amp;#39;)\n        self.color_preview.create_image(0, 0, anchor=&amp;#39;nw&amp;#39;, image=self.preview_photo)\n\n    def get_current_color(self):\n        &amp;quot;&amp;quot;&amp;quot;Get current RGBA color tuple from sliders.&amp;quot;&amp;quot;&amp;quot;\n        return (\n            int(self.red_slider.get()),\n            int(self.green_slider.get()),\n            int(self.blue_slider.get()),\n            int(self.alpha_slider.get())\n        )\n\n    def load_image(self):\n        &amp;quot;&amp;quot;&amp;quot;Load and display an image with dynamic window resizing.&amp;quot;&amp;quot;&amp;quot;\n        try:\n            file_path = filedialog.askopenfilename(\n                filetypes=[(&amp;quot;Image files&amp;quot;, &amp;quot;*.png *.jpg *.jpeg *.gif *.bmp&amp;quot;)]\n            )\n\n            if not file_path:\n                return\n\n            self.image_path = file_path\n\n            # Get initial image dimensions\n            img_width, img_height = self.image_handler.get_image_dimensions(file_path)\n\n            # Resize window to accommodate image\n            self.setup_window_geometry(img_width, img_height)\n\n            # Update window before calculating available space\n            self.root.update_idletasks()\n\n            # Calculate available space for image\n            available_width = self.root.winfo_width() - self.SIDEBAR_WIDTH - self.PADDING\n            available_height = self.root.winfo_height() - self.PADDING\n\n            # Load and scale image\n            self.display_image, self.scale_factor = self.image_handler.load_image(\n                file_path, available_width, available_height\n            )\n\n            # Load original image for saving\n            self.original_image = Image.open(file_path).convert(&amp;#39;RGBA&amp;#39;)\n\n            # Clear existing text boxes and history\n            self.text_boxes = []\n            self.current_text_box = None\n            self.history = []\n            self.current_state = 0\n\n            # Update canvas\n            self.update_canvas_display()\n\n            # Update status\n            self.status_var.set(f&amp;quot;Loaded: {os.path.basename(file_path)}&amp;quot;)\n\n        except Exception as e:\n            messagebox.showerror(&amp;quot;Error&amp;quot;, f&amp;quot;Failed to load image: {str(e)}&amp;quot;)\n        finally:\n            gc.collect()\n\n    def update_canvas_display(self):\n        &amp;quot;&amp;quot;&amp;quot;Update canvas size and display image.&amp;quot;&amp;quot;&amp;quot;\n        if self.display_image:\n            # Configure canvas size\n            self.canvas.config(\n                width=self.display_image.width(),\n                height=self.display_image.height()\n            )\n\n            # Clear and display image\n            self.canvas.delete(&amp;#39;all&amp;#39;)\n            self.canvas.create_image(0, 0, anchor=&amp;#39;nw&amp;#39;, image=self.display_image)\n            self.redraw_canvas()\n\n    def add_text_box(self):\n        &amp;quot;&amp;quot;&amp;quot;Add a new text box to the canvas.&amp;quot;&amp;quot;&amp;quot;\n        if not self.original_image:\n            messagebox.showwarning(&amp;quot;Warning&amp;quot;, &amp;quot;Please load an image first!&amp;quot;)\n            return\n\n        if not self.text_content.get().strip():\n            messagebox.showwarning(&amp;quot;Warning&amp;quot;, &amp;quot;Please enter some text!&amp;quot;)\n            return\n\n        text_box = {\n            &amp;#39;text&amp;#39;: self.text_content.get(),\n            &amp;#39;x&amp;#39;: 50,\n            &amp;#39;y&amp;#39;: 50,\n            &amp;#39;font_size&amp;#39;: self.font_size.get(),\n            &amp;#39;color&amp;#39;: self.get_current_color()\n        }\n\n        self.save_state()\n        self.text_boxes.append(text_box)\n        self.current_text_box = text_box\n        self.redraw_canvas()\n\n    def get_text_bounds(self, text_box):\n        &amp;quot;&amp;quot;&amp;quot;Calculate the bounds of a text box.&amp;quot;&amp;quot;&amp;quot;\n        try:\n            font = ImageFont.truetype(&amp;quot;arial.ttf&amp;quot;, text_box[&amp;#39;font_size&amp;#39;])\n        except:\n            font = ImageFont.load_default()\n\n        temp_img = Image.new(&amp;#39;RGBA&amp;#39;, (1, 1), (0, 0, 0, 0))\n        draw = ImageDraw.Draw(temp_img)\n        bbox = draw.textbbox((0, 0), text_box[&amp;#39;text&amp;#39;], font=font)\n        return {\n            &amp;#39;width&amp;#39;: bbox[2] - bbox[0],\n            &amp;#39;height&amp;#39;: bbox[3] - bbox[1]\n        }\n\n    def on_canvas_click(self, event):\n        &amp;quot;&amp;quot;&amp;quot;Handle mouse click on canvas.&amp;quot;&amp;quot;&amp;quot;\n        clicked_box = None\n        for text_box in reversed(self.text_boxes):\n            bounds = self.get_text_bounds(text_box)\n            if (text_box[&amp;#39;x&amp;#39;] &amp;lt;= event.x &amp;lt;= text_box[&amp;#39;x&amp;#39;] + bounds[&amp;#39;width&amp;#39;] and\n                text_box[&amp;#39;y&amp;#39;] &amp;lt;= event.y &amp;lt;= text_box[&amp;#39;y&amp;#39;] + bounds[&amp;#39;height&amp;#39;]):\n                clicked_box = text_box\n                break\n\n        self.current_text_box = clicked_box\n        if clicked_box:\n            self.drag_start = (event.x - clicked_box[&amp;#39;x&amp;#39;], event.y - clicked_box[&amp;#39;y&amp;#39;])\n        self.redraw_canvas()\n\n    def on_drag(self, event):\n        &amp;quot;&amp;quot;&amp;quot;Handle dragging of text boxes.&amp;quot;&amp;quot;&amp;quot;\n        if self.current_text_box and self.drag_start:\n            new_x = event.x - self.drag_start[0]\n            new_y = event.y - self.drag_start[1]\n\n            # Keep text within canvas bounds\n            bounds = self.get_text_bounds(self.current_text_box)\n            canvas_width = self.canvas.winfo_width()\n            canvas_height = self.canvas.winfo_height()\n\n            new_x = max(0, min(new_x, canvas_width - bounds[&amp;#39;width&amp;#39;]))\n            new_y = max(0, min(new_y, canvas_height - bounds[&amp;#39;height&amp;#39;]))\n\n            self.current_text_box[&amp;#39;x&amp;#39;] = new_x\n            self.current_text_box[&amp;#39;y&amp;#39;] = new_y\n            self.redraw_canvas()\n\n    def on_release(self, event):\n        &amp;quot;&amp;quot;&amp;quot;Handle mouse release after dragging.&amp;quot;&amp;quot;&amp;quot;\n        if self.current_text_box:\n            self.save_state()\n        self.drag_start = None\n\n    def delete_selected(self):\n        &amp;quot;&amp;quot;&amp;quot;Delete the currently selected text box.&amp;quot;&amp;quot;&amp;quot;\n        if self.current_text_box in self.text_boxes:\n            self.save_state()\n            self.text_boxes.remove(self.current_text_box)\n            self.current_text_box = None\n            self.redraw_canvas()\n\n    def clear_all(self):\n        &amp;quot;&amp;quot;&amp;quot;Clear all text boxes from the canvas.&amp;quot;&amp;quot;&amp;quot;\n        if self.text_boxes:\n            self.save_state()\n            self.text_boxes = []\n            self.current_text_box = None\n            self.redraw_canvas()\n\n    def undo(self):\n        &amp;quot;&amp;quot;&amp;quot;Undo the last action.&amp;quot;&amp;quot;&amp;quot;\n        if self.current_state &amp;gt; 0:\n            self.current_state -= 1\n            self.text_boxes = deepcopy(self.history[self.current_state])\n            self.current_text_box = None\n            self.redraw_canvas()\n\n    def save_state(self):\n        &amp;quot;&amp;quot;&amp;quot;Save current state for undo functionality.&amp;quot;&amp;quot;&amp;quot;\n        self.history = self.history[:self.current_state]\n        self.history.append(deepcopy(self.text_boxes))\n        self.current_state = len(self.history)\n\n    def redraw_canvas(self):\n        &amp;quot;&amp;quot;&amp;quot;Redraw the canvas with all text boxes.&amp;quot;&amp;quot;&amp;quot;\n        if not self.canvas or not self.original_image:\n            return\n\n        # Create a fresh copy of the displayed image\n        temp_image = self.image_handler.get_current_image().copy()\n\n        # Create a transparent layer for text\n        text_layer = Image.new(&amp;#39;RGBA&amp;#39;, temp_image.size, (0, 0, 0, 0))\n        draw = ImageDraw.Draw(text_layer)\n\n        # Draw all text boxes\n        for text_box in self.text_boxes:\n            try:\n                font = ImageFont.truetype(&amp;quot;arial.ttf&amp;quot;, text_box[&amp;#39;font_size&amp;#39;])\n            except:\n                font = ImageFont.load_default()\n\n            draw.text(\n                (text_box[&amp;#39;x&amp;#39;], text_box[&amp;#39;y&amp;#39;]),\n                text_box[&amp;#39;text&amp;#39;],\n                font=font,\n                fill=text_box[&amp;#39;color&amp;#39;]\n            )\n\n        # Composite the text layer over the image\n        temp_image = Image.alpha_composite(temp_image, text_layer)\n\n        # Update display\n        self.display_image = ImageTk.PhotoImage(temp_image)\n        self.canvas.delete(&amp;#39;all&amp;#39;)\n        self.canvas.create_image(0, 0, anchor=&amp;#39;nw&amp;#39;, image=self.display_image)\n\n        # Draw selection indicator if there&amp;#39;s a selected text box\n        if self.current_text_box:\n            bounds = self.get_text_bounds(self.current_text_box)\n            x, y = self.current_text_box[&amp;#39;x&amp;#39;], self.current_text_box[&amp;#39;y&amp;#39;]\n            self.canvas.create_rectangle(\n                x - 2, y - 2,\n                x + bounds[&amp;#39;width&amp;#39;] + 2, y + bounds[&amp;#39;height&amp;#39;] + 2,\n                outline=&amp;#39;red&amp;#39;, width=2\n            )\n\n    def save_result(self):\n        &amp;quot;&amp;quot;&amp;quot;Save the final image with text overlays.&amp;quot;&amp;quot;&amp;quot;\n        if not self.original_image:\n            messagebox.showwarning(&amp;quot;Warning&amp;quot;, &amp;quot;Please load an image first!&amp;quot;)\n            return\n\n        try:\n            save_path = filedialog.asksaveasfilename(\n                defaultextension=&amp;quot;.png&amp;quot;,\n                filetypes=[(&amp;quot;PNG files&amp;quot;, &amp;quot;*.png&amp;quot;)]\n            )\n\n            if not save_path:\n                return\n\n            # Create final image at original size\n            final_image = self.original_image.copy()\n            text_layer = Image.new(&amp;#39;RGBA&amp;#39;, final_image.size, (0, 0, 0, 0))\n            draw = ImageDraw.Draw(text_layer)\n\n            # Scale text boxes back to original image size\n            inverse_scale = 1 / self.scale_factor\n            for text_box in self.text_boxes:\n                try:\n                    original_font_size = int(text_box[&amp;#39;font_size&amp;#39;] * inverse_scale)\n                    font = ImageFont.truetype(&amp;quot;arial.ttf&amp;quot;, original_font_size)\n                except:\n                    font = ImageFont.load_default()\n\n                original_x = int(text_box[&amp;#39;x&amp;#39;] * inverse_scale)\n                original_y = int(text_box[&amp;#39;y&amp;#39;] * inverse_scale)\n\n                draw.text(\n                    (original_x, original_y),\n                    text_box[&amp;#39;text&amp;#39;],\n                    font=font,\n                    fill=text_box[&amp;#39;color&amp;#39;]\n                )\n\n            # Composite the text layer over the original image\n            final_image = Image.alpha_composite(final_image, text_layer)\n            final_image.save(save_path, &amp;quot;PNG&amp;quot;)\n            messagebox.showinfo(&amp;quot;Success&amp;quot;, &amp;quot;Image saved successfully!&amp;quot;)\n\n        except Exception as e:\n            messagebox.showerror(&amp;quot;Error&amp;quot;, f&amp;quot;Failed to save image: {str(e)}&amp;quot;)\n\nif __name__ == &amp;quot;__main__&amp;quot;:\n    root = tk.Tk()\n    app = TextOverlayTool(root)\n    root.mainloop()\n\nimport tkinter as tk\nfrom tkinter import ttk, filedialog, messagebox\nfrom PIL import Image, ImageTk, ImageDraw\nimport os\nfrom copy import deepcopy\nimport gc\n\nclass OptimizedImageHandler:\n    def __init__(self):\n        self.current_image = None\n        self.working_image = None\n        self.photo_image = None\n        self.scale_factor = 1.0\n        self.history = []\n\n    def load_image(self, file_path, max_width, max_height):\n        try:\n            image = Image.open(file_path)\n            if image.mode != &amp;#39;RGBA&amp;#39;:\n                image = image.convert(&amp;#39;RGBA&amp;#39;)\n\n            width_ratio = max_width / image.width\n            height_ratio = max_height / image.height\n            self.scale_factor = min(width_ratio, height_ratio)\n\n            if self.scale_factor &amp;lt; 1:\n                new_width = int(image.width * self.scale_factor)\n                new_height = int(image.height * self.scale_factor)\n                self.working_image = image.resize((new_width, new_height), Image.Resampling.LANCZOS)\n            else:\n                self.working_image = image.copy()\n\n            self.current_image = image\n            self.photo_image = ImageTk.PhotoImage(self.working_image)\n            return True\n\n        except Exception as e:\n            raise Exception(f&amp;quot;Failed to load image: {str(e)}&amp;quot;)\n\n    def cleanup(self):\n        if self.photo_image:\n            del self.photo_image\n        if self.current_image:\n            del self.current_image\n        if self.working_image:\n            del self.working_image\n        gc.collect()\n\nclass ImageOverlayTool:\n    def __init__(self, root):\n        self.root = root\n        self.root.title(&amp;quot;Enhanced Image Overlay Tool&amp;quot;)\n\n        self.image_handler = OptimizedImageHandler()\n        self.initialize_variables()\n        self.setup_window_geometry()\n        self.create_ui()\n        self.setup_bindings()\n\n    def initialize_variables(self):\n        self.overlays = []\n        self.selected_overlay = None\n        self.dragging = False\n        self.drag_start = None\n\n        # Control variables\n        self.opacity_var = tk.IntVar(value=255)\n        self.scale_var = tk.DoubleVar(value=1.0)\n        self.rotation_var = tk.IntVar(value=0)\n\n        # Window constraints\n        self.MIN_WINDOW_WIDTH = 800\n        self.MIN_WINDOW_HEIGHT = 600\n        self.SIDEBAR_WIDTH = 250\n\n    def create_ui(self):\n        # Main container\n        self.main_container = ttk.PanedWindow(self.root, orient=tk.HORIZONTAL)\n        self.main_container.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)\n\n        self.create_sidebar()\n        self.create_canvas_area()\n\n    def create_sidebar(self):\n        self.sidebar = ttk.Frame(self.main_container, width=self.SIDEBAR_WIDTH)\n        self.main_container.add(self.sidebar, weight=0)\n\n        # File Operations\n        file_frame = ttk.LabelFrame(self.sidebar, text=&amp;quot;File Operations&amp;quot;)\n        file_frame.pack(pady=5, padx=5, fill=tk.X)\n\n        ttk.Button(file_frame, text=&amp;quot;Load Base Image&amp;quot;, command=self.load_base_image).pack(pady=2, fill=tk.X)\n        ttk.Button(file_frame, text=&amp;quot;Add Overlay&amp;quot;, command=self.add_overlay).pack(pady=2, fill=tk.X)\n        ttk.Button(file_frame, text=&amp;quot;Save Result&amp;quot;, command=self.save_result).pack(pady=2, fill=tk.X)\n\n        # Overlay Properties\n        overlay_frame = ttk.LabelFrame(self.sidebar, text=&amp;quot;Overlay Properties&amp;quot;)\n        overlay_frame.pack(pady=5, padx=5, fill=tk.X)\n\n        self.create_slider(overlay_frame, &amp;quot;Opacity:&amp;quot;, self.opacity_var, 0, 255)\n        self.create_slider(overlay_frame, &amp;quot;Scale:&amp;quot;, self.scale_var, 0.1, 2.0)\n        self.create_slider(overlay_frame, &amp;quot;Rotation:&amp;quot;, self.rotation_var, 0, 360)\n\n        # Edit Operations\n        edit_frame = ttk.LabelFrame(self.sidebar, text=&amp;quot;Edit Operations&amp;quot;)\n        edit_frame.pack(pady=5, padx=5, fill=tk.X)\n\n        ttk.Button(edit_frame, text=&amp;quot;Delete Selected&amp;quot;, command=self.delete_selected).pack(pady=2, fill=tk.X)\n        ttk.Button(edit_frame, text=&amp;quot;Clear All&amp;quot;, command=self.clear_all).pack(pady=2, fill=tk.X)\n        ttk.Button(edit_frame, text=&amp;quot;Undo&amp;quot;, command=self.undo).pack(pady=2, fill=tk.X)\n\n    def create_slider(self, parent, label, variable, min_val, max_val):\n        ttk.Label(parent, text=label).pack(pady=2, padx=5, anchor=tk.W)\n        ttk.Scale(parent, from_=min_val, to=max_val, variable=variable, orient=tk.HORIZONTAL).pack(pady=2, padx=5, fill=tk.X)\n\n    def create_canvas_area(self):\n        self.canvas_frame = ttk.Frame(self.main_container)\n        self.main_container.add(self.canvas_frame, weight=1)\n\n        self.canvas = tk.Canvas(self.canvas_frame, bg=&amp;#39;white&amp;#39;)\n        self.canvas.pack(fill=tk.BOTH, expand=True)\n\n    def setup_bindings(self):\n        self.canvas.bind(&amp;#39;&amp;lt;Button-1&amp;gt;&amp;#39;, self.on_canvas_click)\n        self.canvas.bind(&amp;#39;&amp;lt;B1-Motion&amp;gt;&amp;#39;, self.on_drag)\n        self.canvas.bind(&amp;#39;&amp;lt;ButtonRelease-1&amp;gt;&amp;#39;, self.on_release)\n\n        self.opacity_var.trace(&amp;#39;w&amp;#39;, lambda *args: self.update_selected_overlay())\n        self.scale_var.trace(&amp;#39;w&amp;#39;, lambda *args: self.update_selected_overlay())\n        self.rotation_var.trace(&amp;#39;w&amp;#39;, lambda *args: self.update_selected_overlay())\n\n    def load_base_image(self):\n        file_path = filedialog.askopenfilename(filetypes=[(&amp;quot;Image files&amp;quot;, &amp;quot;*.png *.jpg *.jpeg *.gif *.bmp&amp;quot;)])\n        if file_path:\n            try:\n                available_width = self.canvas.winfo_width()\n                available_height = self.canvas.winfo_height()\n                self.image_handler.load_image(file_path, available_width, available_height)\n                self.update_canvas()\n                self.clear_all()\n            except Exception as e:\n                messagebox.showerror(&amp;quot;Error&amp;quot;, str(e))\n\n    def add_overlay(self):\n        if not self.image_handler.working_image:\n            messagebox.showinfo(&amp;quot;Info&amp;quot;, &amp;quot;Please load a base image first&amp;quot;)\n            return\n\n        file_path = filedialog.askopenfilename(filetypes=[(&amp;quot;PNG files&amp;quot;, &amp;quot;*.png&amp;quot;)])\n        if file_path:\n            try:\n                overlay_image = Image.open(file_path).convert(&amp;#39;RGBA&amp;#39;)\n                overlay = {\n                    &amp;#39;image&amp;#39;: overlay_image,\n                    &amp;#39;x&amp;#39;: 50,\n                    &amp;#39;y&amp;#39;: 50,\n                    &amp;#39;opacity&amp;#39;: 255,\n                    &amp;#39;scale&amp;#39;: 1.0,\n                    &amp;#39;rotation&amp;#39;: 0\n                }\n                self.overlays.append(overlay)\n                self.selected_overlay = overlay\n                self.save_state()\n                self.update_canvas()\n            except Exception as e:\n                messagebox.showerror(&amp;quot;Error&amp;quot;, f&amp;quot;Failed to add overlay: {str(e)}&amp;quot;)\n\n    def update_canvas(self):\n        if not self.image_handler.working_image:\n            return\n\n        composite = self.image_handler.working_image.copy()\n\n        for overlay in self.overlays:\n            temp = Image.new(&amp;#39;RGBA&amp;#39;, composite.size, (0,0,0,0))\n            overlay_img = self.transform_overlay(overlay)\n\n            temp.paste(\n                overlay_img,\n                (int(overlay[&amp;#39;x&amp;#39;]), int(overlay[&amp;#39;y&amp;#39;])),\n                overlay_img\n            )\n            composite = Image.alpha_composite(composite, temp)\n\n        self.image_handler.photo_image = ImageTk.PhotoImage(composite)\n        self.canvas.delete(&amp;#39;all&amp;#39;)\n        self.canvas.create_image(0, 0, anchor=&amp;#39;nw&amp;#39;, image=self.image_handler.photo_image)\n\n        if self.selected_overlay:\n            self.draw_selection_box()\n\n    def transform_overlay(self, overlay):\n        img = overlay[&amp;#39;image&amp;#39;].copy()\n\n        if overlay[&amp;#39;scale&amp;#39;] != 1.0:\n            new_size = (\n                int(img.width * overlay[&amp;#39;scale&amp;#39;]),\n                int(img.height * overlay[&amp;#39;scale&amp;#39;])\n            )\n            img = img.resize(new_size, Image.Resampling.LANCZOS)\n\n        if overlay[&amp;#39;rotation&amp;#39;]:\n            img = img.rotate(\n                overlay[&amp;#39;rotation&amp;#39;],\n                expand=True,\n                resample=Image.Resampling.BICUBIC\n            )\n\n        if overlay[&amp;#39;opacity&amp;#39;] != 255:\n            img.putalpha(\n                Image.eval(img.getchannel(&amp;#39;A&amp;#39;),\n                        lambda x: x * overlay[&amp;#39;opacity&amp;#39;] // 255)\n            )\n\n        return img\n\n    def draw_selection_box(self):\n        overlay = self.selected_overlay\n        img = self.transform_overlay(overlay)\n\n        self.canvas.create_rectangle(\n            overlay[&amp;#39;x&amp;#39;], overlay[&amp;#39;y&amp;#39;],\n            overlay[&amp;#39;x&amp;#39;] + img.width,\n            overlay[&amp;#39;y&amp;#39;] + img.height,\n            outline=&amp;#39;red&amp;#39;,\n            width=2\n        )\n\n    def on_canvas_click(self, event):\n        clicked = None\n        for overlay in reversed(self.overlays):\n            img = self.transform_overlay(overlay)\n            if (overlay[&amp;#39;x&amp;#39;] &amp;lt;= event.x &amp;lt;= overlay[&amp;#39;x&amp;#39;] + img.width and\n                overlay[&amp;#39;y&amp;#39;] &amp;lt;= event.y &amp;lt;= overlay[&amp;#39;y&amp;#39;] + img.height):\n                clicked = overlay\n                break\n\n        self.selected_overlay = clicked\n        if clicked:\n            self.drag_start = (event.x - clicked[&amp;#39;x&amp;#39;], event.y - clicked[&amp;#39;y&amp;#39;])\n            self.update_property_values(clicked)\n        self.update_canvas()\n\n    def on_drag(self, event):\n        if self.selected_overlay and self.drag_start:\n            new_x = event.x - self.drag_start[0]\n            new_y = event.y - self.drag_start[1]\n\n            # Keep overlay within canvas bounds\n            canvas_width = self.canvas.winfo_width()\n            canvas_height = self.canvas.winfo_height()\n            img = self.transform_overlay(self.selected_overlay)\n\n            new_x = max(0, min(new_x, canvas_width - img.width))\n            new_y = max(0, min(new_y, canvas_height - img.height))\n\n            self.selected_overlay[&amp;#39;x&amp;#39;] = new_x\n            self.selected_overlay[&amp;#39;y&amp;#39;] = new_y\n            self.update_canvas()\n\n    def save_result(self):\n        if not self.image_handler.current_image:\n            messagebox.showinfo(&amp;quot;Info&amp;quot;, &amp;quot;No image to save&amp;quot;)\n            return\n\n        save_path = filedialog.asksaveasfilename(\n            defaultextension=&amp;quot;.png&amp;quot;,\n            filetypes=[(&amp;quot;PNG files&amp;quot;, &amp;quot;*.png&amp;quot;)]\n        )\n\n        if save_path:\n            try:\n                final_image = self.image_handler.current_image.copy()\n                scale_factor = self.image_handler.scale_factor\n\n                for overlay in self.overlays:\n                    temp = Image.new(&amp;#39;RGBA&amp;#39;, final_image.size, (0,0,0,0))\n                    overlay_img = self.transform_overlay(overlay)\n\n                    # Scale positions back to original size\n                    original_x = int(overlay[&amp;#39;x&amp;#39;] / scale_factor)\n                    original_y = int(overlay[&amp;#39;y&amp;#39;] / scale_factor)\n\n                    temp.paste(\n                        overlay_img,\n                        (original_x, original_y),\n                        overlay_img\n                    )\n                    final_image = Image.alpha_composite(final_image, temp)\n\n                final_image.save(save_path)\n                messagebox.showinfo(&amp;quot;Success&amp;quot;, &amp;quot;Image saved successfully!&amp;quot;)\n            except Exception as e:\n                messagebox.showerror(&amp;quot;Error&amp;quot;, f&amp;quot;Failed to save image: {str(e)}&amp;quot;)\n\n    def save_state(self):\n        self.image_handler.history.append(deepcopy(self.overlays))\n        if len(self.image_handler.history) &amp;gt; 10:\n            self.image_handler.history.pop(0)\n\n    def undo(self):\n        if self.image_handler.history:\n            self.overlays = deepcopy(self.image_handler.history.pop())\n            self.selected_overlay = None\n            self.update_canvas()\n\n    def clear_all(self):\n        if self.overlays:\n            self.save_state()\n            self.overlays = []\n            self.selected_overlay = None\n            self.update_canvas()\n\n    def delete_selected(self):\n        if self.selected_overlay in self.overlays:\n            self.save_state()\n            self.overlays.remove(self.selected_overlay)\n            self.selected_overlay = None\n            self.update_canvas()\n\n    def update_property_values(self, overlay):\n        self.opacity_var.set(overlay[&amp;#39;opacity&amp;#39;])\n        self.scale_var.set(overlay[&amp;#39;scale&amp;#39;])\n        self.rotation_var.set(overlay[&amp;#39;rotation&amp;#39;])\n\n    def update_selected_overlay(self):\n        if self.selected_overlay:\n            self.selected_overlay[&amp;#39;opacity&amp;#39;] = self.opacity_var.get()\n            self.selected_overlay[&amp;#39;scale&amp;#39;] = self.scale_var.get()\n            self.selected_overlay[&amp;#39;rotation&amp;#39;] = self.rotation_var.get()\n            self.update_canvas()\n\n    def setup_window_geometry(self):\n        self.root.minsize(self.MIN_WINDOW_WIDTH, self.MIN_WINDOW_HEIGHT)\n        screen_width = self.root.winfo_screenwidth()\n        screen_height = self.root.winfo_screenheight()\n        window_width = min(screen_width - 100, 1200)\n        window_height = min(screen_height - 100, 800)\n        x = (screen_width - window_width) // 2\n        y = (screen_height - window_height) // 2\n        self.root.geometry(f&amp;quot;{window_width}x{window_height}+{x}+{y}&amp;quot;)\n\n    def on_release(self, event):\n        if self.selected_overlay and self.drag_start:\n            self.save_state()\n        self.drag_start = None\n\ndef main():\n    root = tk.Tk()\n    app = ImageOverlayTool(root)\n    root.mainloop()\n\nif __name__ == &amp;quot;__main__&amp;quot;:\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gtafeg",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Zestyclose_Ad_2653",
            "discussion_type": null,
            "num_comments": 2,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gtafeg/im_trying_to_make_an_image_overlay_tool_that/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gtafeg/im_trying_to_make_an_image_overlay_tool_that/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731837761.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# Weekly Thread: What's Everyone Working On This Week? 🛠️\n\nHello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!\n\n## How it Works:\n\n1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.\n2. **Discuss**: Get feedback, find collaborators, or just chat about your project.\n3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.\n\n## Guidelines:\n\n* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.\n* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.\n\n## Example Shares:\n\n1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!\n2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.\n3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!\n\nLet's build and grow together! Share your journey and learn from others. Happy coding! 🌟",
            "author_fullname": "t2_6l4z3",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Sunday Daily Thread: What's everyone working on this week?",
            "link_flair_richtext": [
                {
                    "a": ":pythonLogo:",
                    "e": "emoji",
                    "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                },
                {
                    "e": "text",
                    "t": " Daily Thread"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "daily-thread",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gt0n9f",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.85,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 12,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": ":pythonLogo: Daily Thread",
            "can_mod_post": false,
            "score": 12,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": true,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731801610.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: What&amp;#39;s Everyone Working On This Week? 🛠️&lt;/h1&gt;\n\n&lt;p&gt;Hello &lt;a href=\"/r/Python\"&gt;/r/Python&lt;/a&gt;! It&amp;#39;s time to share what you&amp;#39;ve been working on! Whether it&amp;#39;s a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you&amp;#39;re up to!&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Show &amp;amp; Tell&lt;/strong&gt;: Share your current projects, completed works, or future ideas.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Discuss&lt;/strong&gt;: Get feedback, find collaborators, or just chat about your project.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Inspire&lt;/strong&gt;: Your project might inspire someone else, just as you might get inspired here.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Feel free to include as many details as you&amp;#39;d like. Code snippets, screenshots, and links are all welcome.&lt;/li&gt;\n&lt;li&gt;Whether it&amp;#39;s your job, your hobby, or your passion project, all Python-related work is welcome here.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Shares:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Machine Learning Model&lt;/strong&gt;: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Web Scraping&lt;/strong&gt;: Built a script to scrape and analyze news articles. It&amp;#39;s helped me understand media bias better.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Automation&lt;/strong&gt;: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Let&amp;#39;s build and grow together! Share your journey and learn from others. Happy coding! 🌟&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": "moderator",
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#00a6a5",
            "id": "1gt0n9f",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "AutoModerator",
            "discussion_type": null,
            "num_comments": 3,
            "send_replies": false,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gt0n9f/sunday_daily_thread_whats_everyone_working_on/",
            "stickied": true,
            "url": "https://www.reddit.com/r/Python/comments/1gt0n9f/sunday_daily_thread_whats_everyone_working_on/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731801610.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hey all!\n\nMy friend challenged me to find the shortest solution to a certain Leetcode-style problem in Python. They were generous enough to let me use whitespace for free, so that the code stays readable.\n\n# What My Project Does\n\nI like abusing rules, so I made a tool to encode any Python script in just 30 bytes, plus some whitespace.\n\nThis result is somewhat harder to achieve than it looks like at first, so you might want to check out [a post I wrote about it](https://purplesyringa.moe/blog/any-python-program-fits-in-24-characters/). Alternatively, jump straight to the code if that's more of your thing: [GitHub](https://github.com/purplesyringa/24-characters-of-python).\n\n*UPD*: Someone found a way to do this in 24 bytes, post updated!\n\n# Target Audience\n\nThis is a toy project, nothing serious, but it was fun for me to work on. I hope you find it entertaining too!\n\n# Comparison\n\nThis is honestly the first time I've seen anyone do this with a specific goal of reducing the number of non-whitespace characters at any cost, so this might as well be a unique project.\n\nAs a honorary mention, though, it builds on another project I think deserves recognition: [PyFuck](https://github.com/kuangkzh/PyFuck). It's JSFuck for Python, using 8 different characters to encode any (short enough) Python program.",
            "author_fullname": "t2_i0kknhl",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Write any Python script in 30 characters (plus an ungodly amount of whitespace)",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gsyls8",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.8,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 49,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 49,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1731861418.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731795664.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey all!&lt;/p&gt;\n\n&lt;p&gt;My friend challenged me to find the shortest solution to a certain Leetcode-style problem in Python. They were generous enough to let me use whitespace for free, so that the code stays readable.&lt;/p&gt;\n\n&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;I like abusing rules, so I made a tool to encode any Python script in just 30 bytes, plus some whitespace.&lt;/p&gt;\n\n&lt;p&gt;This result is somewhat harder to achieve than it looks like at first, so you might want to check out &lt;a href=\"https://purplesyringa.moe/blog/any-python-program-fits-in-24-characters/\"&gt;a post I wrote about it&lt;/a&gt;. Alternatively, jump straight to the code if that&amp;#39;s more of your thing: &lt;a href=\"https://github.com/purplesyringa/24-characters-of-python\"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;UPD&lt;/em&gt;: Someone found a way to do this in 24 bytes, post updated!&lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;This is a toy project, nothing serious, but it was fun for me to work on. I hope you find it entertaining too!&lt;/p&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;This is honestly the first time I&amp;#39;ve seen anyone do this with a specific goal of reducing the number of non-whitespace characters at any cost, so this might as well be a unique project.&lt;/p&gt;\n\n&lt;p&gt;As a honorary mention, though, it builds on another project I think deserves recognition: &lt;a href=\"https://github.com/kuangkzh/PyFuck\"&gt;PyFuck&lt;/a&gt;. It&amp;#39;s JSFuck for Python, using 8 different characters to encode any (short enough) Python program.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/vjt53QbG3vOdNMc3qrdDPaMX05lPAp7P5Agfa6hfMIc.jpg?auto=webp&amp;s=793ff840c759acf0b3ee8c918f329995217044fc",
                            "width": 1200,
                            "height": 630
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/vjt53QbG3vOdNMc3qrdDPaMX05lPAp7P5Agfa6hfMIc.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=342df53f0e5f4c4c94d3806f593b134987e6c380",
                                "width": 108,
                                "height": 56
                            },
                            {
                                "url": "https://external-preview.redd.it/vjt53QbG3vOdNMc3qrdDPaMX05lPAp7P5Agfa6hfMIc.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=458fe33de7576c64931f5a2e066c027491e98e34",
                                "width": 216,
                                "height": 113
                            },
                            {
                                "url": "https://external-preview.redd.it/vjt53QbG3vOdNMc3qrdDPaMX05lPAp7P5Agfa6hfMIc.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=734210a9a9825b034fce34f2d72717db7794b86d",
                                "width": 320,
                                "height": 168
                            },
                            {
                                "url": "https://external-preview.redd.it/vjt53QbG3vOdNMc3qrdDPaMX05lPAp7P5Agfa6hfMIc.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=a4266be7adba5880addacbe1cb9f6b23b9d6fdf8",
                                "width": 640,
                                "height": 336
                            },
                            {
                                "url": "https://external-preview.redd.it/vjt53QbG3vOdNMc3qrdDPaMX05lPAp7P5Agfa6hfMIc.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=1709e9b2bacfa39b36e1901940d7811d49b73387",
                                "width": 960,
                                "height": 504
                            },
                            {
                                "url": "https://external-preview.redd.it/vjt53QbG3vOdNMc3qrdDPaMX05lPAp7P5Agfa6hfMIc.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=cc69ed08d0c239de9ae980f1403e16fd1cddae3b",
                                "width": 1080,
                                "height": 567
                            }
                        ],
                        "variants": {},
                        "id": "tqjGFp4KfbQnEAQOOm6yVYWu_Tbz0q_R-KjbYVQHdgA"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gsyls8",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "imachug",
            "discussion_type": null,
            "num_comments": 12,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gsyls8/write_any_python_script_in_30_characters_plus_an/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gsyls8/write_any_python_script_in_30_characters_plus_an/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731795664.0,
            "num_crossposts": 1,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I just published an article outlining what I think good tests in Python are often missing. It's not intended to flesh out on any of the topics, and is frugal on the details where I think they are better explained other place. Rather it's intended to inspire your style guides and convention documents. These are an assembly of issues that's been up for discussion in various places I've worked, and my opinionated take on them.\n\nSo please, write *good* tests.\n\n  \n[https://www.agest.am/write-good-python-tests](https://www.agest.am/write-good-python-tests)",
            "author_fullname": "t2_35ql7x54",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Write good tests",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gspitz",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.94,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 34,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 34,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731770591.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I just published an article outlining what I think good tests in Python are often missing. It&amp;#39;s not intended to flesh out on any of the topics, and is frugal on the details where I think they are better explained other place. Rather it&amp;#39;s intended to inspire your style guides and convention documents. These are an assembly of issues that&amp;#39;s been up for discussion in various places I&amp;#39;ve worked, and my opinionated take on them.&lt;/p&gt;\n\n&lt;p&gt;So please, write &lt;em&gt;good&lt;/em&gt; tests.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.agest.am/write-good-python-tests\"&gt;https://www.agest.am/write-good-python-tests&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gspitz",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "antonagestam",
            "discussion_type": null,
            "num_comments": 8,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gspitz/write_good_tests/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gspitz/write_good_tests/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731770591.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Looking to better standardize and manage my projects along with cruft: [https://github.com/cruft/cruft](https://github.com/cruft/cruft)\n\n[https://github.com/cookiecutter/cookiecutter](https://github.com/cookiecutter/cookiecutter)",
            "author_fullname": "t2_4gn2d1wk",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "What cookiecutter templates do you use?",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gsohk7",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.74,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 11,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 11,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731767555.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Looking to better standardize and manage my projects along with cruft: &lt;a href=\"https://github.com/cruft/cruft\"&gt;https://github.com/cruft/cruft&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/cookiecutter/cookiecutter\"&gt;https://github.com/cookiecutter/cookiecutter&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/jbYrBfkUJfBvPuVgU-THClP1UrOaFWh_TmESfwiz8Jw.jpg?auto=webp&amp;s=65d2ffbed020a1af86ce0ba9d6a7aadbc2049b38",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/jbYrBfkUJfBvPuVgU-THClP1UrOaFWh_TmESfwiz8Jw.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=fd1f0846b15dc90085844f55dee3b712fab11872",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/jbYrBfkUJfBvPuVgU-THClP1UrOaFWh_TmESfwiz8Jw.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=b1dc0fb11fcd1e48246a7d35f9f450020ac47464",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/jbYrBfkUJfBvPuVgU-THClP1UrOaFWh_TmESfwiz8Jw.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=6b40335775693aaa04b8c3cd3387bc23092d9c9f",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/jbYrBfkUJfBvPuVgU-THClP1UrOaFWh_TmESfwiz8Jw.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=5a931201c96f2f399d04fa7771dea3050cee8053",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/jbYrBfkUJfBvPuVgU-THClP1UrOaFWh_TmESfwiz8Jw.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=c59b0f787ab198659a5ce6b8558e9337fec785e5",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/jbYrBfkUJfBvPuVgU-THClP1UrOaFWh_TmESfwiz8Jw.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=e416d44dd7f40a5bc1495acb0a37d35693da39b9",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "hpxbrAoOInNcduhznyrPXcDYBXtYyQaF52xszXt9t1g"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gsohk7",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Norman_Door",
            "discussion_type": null,
            "num_comments": 7,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gsohk7/what_cookiecutter_templates_do_you_use/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gsohk7/what_cookiecutter_templates_do_you_use/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731767555.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "**Motivation :** Last week, I posted about my project, Netfly: The Netflix Translator, here on r/python. I initially built it to solve a problem I ran into while traveling. Let me explain :\n\nOn a flight from New Delhi to Tokyo, I started watching an anime movie, *The Concierge*. The in-flight entertainment had English subtitles, and I was hooked, but I couldn’t finish it. Later, I found the movie on Netflix Japan, but it was only available with Japanese subtitles.\n\nHere’s the problem: I don’t know enough Japanese (Nihongo wa sukoshi desu) to follow along, so I decided to build something that could fetch those Japanese subtitles, translate them into English, and overlay the translation on the video while retaining the Japanese subtitles which would give me better context.\n\nWhat started as a personal project quickly became an obsession.\n\n**What does the Project Do ? :** The primary goal of this project is simple: convert Japanese subtitles on Netflix into English subtitles in an automated way. This is particularly useful when English subtitles aren’t available for a title.\n\n**The Evolution of this Project / High Level Tech Solution :** This is not the first iteration of Netfly. It has gone through two major updates based on feedback and my own learning.\n\n*Iteration 1: A Tech-Heavy but Costly Solution*\n\nHow It Worked:\n\nThe Result: It worked, but it was far from practical. The cost of using Google Vision API for every frame made it unsustainable, and the whole process was painfully slow.\n\n*Iteration 2: Streamlining with Subtitles file*\n\n* I discovered Netflix subtitles can be downloaded (through some effort). \n* Parsed the downloaded XML subtitle file using lxml to extract the Japanese text, start time, and end time via XPath. \n* Sent the extracted text to AWS Translate for English translation. \n\nThe Result: This was much better—cheaper, faster, and simpler. But there was still a manual step : downloading the subtitle file.\n\n*Iteration 3: Fully Automated Workflow*\n\n* Integrated a Playwright script that logs into Netflix, navigates to the selected video, and downloads the subtitle XML file automatically.\n* Added a CLI using Python’s Click library to simplify running the workflow.\n* Once the XML file is fetched, the script extracts Japanese text and timestamps, sends the text to AWS Translate, and generates English subtitles in a JSON format.\n\nThe Result: All Steps are completely automated now.\n\n**Target Audience** : This project started as a personal tool, but it can be useful for:\n\n* Language Enthusiasts**:** Anyone who wants to watch Netflix content in languages they don’t understand.\n* Developers**:**  If you’re exploring libraries like playwright, lxml, click , or translation workflows, this project can be a solid learning resource.\n\n**Comparison with Other Similar Tools :** Existing tools, like Chrome extensions, rely on pre-existing subtitles in the target language. For example, they can overlay English subtitles, but only if those subtitles are already available. Netfly is different because\n\n* It handles cases where English subtitles don’t exist.\n* Automates the entire process, from fetching Japanese subtitles to translating them into English.\n* Provides an end-to-end workflow with minimal manual effort.\n\nTo the best of my knowledge, no other tool automates this entire flow.\n\n**Working Demo / Screenshots :**  \n[https://imgur.com/a/vWxPCua](https://imgur.com/a/vWxPCua)  \n[https://imgur.com/a/zsVkxhT](https://imgur.com/a/zsVkxhT)\n\n[https://imgur.com/a/bWHRK5H](https://imgur.com/a/bWHRK5H)  \n[https://imgur.com/a/pJ6Pnoc](https://imgur.com/a/pJ6Pnoc)\n\n**What's next :** This is still a work in progress, but I feel it’s in a solid state now. Here’s what’s on my mind for the next steps: \n\n1. **Edge Cases:** Testing on a broader range of Netflix titles to handle variations in subtitle formats.\n2. **Performance:** Optimizing XML parsing and translation for faster processing.\n3. **Extensibility:** Adding support for other subtitle languages.\n4. **Error Handling :** Since i iterated very fast, I know the Error Handling is not upto the mark.\n\n  \nIf this sounds interesting for you, the code is up on GitHub: [https://github.com/Anubhav9/Netfly-subtitle-converter-xml-approach](https://github.com/Anubhav9/Netfly-subtitle-converter-xml-approach)\n\nI’d love to hear your thoughts , feedback and suggestions on this.  \nCheers, and Thank you !\n\n",
            "author_fullname": "t2_md8lakdu",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Finally Completed : A Personal Project built over the weekend(s) - Netflix Subtitle Translator",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gsm1kp",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.87,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 58,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 58,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731759303.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Motivation :&lt;/strong&gt; Last week, I posted about my project, Netfly: The Netflix Translator, here on &lt;a href=\"/r/python\"&gt;r/python&lt;/a&gt;. I initially built it to solve a problem I ran into while traveling. Let me explain :&lt;/p&gt;\n\n&lt;p&gt;On a flight from New Delhi to Tokyo, I started watching an anime movie, &lt;em&gt;The Concierge&lt;/em&gt;. The in-flight entertainment had English subtitles, and I was hooked, but I couldn’t finish it. Later, I found the movie on Netflix Japan, but it was only available with Japanese subtitles.&lt;/p&gt;\n\n&lt;p&gt;Here’s the problem: I don’t know enough Japanese (Nihongo wa sukoshi desu) to follow along, so I decided to build something that could fetch those Japanese subtitles, translate them into English, and overlay the translation on the video while retaining the Japanese subtitles which would give me better context.&lt;/p&gt;\n\n&lt;p&gt;What started as a personal project quickly became an obsession.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What does the Project Do ? :&lt;/strong&gt; The primary goal of this project is simple: convert Japanese subtitles on Netflix into English subtitles in an automated way. This is particularly useful when English subtitles aren’t available for a title.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;The Evolution of this Project / High Level Tech Solution :&lt;/strong&gt; This is not the first iteration of Netfly. It has gone through two major updates based on feedback and my own learning.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Iteration 1: A Tech-Heavy but Costly Solution&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;How It Worked:&lt;/p&gt;\n\n&lt;p&gt;The Result: It worked, but it was far from practical. The cost of using Google Vision API for every frame made it unsustainable, and the whole process was painfully slow.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Iteration 2: Streamlining with Subtitles file&lt;/em&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;I discovered Netflix subtitles can be downloaded (through some effort). &lt;/li&gt;\n&lt;li&gt;Parsed the downloaded XML subtitle file using lxml to extract the Japanese text, start time, and end time via XPath. &lt;/li&gt;\n&lt;li&gt;Sent the extracted text to AWS Translate for English translation. &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The Result: This was much better—cheaper, faster, and simpler. But there was still a manual step : downloading the subtitle file.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Iteration 3: Fully Automated Workflow&lt;/em&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Integrated a Playwright script that logs into Netflix, navigates to the selected video, and downloads the subtitle XML file automatically.&lt;/li&gt;\n&lt;li&gt;Added a CLI using Python’s Click library to simplify running the workflow.&lt;/li&gt;\n&lt;li&gt;Once the XML file is fetched, the script extracts Japanese text and timestamps, sends the text to AWS Translate, and generates English subtitles in a JSON format.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The Result: All Steps are completely automated now.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt; : This project started as a personal tool, but it can be useful for:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Language Enthusiasts&lt;strong&gt;:&lt;/strong&gt; Anyone who wants to watch Netflix content in languages they don’t understand.&lt;/li&gt;\n&lt;li&gt;Developers&lt;strong&gt;:&lt;/strong&gt;  If you’re exploring libraries like playwright, lxml, click , or translation workflows, this project can be a solid learning resource.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison with Other Similar Tools :&lt;/strong&gt; Existing tools, like Chrome extensions, rely on pre-existing subtitles in the target language. For example, they can overlay English subtitles, but only if those subtitles are already available. Netfly is different because&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;It handles cases where English subtitles don’t exist.&lt;/li&gt;\n&lt;li&gt;Automates the entire process, from fetching Japanese subtitles to translating them into English.&lt;/li&gt;\n&lt;li&gt;Provides an end-to-end workflow with minimal manual effort.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;To the best of my knowledge, no other tool automates this entire flow.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Working Demo / Screenshots :&lt;/strong&gt;&lt;br/&gt;\n&lt;a href=\"https://imgur.com/a/vWxPCua\"&gt;https://imgur.com/a/vWxPCua&lt;/a&gt;&lt;br/&gt;\n&lt;a href=\"https://imgur.com/a/zsVkxhT\"&gt;https://imgur.com/a/zsVkxhT&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://imgur.com/a/bWHRK5H\"&gt;https://imgur.com/a/bWHRK5H&lt;/a&gt;&lt;br/&gt;\n&lt;a href=\"https://imgur.com/a/pJ6Pnoc\"&gt;https://imgur.com/a/pJ6Pnoc&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What&amp;#39;s next :&lt;/strong&gt; This is still a work in progress, but I feel it’s in a solid state now. Here’s what’s on my mind for the next steps: &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Edge Cases:&lt;/strong&gt; Testing on a broader range of Netflix titles to handle variations in subtitle formats.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Performance:&lt;/strong&gt; Optimizing XML parsing and translation for faster processing.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Extensibility:&lt;/strong&gt; Adding support for other subtitle languages.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Error Handling :&lt;/strong&gt; Since i iterated very fast, I know the Error Handling is not upto the mark.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;If this sounds interesting for you, the code is up on GitHub: &lt;a href=\"https://github.com/Anubhav9/Netfly-subtitle-converter-xml-approach\"&gt;https://github.com/Anubhav9/Netfly-subtitle-converter-xml-approach&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I’d love to hear your thoughts , feedback and suggestions on this.&lt;br/&gt;\nCheers, and Thank you !&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/0F9VxxNf_cSP3t85BoYT4QYV44sUBSKlWJoa6ZEWN9A.jpg?auto=webp&amp;s=870ee7ce4d90b9d9272ade03fa15cc5b10316e0f",
                            "width": 2940,
                            "height": 1912
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/0F9VxxNf_cSP3t85BoYT4QYV44sUBSKlWJoa6ZEWN9A.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=90299f542412cbf168de5616c8185c8b86f54840",
                                "width": 108,
                                "height": 70
                            },
                            {
                                "url": "https://external-preview.redd.it/0F9VxxNf_cSP3t85BoYT4QYV44sUBSKlWJoa6ZEWN9A.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=08d7d15485f0e8437cb6daa6b2d4ca9c04f7a659",
                                "width": 216,
                                "height": 140
                            },
                            {
                                "url": "https://external-preview.redd.it/0F9VxxNf_cSP3t85BoYT4QYV44sUBSKlWJoa6ZEWN9A.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=c9d2d0f8232ce8bef71bbb038d4f84f1ff82310a",
                                "width": 320,
                                "height": 208
                            },
                            {
                                "url": "https://external-preview.redd.it/0F9VxxNf_cSP3t85BoYT4QYV44sUBSKlWJoa6ZEWN9A.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=ae041496a98766cb3c25eee6b8d83a6bb89d2f01",
                                "width": 640,
                                "height": 416
                            },
                            {
                                "url": "https://external-preview.redd.it/0F9VxxNf_cSP3t85BoYT4QYV44sUBSKlWJoa6ZEWN9A.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=6c910f0724fe2a4a06e2c5f06df3456784559759",
                                "width": 960,
                                "height": 624
                            },
                            {
                                "url": "https://external-preview.redd.it/0F9VxxNf_cSP3t85BoYT4QYV44sUBSKlWJoa6ZEWN9A.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=240b4ab8c2aa462becb8c962f065ef9ba425e378",
                                "width": 1080,
                                "height": 702
                            }
                        ],
                        "variants": {},
                        "id": "PloIVKAeVon40gNQML50Acy8F4ogja-LO5ENjHktxbU"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gsm1kp",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Content_Ad_4153",
            "discussion_type": null,
            "num_comments": 8,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gsm1kp/finally_completed_a_personal_project_built_over/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gsm1kp/finally_completed_a_personal_project_built_over/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731759303.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hi potential bots,\n\nI'm a Backend developer who works with Python and Flask. Also recently started using the IIS thingy to host our restful API backend on an in-premises Windows server. Demn! Nice intro I got.\n\nSo the issue** I want/need to host a power automate Application/desktop whatever that box code like software in blue is called. On a Windows server using IIS. And it should be running all the time. But VM might be locked after some time.\n\nI also have a solution there that uses a watchdog to do some stuff after PA's processing is done (Excel creation automation task). \n\nSo sharks my ask would be, how the fruit I do the set-up of a power automate Application when I never worked on it? Please share detailed steps or else I might bite you. \n\nRegards,\nYour BF\n\nP.S.: I don't know a thing. Pls just 🍻 with me. Nor did I search for this on Bing 😏.\n+ I also posted the same in the MS\n community but I believe more in peeps here.\n\nTldr; how to host a power automate desktop Application on a Windows server and keep it running forever.",
            "author_fullname": "t2_vvxnqkgk",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Power Automate Application Hosted on the Windows server with IIS. Python watchdog too.",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gsj8he",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.35,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1731751562.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731746812.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi potential bots,&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m a Backend developer who works with Python and Flask. Also recently started using the IIS thingy to host our restful API backend on an in-premises Windows server. Demn! Nice intro I got.&lt;/p&gt;\n\n&lt;p&gt;So the issue** I want/need to host a power automate Application/desktop whatever that box code like software in blue is called. On a Windows server using IIS. And it should be running all the time. But VM might be locked after some time.&lt;/p&gt;\n\n&lt;p&gt;I also have a solution there that uses a watchdog to do some stuff after PA&amp;#39;s processing is done (Excel creation automation task). &lt;/p&gt;\n\n&lt;p&gt;So sharks my ask would be, how the fruit I do the set-up of a power automate Application when I never worked on it? Please share detailed steps or else I might bite you. &lt;/p&gt;\n\n&lt;p&gt;Regards,\nYour BF&lt;/p&gt;\n\n&lt;p&gt;P.S.: I don&amp;#39;t know a thing. Pls just 🍻 with me. Nor did I search for this on Bing 😏.\n+ I also posted the same in the MS\n community but I believe more in peeps here.&lt;/p&gt;\n\n&lt;p&gt;Tldr; how to host a power automate desktop Application on a Windows server and keep it running forever.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gsj8he",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "BackendFixer",
            "discussion_type": null,
            "num_comments": 4,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gsj8he/power_automate_application_hosted_on_the_windows/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gsj8he/power_automate_application_hosted_on_the_windows/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731746812.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# Weekly Thread: Resource Request and Sharing 📚\n\nStumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!\n\n## How it Works:\n\n1. **Request**: Can't find a resource on a particular topic? Ask here!\n2. **Share**: Found something useful? Share it with the community.\n3. **Review**: Give or get opinions on Python resources you've used.\n\n## Guidelines:\n\n* Please include the type of resource (e.g., book, video, article) and the topic.\n* Always be respectful when reviewing someone else's shared resource.\n\n## Example Shares:\n\n1. **Book**: [\"Fluent Python\"](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \\- Great for understanding Pythonic idioms.\n2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \\- Excellent overview of Python's built-in data structures.\n3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \\- A deep dive into decorators.\n\n## Example Requests:\n\n1. **Looking for**: Video tutorials on web scraping with Python.\n2. **Need**: Book recommendations for Python machine learning.\n\nShare the knowledge, enrich the community. Happy learning! 🌟",
            "author_fullname": "t2_6l4z3",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread",
            "link_flair_richtext": [
                {
                    "a": ":pythonLogo:",
                    "e": "emoji",
                    "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                },
                {
                    "e": "text",
                    "t": " Daily Thread"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "daily-thread",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gsaiu7",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.73,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 5,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": ":pythonLogo: Daily Thread",
            "can_mod_post": false,
            "score": 5,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": true,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731715220.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: Resource Request and Sharing 📚&lt;/h1&gt;\n\n&lt;p&gt;Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Request&lt;/strong&gt;: Can&amp;#39;t find a resource on a particular topic? Ask here!&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Share&lt;/strong&gt;: Found something useful? Share it with the community.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Review&lt;/strong&gt;: Give or get opinions on Python resources you&amp;#39;ve used.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Please include the type of resource (e.g., book, video, article) and the topic.&lt;/li&gt;\n&lt;li&gt;Always be respectful when reviewing someone else&amp;#39;s shared resource.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Shares:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Book&lt;/strong&gt;: &lt;a href=\"https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008\"&gt;&amp;quot;Fluent Python&amp;quot;&lt;/a&gt; - Great for understanding Pythonic idioms.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Video&lt;/strong&gt;: &lt;a href=\"https://www.youtube.com/watch?v=pkYVOmU3MgA\"&gt;Python Data Structures&lt;/a&gt; - Excellent overview of Python&amp;#39;s built-in data structures.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Article&lt;/strong&gt;: &lt;a href=\"https://realpython.com/primer-on-python-decorators/\"&gt;Understanding Python Decorators&lt;/a&gt; - A deep dive into decorators.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Example Requests:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Looking for&lt;/strong&gt;: Video tutorials on web scraping with Python.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Need&lt;/strong&gt;: Book recommendations for Python machine learning.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Share the knowledge, enrich the community. Happy learning! 🌟&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#00a6a5",
            "id": "1gsaiu7",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "AutoModerator",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": false,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gsaiu7/saturday_daily_thread_resource_request_and/",
            "stickied": true,
            "url": "https://www.reddit.com/r/Python/comments/1gsaiu7/saturday_daily_thread_resource_request_and/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731715220.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "  \n[https://987.reflex.dev/](https://987.reflex.dev/)  \n\n\n**What My Project Does**\n\nFrom Adhami the author: I was wondering how 2048 would feel like if instead of powers of two, we can merge consequent fibonacci numbers. Turns out to be a rather interesting game that is fairly forgiving and grows very slowly. I found it difficult to come up with an overall strategy. I had a simple search algorithm that was able to achieve a score of exactly 66,666 (not joking). Getting a 987 block shouldn't be difficult.\n\n  \nYou can take a look into the code here: [https://github.com/adhami3310/987](https://github.com/adhami3310/987) (the simple search algorithm is inside the code as well)  \n  \n**Target Audience**: Anyone\n\n**Comparison**: Similar to 2048 but fib\n\n",
            "author_fullname": "t2_9fy13r0x",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Game 987, Like 2048 but Fibonacci (Made in Python)",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gs56f7",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.93,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 46,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 46,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731700659.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://987.reflex.dev/\"&gt;https://987.reflex.dev/&lt;/a&gt;  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;From Adhami the author: I was wondering how 2048 would feel like if instead of powers of two, we can merge consequent fibonacci numbers. Turns out to be a rather interesting game that is fairly forgiving and grows very slowly. I found it difficult to come up with an overall strategy. I had a simple search algorithm that was able to achieve a score of exactly 66,666 (not joking). Getting a 987 block shouldn&amp;#39;t be difficult.&lt;/p&gt;\n\n&lt;p&gt;You can take a look into the code here: &lt;a href=\"https://github.com/adhami3310/987\"&gt;https://github.com/adhami3310/987&lt;/a&gt; (the simple search algorithm is inside the code as well)  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;: Anyone&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;: Similar to 2048 but fib&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gs56f7",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "FullHunter9735",
            "discussion_type": null,
            "num_comments": 2,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gs56f7/game_987_like_2048_but_fibonacci_made_in_python/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gs56f7/game_987_like_2048_but_fibonacci_made_in_python/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731700659.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Blog post: [https://blog.pypi.org/posts/2024-11-14-pypi-now-supports-digital-attestations/](https://blog.pypi.org/posts/2024-11-14-pypi-now-supports-digital-attestations/)\n\nI'm angry that it got partially funded by the sovreign tech fund, when it's about \"securing\" uploads by giving the keys to huge USA companies. I think it's criminal they got public money for this.\n\n  \nI also don't think it adds any security whatsoever. It just moves the authentication from using credentials to PyPI to using credentials to github. They can be stolen in the exact same way.\n\nedit: It got \"GERMAN\" public money.",
            "author_fullname": "t2_pkc8p2tsb",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "PyPI now has attestation. Thanks I hate it.",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gs05hm",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.74,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 119,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 119,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1731700349.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731687862.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Blog post: &lt;a href=\"https://blog.pypi.org/posts/2024-11-14-pypi-now-supports-digital-attestations/\"&gt;https://blog.pypi.org/posts/2024-11-14-pypi-now-supports-digital-attestations/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m angry that it got partially funded by the sovreign tech fund, when it&amp;#39;s about &amp;quot;securing&amp;quot; uploads by giving the keys to huge USA companies. I think it&amp;#39;s criminal they got public money for this.&lt;/p&gt;\n\n&lt;p&gt;I also don&amp;#39;t think it adds any security whatsoever. It just moves the authentication from using credentials to PyPI to using credentials to github. They can be stolen in the exact same way.&lt;/p&gt;\n\n&lt;p&gt;edit: It got &amp;quot;GERMAN&amp;quot; public money.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/fqOvn_U__tgyQBhsLvuCg1G5M0ia0B0QoldiBi680UQ.jpg?auto=webp&amp;s=c5b9b613001be462a84d3bd5480c3039594ba9a5",
                            "width": 1200,
                            "height": 630
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/fqOvn_U__tgyQBhsLvuCg1G5M0ia0B0QoldiBi680UQ.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=8d63d6afb2d78725870302e5920ed63be8d47175",
                                "width": 108,
                                "height": 56
                            },
                            {
                                "url": "https://external-preview.redd.it/fqOvn_U__tgyQBhsLvuCg1G5M0ia0B0QoldiBi680UQ.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=bb8da2b2f75f0305d82e8e19bb0e302f7f6c62a2",
                                "width": 216,
                                "height": 113
                            },
                            {
                                "url": "https://external-preview.redd.it/fqOvn_U__tgyQBhsLvuCg1G5M0ia0B0QoldiBi680UQ.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=082e7d78696b50874097a1d2077718919a6f11c7",
                                "width": 320,
                                "height": 168
                            },
                            {
                                "url": "https://external-preview.redd.it/fqOvn_U__tgyQBhsLvuCg1G5M0ia0B0QoldiBi680UQ.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=689c94155ad6a1767196f8f341208800f5b54d92",
                                "width": 640,
                                "height": 336
                            },
                            {
                                "url": "https://external-preview.redd.it/fqOvn_U__tgyQBhsLvuCg1G5M0ia0B0QoldiBi680UQ.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=7d870ecf9e97f9a9f45233c1f06035cd4365f597",
                                "width": 960,
                                "height": 504
                            },
                            {
                                "url": "https://external-preview.redd.it/fqOvn_U__tgyQBhsLvuCg1G5M0ia0B0QoldiBi680UQ.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=988ad1e58b068193a6795e4a2810875b0119ec39",
                                "width": 1080,
                                "height": 567
                            }
                        ],
                        "variants": {},
                        "id": "fgRtFWU0hU-EVab_2NpUpx6b7XEje7DlCJgmPLQ7jl4"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gs05hm",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "sonobanana33",
            "discussion_type": null,
            "num_comments": 127,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gs05hm/pypi_now_has_attestation_thanks_i_hate_it/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gs05hm/pypi_now_has_attestation_thanks_i_hate_it/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731687862.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I would like some user feedback  \n**Github Link:** [https://github.com/DevER-M/yami](https://github.com/DevER-M/yami)  \n**Pypi Link:** [https://pypi.org/project/yami-music-player/](https://pypi.org/project/yami-music-player/)  \n**Some of the features**\n\n* ***mp3 , flac, and many audio formats supported for playback***\n* ***Clean UI***\n* ***Can download music with art cover***\n* ***it is also asynchronous***\n\n**Libraries used**\n\n* customtkinter\n* spotdl\n* mutagen\n\n**Target audience**  \nThis project will be useful for people who do not want ads and want a simple user interface to play music\n\n**Comparison**  \nThere are currently no projects that have all the features covered and is made with tkinterTo use this install all requirements in the .txt file and you are good to go\n\n**RoadMap**  \nI will update it now and then\n\nA follow would be nice! [https://github.com/DevER-M](https://github.com/DevER-M)",
            "author_fullname": "t2_e3ba4dgw",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Yami - A music player made with Tkinter Now on pypi!",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1grzxre",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.8,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 8,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 8,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731687307.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I would like some user feedback&lt;br/&gt;\n&lt;strong&gt;Github Link:&lt;/strong&gt; &lt;a href=\"https://github.com/DevER-M/yami\"&gt;https://github.com/DevER-M/yami&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Pypi Link:&lt;/strong&gt; &lt;a href=\"https://pypi.org/project/yami-music-player/\"&gt;https://pypi.org/project/yami-music-player/&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Some of the features&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;&lt;em&gt;mp3 , flac, and many audio formats supported for playback&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;em&gt;Clean UI&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;em&gt;Can download music with art cover&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;em&gt;it is also asynchronous&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Libraries used&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;customtkinter&lt;/li&gt;\n&lt;li&gt;spotdl&lt;/li&gt;\n&lt;li&gt;mutagen&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Target audience&lt;/strong&gt;&lt;br/&gt;\nThis project will be useful for people who do not want ads and want a simple user interface to play music&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;br/&gt;\nThere are currently no projects that have all the features covered and is made with tkinterTo use this install all requirements in the .txt file and you are good to go&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;RoadMap&lt;/strong&gt;&lt;br/&gt;\nI will update it now and then&lt;/p&gt;\n\n&lt;p&gt;A follow would be nice! &lt;a href=\"https://github.com/DevER-M\"&gt;https://github.com/DevER-M&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/yzDZ_2y6cAmqOoEluSlNAKcVwN-35TSJWx2YpxaTJXw.jpg?auto=webp&amp;s=adc50516f0ace9520e1c37b630094cf2d3d897f0",
                            "width": 3500,
                            "height": 1440
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/yzDZ_2y6cAmqOoEluSlNAKcVwN-35TSJWx2YpxaTJXw.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=81331c285e718dadc90dcfb0439d286211790413",
                                "width": 108,
                                "height": 44
                            },
                            {
                                "url": "https://external-preview.redd.it/yzDZ_2y6cAmqOoEluSlNAKcVwN-35TSJWx2YpxaTJXw.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=cd5633f4f4fefb5f8c59e3545543aecf1710ba8f",
                                "width": 216,
                                "height": 88
                            },
                            {
                                "url": "https://external-preview.redd.it/yzDZ_2y6cAmqOoEluSlNAKcVwN-35TSJWx2YpxaTJXw.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=dcf1983d56cb030215c3f916373253ff6200f8cc",
                                "width": 320,
                                "height": 131
                            },
                            {
                                "url": "https://external-preview.redd.it/yzDZ_2y6cAmqOoEluSlNAKcVwN-35TSJWx2YpxaTJXw.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=f4552e4d1f362bfbed84a846fe818bd1e32f506a",
                                "width": 640,
                                "height": 263
                            },
                            {
                                "url": "https://external-preview.redd.it/yzDZ_2y6cAmqOoEluSlNAKcVwN-35TSJWx2YpxaTJXw.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=44beae402e3e530d94967db8232d253b95d8f962",
                                "width": 960,
                                "height": 394
                            },
                            {
                                "url": "https://external-preview.redd.it/yzDZ_2y6cAmqOoEluSlNAKcVwN-35TSJWx2YpxaTJXw.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=6dd265102175bcdf81adc09f1134c09df799d12f",
                                "width": 1080,
                                "height": 444
                            }
                        ],
                        "variants": {},
                        "id": "cTDUnH6K-7MlDXyia5wUZZQLD7x3bOGDpSGi1Mo2XI4"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1grzxre",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "FishStickSocks",
            "discussion_type": null,
            "num_comments": 4,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1grzxre/yami_a_music_player_made_with_tkinter_now_on_pypi/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1grzxre/yami_a_music_player_made_with_tkinter_now_on_pypi/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731687307.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "so i wanted to do a face\\_recogntion attendence system but the heck , always error with this or dlib , for once it was not installing , and now it is installed it aint working proplerly , i tripled checked the code its the issue of this , , on linux it runs shockingly well , but nfortunately i have to use windows",
            "author_fullname": "t2_x4qolh8vi",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "What is wrong with face_recognition",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gryiw1",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.23,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731683603.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;so i wanted to do a face_recogntion attendence system but the heck , always error with this or dlib , for once it was not installing , and now it is installed it aint working proplerly , i tripled checked the code its the issue of this , , on linux it runs shockingly well , but nfortunately i have to use windows&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gryiw1",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Confident_Award9137",
            "discussion_type": null,
            "num_comments": 3,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gryiw1/what_is_wrong_with_face_recognition/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gryiw1/what_is_wrong_with_face_recognition/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731683603.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I compiled a list of puzzles to improve Python. I hope this blog post serves as a humble guide for anyone interested in improving their Python by solving puzzles.",
            "author_fullname": "t2_5howy4go",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "http://awakenerd.com/2024/11/15/puzzles-to-improve-python/",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gryf3z",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.31,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731683307.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I compiled a list of puzzles to improve Python. I hope this blog post serves as a humble guide for anyone interested in improving their Python by solving puzzles.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gryf3z",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "janodusho",
            "discussion_type": null,
            "num_comments": 4,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gryf3z/httpawakenerdcom20241115puzzlestoimprovepython/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gryf3z/httpawakenerdcom20241115puzzlestoimprovepython/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731683307.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hello Everyone\nA python Programmer here\nJust wondering if there is any kind of project / research work ideas which can be implemented in the field of space exploration/ technology cause I'm obsessed with space ;)\nJust give me suggestions \nHappy Coding ;)",
            "author_fullname": "t2_t8abhbet",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Need project Idea",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1grul1v",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.59,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 3,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 3,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731671327.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello Everyone\nA python Programmer here\nJust wondering if there is any kind of project / research work ideas which can be implemented in the field of space exploration/ technology cause I&amp;#39;m obsessed with space ;)\nJust give me suggestions \nHappy Coding ;)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1grul1v",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "ANONYMOUS_of_reddit",
            "discussion_type": null,
            "num_comments": 12,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1grul1v/need_project_idea/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1grul1v/need_project_idea/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731671327.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hey Python enthusiasts! Any VFX folks here? I've developed a little package called `fxgui` \\- a collection of Python classes and utilities designed for building Qt-based UIs in VFX-focused DCC applications.\n\nIt's available on [GitHub](https://github.com/healkeiser/fxgui), [PyPI](https://pypi.org/project/fxgui), and comes with [documentation](https://healkeiser.github.io/fxgui). I'd love to hear your thoughts and get some feedback!\n\n# Target Audience\n\n* VFX/CGI people working from multiple DCCs.\n\n# Key Features\n\n* Quick setup of common widgets.\n* Reusable custom UI components.\n* Fully compatible over PySide2/PySide6, thanks to [qtpy](https://pypi.org/project/QtPy/).\n\n# Comparison\n\n* Specifically designed for multi-DCC environments (Maya, Houdini, Nuke, etc.).\n* Saves development time by offering ready-to-use components.\n* Maintains consistency and standardization across projects and DCCs.",
            "author_fullname": "t2_fli1nl7in",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "fxgui: Collection of Python Classes and Utilities designed for Building Qt-based UIs in VFX",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gru93h",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.82,
            "author_flair_background_color": "#646d73",
            "subreddit_type": "public",
            "ups": 13,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": "956b10e0-6180-11ee-9320-72661c5cb03a",
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 13,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [
                {
                    "e": "text",
                    "t": "from __future__ import 4.0"
                }
            ],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731670025.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "richtext",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey Python enthusiasts! Any VFX folks here? I&amp;#39;ve developed a little package called &lt;code&gt;fxgui&lt;/code&gt; - a collection of Python classes and utilities designed for building Qt-based UIs in VFX-focused DCC applications.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s available on &lt;a href=\"https://github.com/healkeiser/fxgui\"&gt;GitHub&lt;/a&gt;, &lt;a href=\"https://pypi.org/project/fxgui\"&gt;PyPI&lt;/a&gt;, and comes with &lt;a href=\"https://healkeiser.github.io/fxgui\"&gt;documentation&lt;/a&gt;. I&amp;#39;d love to hear your thoughts and get some feedback!&lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;VFX/CGI people working from multiple DCCs.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Key Features&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Quick setup of common widgets.&lt;/li&gt;\n&lt;li&gt;Reusable custom UI components.&lt;/li&gt;\n&lt;li&gt;Fully compatible over PySide2/PySide6, thanks to &lt;a href=\"https://pypi.org/project/QtPy/\"&gt;qtpy&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Specifically designed for multi-DCC environments (Maya, Houdini, Nuke, etc.).&lt;/li&gt;\n&lt;li&gt;Saves development time by offering ready-to-use components.&lt;/li&gt;\n&lt;li&gt;Maintains consistency and standardization across projects and DCCs.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/Xd1PrkSSeLKTLVpTxLrTIwGzipiU_oplhITWY7gaFe4.jpg?auto=webp&amp;s=9deabd699d9a9d16cda46e5ba77af92870ac4c91",
                            "width": 1366,
                            "height": 768
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/Xd1PrkSSeLKTLVpTxLrTIwGzipiU_oplhITWY7gaFe4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=07d315cb31f22aeccab68d19a80f9d259654a542",
                                "width": 108,
                                "height": 60
                            },
                            {
                                "url": "https://external-preview.redd.it/Xd1PrkSSeLKTLVpTxLrTIwGzipiU_oplhITWY7gaFe4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=7e2520c1a2cd861c37ec212cdf4f80eed5bb48a5",
                                "width": 216,
                                "height": 121
                            },
                            {
                                "url": "https://external-preview.redd.it/Xd1PrkSSeLKTLVpTxLrTIwGzipiU_oplhITWY7gaFe4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=3b7bf5fecf922bf9a6df80ab26353462c518750b",
                                "width": 320,
                                "height": 179
                            },
                            {
                                "url": "https://external-preview.redd.it/Xd1PrkSSeLKTLVpTxLrTIwGzipiU_oplhITWY7gaFe4.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=fe1e88c4b2d41c6374534a5fa9ffd71f58de2238",
                                "width": 640,
                                "height": 359
                            },
                            {
                                "url": "https://external-preview.redd.it/Xd1PrkSSeLKTLVpTxLrTIwGzipiU_oplhITWY7gaFe4.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=1c9ef72b05bfbe208505c8e53733067bc4e5bf06",
                                "width": 960,
                                "height": 539
                            },
                            {
                                "url": "https://external-preview.redd.it/Xd1PrkSSeLKTLVpTxLrTIwGzipiU_oplhITWY7gaFe4.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=4a9ff87c95c8974adc17742ae8e316ae40c7e910",
                                "width": 1080,
                                "height": 607
                            }
                        ],
                        "variants": {},
                        "id": "3u5jaluRoFTFWaT3eMKRPyxzS1MSRRytL4byojOUYrY"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": "from __future__ import 4.0",
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gru93h",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Ocushire",
            "discussion_type": null,
            "num_comments": 1,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": "light",
            "permalink": "/r/Python/comments/1gru93h/fxgui_collection_of_python_classes_and_utilities/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gru93h/fxgui_collection_of_python_classes_and_utilities/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731670025.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Links: [Github](https://github.com/bolaft/dispatchery/), [PyPI](https://pypi.org/project/dispatchery/)\n\n**What it does:**\n\n*dispatchery* is a lightweight Python package for function dispatching inspired by the standard *singledispatch* decorator, but with support for complex, nested, parameterized types, like for example *tuple[str, dict[str, int | float]]*.\n\n**Comparison**:\n\nUnlike *singledispatch*, *dispatchery* can dispatch based on:\n\n- Generic parameterized types (e.g. *list[int]*)\n- Nested types (e.g. *tuple[str, dict[str, int | float]]*)\n- Union types (e.g. *int | str* or *Union[int, str]*)\n- Multiple arg and kwarg values, not just the first one\n\n**Target Audience:**\n\nPython developers who don't like having a bunch of *if isinstance* checks everywhere in their code.\n\n**Example :**\n\n    from dispatchery import dispatchery\n    \n    @dispatchery\n    def my_func(value):\n        return \"Standard stuff.\"\n    \n    @my_func.register(list[str])\n    def _(value):\n        return \"Strings!\"\n    \n    @my_func.register(list[int] | list[float])\n    def _(value):\n        return \"Numbers!\"\n    \n    @my_func.register(str, int | float, option=str)\n    def _(value1, value2, option):\n        return \"Two values and a kwarg!\"\n\n    # my_func(42) or my_func(\"hello\") will return \"Standard stuff.\"\n    # my_func([\"a\", \"b\", \"c\"]) will return \"Strings!\"\n    # my_func([1, 2, 3]) or my_func([0.2, 0.5, 1.2]) will return \"Numbers!\"\n    # my_func(\"hello\", 42, option=\"test\") will return \"Two values and a kwarg!\"\n\n**Installation:**\n\n    pip install dispatchery\n\nSee the full README on [Github](https://github.com/bolaft/dispatchery/).\n\nMIT license, feedback welcome!",
            "author_fullname": "t2_duss2",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Dispatchery: Type-aware, multi-arg function dispatch for complex and nested Python types",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1grszm2",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.85,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 30,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 30,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731664537.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Links: &lt;a href=\"https://github.com/bolaft/dispatchery/\"&gt;Github&lt;/a&gt;, &lt;a href=\"https://pypi.org/project/dispatchery/\"&gt;PyPI&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What it does:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;dispatchery&lt;/em&gt; is a lightweight Python package for function dispatching inspired by the standard &lt;em&gt;singledispatch&lt;/em&gt; decorator, but with support for complex, nested, parameterized types, like for example &lt;em&gt;tuple[str, dict[str, int | float]]&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;Unlike &lt;em&gt;singledispatch&lt;/em&gt;, &lt;em&gt;dispatchery&lt;/em&gt; can dispatch based on:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Generic parameterized types (e.g. &lt;em&gt;list[int]&lt;/em&gt;)&lt;/li&gt;\n&lt;li&gt;Nested types (e.g. &lt;em&gt;tuple[str, dict[str, int | float]]&lt;/em&gt;)&lt;/li&gt;\n&lt;li&gt;Union types (e.g. &lt;em&gt;int | str&lt;/em&gt; or &lt;em&gt;Union[int, str]&lt;/em&gt;)&lt;/li&gt;\n&lt;li&gt;Multiple arg and kwarg values, not just the first one&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Python developers who don&amp;#39;t like having a bunch of &lt;em&gt;if isinstance&lt;/em&gt; checks everywhere in their code.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example :&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from dispatchery import dispatchery\n\n@dispatchery\ndef my_func(value):\n    return &amp;quot;Standard stuff.&amp;quot;\n\n@my_func.register(list[str])\ndef _(value):\n    return &amp;quot;Strings!&amp;quot;\n\n@my_func.register(list[int] | list[float])\ndef _(value):\n    return &amp;quot;Numbers!&amp;quot;\n\n@my_func.register(str, int | float, option=str)\ndef _(value1, value2, option):\n    return &amp;quot;Two values and a kwarg!&amp;quot;\n\n# my_func(42) or my_func(&amp;quot;hello&amp;quot;) will return &amp;quot;Standard stuff.&amp;quot;\n# my_func([&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;]) will return &amp;quot;Strings!&amp;quot;\n# my_func([1, 2, 3]) or my_func([0.2, 0.5, 1.2]) will return &amp;quot;Numbers!&amp;quot;\n# my_func(&amp;quot;hello&amp;quot;, 42, option=&amp;quot;test&amp;quot;) will return &amp;quot;Two values and a kwarg!&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;pip install dispatchery\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See the full README on &lt;a href=\"https://github.com/bolaft/dispatchery/\"&gt;Github&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;MIT license, feedback welcome!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/GkXokwgmE_wbCcZLqaIJryFzTXCbRVcfiK269onZCoQ.jpg?auto=webp&amp;s=fd3f77a0cfe98557da181d220bb48ff7554a5af5",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/GkXokwgmE_wbCcZLqaIJryFzTXCbRVcfiK269onZCoQ.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=f2d8a54d9ea950bcee319473be6198a439709096",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/GkXokwgmE_wbCcZLqaIJryFzTXCbRVcfiK269onZCoQ.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=def9f1443f2b83e1d5811ab4748750fd9eaf90d9",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/GkXokwgmE_wbCcZLqaIJryFzTXCbRVcfiK269onZCoQ.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=96c6a0bfdde4f74c5067b5ac62bc3a37ced20481",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/GkXokwgmE_wbCcZLqaIJryFzTXCbRVcfiK269onZCoQ.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=a8dde964361dbb8e4980019140a7f50602d46709",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/GkXokwgmE_wbCcZLqaIJryFzTXCbRVcfiK269onZCoQ.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=3c8381ed309d733f460d1546c44f2d6f2c7543fb",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/GkXokwgmE_wbCcZLqaIJryFzTXCbRVcfiK269onZCoQ.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=20ee3a0d7d94dfa16039b9eb26702cd4aeb90550",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "Xsk-l8_ZjETyZwi2It19cyf45utVkrEuf6ZhPdIReYE"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1grszm2",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "bolaft",
            "discussion_type": null,
            "num_comments": 17,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1grszm2/dispatchery_typeaware_multiarg_function_dispatch/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1grszm2/dispatchery_typeaware_multiarg_function_dispatch/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731664537.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "When it comes to function overloading, those who have learned Java should be familiar with it. One of the most common uses is logging, where different overloaded functions are called for different parameters. So, how can we implement function overloading in Python? This post explains how. [The Ultimate Guide to Implement Function Overloading in Python](https://www.pixelstech.net/article/1731643884-The-Ultimate-Guide-to-Implement-Function-Overloading-in-Python)",
            "author_fullname": "t2_pqnhn",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "The Ultimate Guide to Implement Function Overloading in Python",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Tutorial"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "tutorial",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1grof3m",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.63,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 23,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Tutorial",
            "can_mod_post": false,
            "score": 23,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731645397.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;When it comes to function overloading, those who have learned Java should be familiar with it. One of the most common uses is logging, where different overloaded functions are called for different parameters. So, how can we implement function overloading in Python? This post explains how. &lt;a href=\"https://www.pixelstech.net/article/1731643884-The-Ultimate-Guide-to-Implement-Function-Overloading-in-Python\"&gt;The Ultimate Guide to Implement Function Overloading in Python&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#dadada",
            "id": "1grof3m",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "stackoverflooooooow",
            "discussion_type": null,
            "num_comments": 38,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1grof3m/the_ultimate_guide_to_implement_function/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1grof3m/the_ultimate_guide_to_implement_function/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731645397.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I recently worked on a project combining my love for terminal limits and video art. Here’s what I achieved: •\tRendered a 1-minute-long (almost two) ASCII video in the terminal, without graphics libraries or external frameworks. •\tUsed true 24-bit colors for each frame, offering deeper color representation in terminal-based projects. •\tProcessed 432 million characters over 228 seconds, translating each frame’s pixels to colors. •\tOptimized performance with multi-processing, running on an integrated graphics card.\n\nSpecs:\n\n    •\t30 FPS\n    •\t160,000+ characters per frame\n    •\t2,700 frames\n    •\t3 pixels per character for better performance\n\nFor further optimization, I reduced the font size to 3 pixels and used background colors to handle brightness.\n\n**What my project does?**\nWhile not the most practical project, it’s an experiment I’m satisfied with it. No real use, but hey, it’s fun!\n\n**Target audience**\nThis is more of a fun project so I can't say it has a specific target audience, but I could say that people that strangely feels good coding \"useless\" things might like it.\n\n**Comparison**  \nWell it is not an *ASCII* player anymore to be precise, but what it does now is just display video in the terminal using basically pure ANSI, I don't think there is an exact alternative to this since it doesn't serve a specific purpose, except from, well, displaying video with text, it is a fun project.\n\nP.S. I’m considering rewriting the frame conversion in C to speed things up. More improvements are coming soon!\n\nThat’s it, you can watch a [preview with Tank!](https://youtu.be/FIiminiYla4?si=68aDkNLMo_t8sa0I) from cowboy bebop (ignore some random color stripes i had to do some optimization but wasn’t really precise on difference calculation)\n\nYou can find the repo [here](https://github.com/wired32/ascii-player) \n\n~~but be aware that the current version was not pushed to github yet, but feel free to analyze the old versions/commits if you feel like, I will update when I release the current code.~~\n\n~~OBS: changefontsize.py only works with windows terminal, as it changes the default font from your profile, will be removed in the current version as it degrades compatibility.~~ *Removed in current version*",
            "author_fullname": "t2_qxwgibcl",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "I played a minute-long video in Windows Terminal",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gro3kl",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.89,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 46,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 46,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1731678663.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731644307.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I recently worked on a project combining my love for terminal limits and video art. Here’s what I achieved: •   Rendered a 1-minute-long (almost two) ASCII video in the terminal, without graphics libraries or external frameworks. •   Used true 24-bit colors for each frame, offering deeper color representation in terminal-based projects. •    Processed 432 million characters over 228 seconds, translating each frame’s pixels to colors. • Optimized performance with multi-processing, running on an integrated graphics card.&lt;/p&gt;\n\n&lt;p&gt;Specs:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;• 30 FPS\n• 160,000+ characters per frame\n• 2,700 frames\n• 3 pixels per character for better performance\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For further optimization, I reduced the font size to 3 pixels and used background colors to handle brightness.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What my project does?&lt;/strong&gt;\nWhile not the most practical project, it’s an experiment I’m satisfied with it. No real use, but hey, it’s fun!&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target audience&lt;/strong&gt;\nThis is more of a fun project so I can&amp;#39;t say it has a specific target audience, but I could say that people that strangely feels good coding &amp;quot;useless&amp;quot; things might like it.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;br/&gt;\nWell it is not an &lt;em&gt;ASCII&lt;/em&gt; player anymore to be precise, but what it does now is just display video in the terminal using basically pure ANSI, I don&amp;#39;t think there is an exact alternative to this since it doesn&amp;#39;t serve a specific purpose, except from, well, displaying video with text, it is a fun project.&lt;/p&gt;\n\n&lt;p&gt;P.S. I’m considering rewriting the frame conversion in C to speed things up. More improvements are coming soon!&lt;/p&gt;\n\n&lt;p&gt;That’s it, you can watch a &lt;a href=\"https://youtu.be/FIiminiYla4?si=68aDkNLMo_t8sa0I\"&gt;preview with Tank!&lt;/a&gt; from cowboy bebop (ignore some random color stripes i had to do some optimization but wasn’t really precise on difference calculation)&lt;/p&gt;\n\n&lt;p&gt;You can find the repo &lt;a href=\"https://github.com/wired32/ascii-player\"&gt;here&lt;/a&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;del&gt;but be aware that the current version was not pushed to github yet, but feel free to analyze the old versions/commits if you feel like, I will update when I release the current code.&lt;/del&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;del&gt;OBS: changefontsize.py only works with windows terminal, as it changes the default font from your profile, will be removed in the current version as it degrades compatibility.&lt;/del&gt; &lt;em&gt;Removed in current version&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/VTw52Ny97a0ZYkJ4jWVW14CwQNSwf4eQx6w7cSSftmc.jpg?auto=webp&amp;s=e658765ae710698e124579a3ae6e64fe4f6463d6",
                            "width": 480,
                            "height": 360
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/VTw52Ny97a0ZYkJ4jWVW14CwQNSwf4eQx6w7cSSftmc.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=0b096672028f643ae90b0d87efb51e99646ab3c8",
                                "width": 108,
                                "height": 81
                            },
                            {
                                "url": "https://external-preview.redd.it/VTw52Ny97a0ZYkJ4jWVW14CwQNSwf4eQx6w7cSSftmc.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=f4c0f38c6282c040e6e53230e8d3007028937e69",
                                "width": 216,
                                "height": 162
                            },
                            {
                                "url": "https://external-preview.redd.it/VTw52Ny97a0ZYkJ4jWVW14CwQNSwf4eQx6w7cSSftmc.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=fa70247618c5ed6ad5d27a3ab3550d9b529b5443",
                                "width": 320,
                                "height": 240
                            }
                        ],
                        "variants": {},
                        "id": "u0v35xOZGEUvBowKB0Ry5-8rivX2Pj_Lx8L8-T1RSno"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gro3kl",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "PureSwing9975",
            "discussion_type": null,
            "num_comments": 9,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gro3kl/i_played_a_minutelong_video_in_windows_terminal/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gro3kl/i_played_a_minutelong_video_in_windows_terminal/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731644307.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hello, I shared a Python Data Science Bootcamp on YouTube. Bootcamp is over 7 hours and there are 7 courses with 3 projects. Courses are Python, Pandas, Numpy, Matplotlib, Seaborn, Plotly and Scikit-learn. I am leaving the link below, have a great day!\n\nBootcamp: [https://www.youtube.com/watch?v=6gDLcTcePhM](https://www.youtube.com/watch?v=6gDLcTcePhM)\n\nData Science Courses Playlist: [https://youtube.com/playlist?list=PLTsu3dft3CWiow7L7WrCd27ohlra\\_5PGH&amp;si=6WUpVwXeAKEs4tB6](https://youtube.com/playlist?list=PLTsu3dft3CWiow7L7WrCd27ohlra_5PGH&amp;si=6WUpVwXeAKEs4tB6)",
            "author_fullname": "t2_me12im5a",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "I shared a Python Data Science Bootcamp (7+ Hours, 7 Courses and 3 Projects) on YouTube",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Tutorial"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "tutorial",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1grnwh7",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.85,
            "author_flair_background_color": "transparent",
            "subreddit_type": "public",
            "ups": 46,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": "4cc838b8-3159-11e1-83e4-12313d18ad57",
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Tutorial",
            "can_mod_post": false,
            "score": 46,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [
                {
                    "e": "text",
                    "t": " "
                }
            ],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731643646.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "richtext",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello, I shared a Python Data Science Bootcamp on YouTube. Bootcamp is over 7 hours and there are 7 courses with 3 projects. Courses are Python, Pandas, Numpy, Matplotlib, Seaborn, Plotly and Scikit-learn. I am leaving the link below, have a great day!&lt;/p&gt;\n\n&lt;p&gt;Bootcamp: &lt;a href=\"https://www.youtube.com/watch?v=6gDLcTcePhM\"&gt;https://www.youtube.com/watch?v=6gDLcTcePhM&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Data Science Courses Playlist: &lt;a href=\"https://youtube.com/playlist?list=PLTsu3dft3CWiow7L7WrCd27ohlra_5PGH&amp;amp;si=6WUpVwXeAKEs4tB6\"&gt;https://youtube.com/playlist?list=PLTsu3dft3CWiow7L7WrCd27ohlra_5PGH&amp;amp;si=6WUpVwXeAKEs4tB6&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/Sifo4wfXfhILh7IbDb7ONe3njUxfponrmmQb6rYmLCQ.jpg?auto=webp&amp;s=b47a72ea257bdddf2a7589885c383cffca23e21a",
                            "width": 480,
                            "height": 360
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/Sifo4wfXfhILh7IbDb7ONe3njUxfponrmmQb6rYmLCQ.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=abc97939fe22ff5635f74ce7ed525b97c97712f1",
                                "width": 108,
                                "height": 81
                            },
                            {
                                "url": "https://external-preview.redd.it/Sifo4wfXfhILh7IbDb7ONe3njUxfponrmmQb6rYmLCQ.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=94ff94cf3b1588fadbbcff7af1ed51b74aac3a4a",
                                "width": 216,
                                "height": 162
                            },
                            {
                                "url": "https://external-preview.redd.it/Sifo4wfXfhILh7IbDb7ONe3njUxfponrmmQb6rYmLCQ.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=00acd652fa76de6cb44f144af85372103b977d74",
                                "width": 320,
                                "height": 240
                            }
                        ],
                        "variants": {},
                        "id": "NAkwd6Bh08GTexj5ez-XadPInHQFSGqGM56tJY4QD1I"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": " ",
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#dadada",
            "id": "1grnwh7",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "onurbaltaci",
            "discussion_type": null,
            "num_comments": 12,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": "dark",
            "permalink": "/r/Python/comments/1grnwh7/i_shared_a_python_data_science_bootcamp_7_hours_7/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1grnwh7/i_shared_a_python_data_science_bootcamp_7_hours_7/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731643646.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Anyway to bypass this with python and chrome?\n\nIts not on the front page, but in the website itself.\n\nThe problem is when i manually click it, it gives still erorr?…",
            "author_fullname": "t2_xyj8s",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Cloudflare turnstyle",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1grln93",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.53,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 1,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 1,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731636326.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Anyway to bypass this with python and chrome?&lt;/p&gt;\n\n&lt;p&gt;Its not on the front page, but in the website itself.&lt;/p&gt;\n\n&lt;p&gt;The problem is when i manually click it, it gives still erorr?…&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1grln93",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "jowie7979",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1grln93/cloudflare_turnstyle/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1grln93/cloudflare_turnstyle/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731636326.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# Weekly Thread: Meta Discussions and Free Talk Friday 🎙️\n\nWelcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!\n\n## How it Works:\n\n1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.\n2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.\n3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.\n\n## Guidelines:\n\n* All topics should be related to Python or the /r/python community.\n* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).\n\n## Example Topics:\n\n1. **New Python Release**: What do you think about the new features in Python 3.11?\n2. **Community Events**: Any Python meetups or webinars coming up?\n3. **Learning Resources**: Found a great Python tutorial? Share it here!\n4. **Job Market**: How has Python impacted your career?\n5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!\n6. **Community Ideas**: Something you'd like to see us do? tell us.\n\nLet's keep the conversation going. Happy discussing! 🌟",
            "author_fullname": "t2_6l4z3",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays",
            "link_flair_richtext": [
                {
                    "a": ":pythonLogo:",
                    "e": "emoji",
                    "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                },
                {
                    "e": "text",
                    "t": " Daily Thread"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "daily-thread",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1grj5d8",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.74,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 7,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": ":pythonLogo: Daily Thread",
            "can_mod_post": false,
            "score": 7,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": true,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731628856.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: Meta Discussions and Free Talk Friday 🎙️&lt;/h1&gt;\n\n&lt;p&gt;Welcome to Free Talk Friday on &lt;a href=\"/r/Python\"&gt;/r/Python&lt;/a&gt;! This is the place to discuss the &lt;a href=\"/r/Python\"&gt;r/Python&lt;/a&gt; community (meta discussions), Python news, projects, or anything else Python-related!&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Open Mic&lt;/strong&gt;: Share your thoughts, questions, or anything you&amp;#39;d like related to Python or the community.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Community Pulse&lt;/strong&gt;: Discuss what you feel is working well or what could be improved in the &lt;a href=\"/r/python\"&gt;/r/python&lt;/a&gt; community.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;News &amp;amp; Updates&lt;/strong&gt;: Keep up-to-date with the latest in Python and share any news you find interesting.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;All topics should be related to Python or the &lt;a href=\"/r/python\"&gt;/r/python&lt;/a&gt; community.&lt;/li&gt;\n&lt;li&gt;Be respectful and follow Reddit&amp;#39;s &lt;a href=\"https://www.redditinc.com/policies/content-policy\"&gt;Code of Conduct&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Topics:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;New Python Release&lt;/strong&gt;: What do you think about the new features in Python 3.11?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Community Events&lt;/strong&gt;: Any Python meetups or webinars coming up?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Learning Resources&lt;/strong&gt;: Found a great Python tutorial? Share it here!&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Job Market&lt;/strong&gt;: How has Python impacted your career?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Hot Takes&lt;/strong&gt;: Got a controversial Python opinion? Let&amp;#39;s hear it!&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Community Ideas&lt;/strong&gt;: Something you&amp;#39;d like to see us do? tell us.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Let&amp;#39;s keep the conversation going. Happy discussing! 🌟&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#00a6a5",
            "id": "1grj5d8",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "AutoModerator",
            "discussion_type": null,
            "num_comments": 5,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1grj5d8/friday_daily_thread_rpython_meta_and_freetalk/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1grj5d8/friday_daily_thread_rpython_meta_and_freetalk/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731628856.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hello, I have 10,000 websites to assess for reCAPTCHA implementation and am looking for a more efficient solution. Currently, I'm using Selenium and ThreadPoolExecutor, which depend heavily on my computer's processing power. I can only iterate through 5 or 10 sites simultaneously to run a JavaScript script and determine if reCAPTCHA is present. This method takes approximately 10 hours with just 5 threads in Python. I need a better approach to expedite this process. ",
            "author_fullname": "t2_12rdu6aey5",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "How can we iterate 10000 websites efficiently?",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gremg1",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.38,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731616710.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello, I have 10,000 websites to assess for reCAPTCHA implementation and am looking for a more efficient solution. Currently, I&amp;#39;m using Selenium and ThreadPoolExecutor, which depend heavily on my computer&amp;#39;s processing power. I can only iterate through 5 or 10 sites simultaneously to run a JavaScript script and determine if reCAPTCHA is present. This method takes approximately 10 hours with just 5 threads in Python. I need a better approach to expedite this process. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gremg1",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Altruistic_Steak5869",
            "discussion_type": null,
            "num_comments": 12,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gremg1/how_can_we_iterate_10000_websites_efficiently/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gremg1/how_can_we_iterate_10000_websites_efficiently/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731616710.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hello, I don't know if already exists but I believe that would be great if there is a library that gives you the same API of pandas but uses Polars under the hood when possible.\n\nI saw how powerful is Polars but still data scientists use a lot of pandas and it’s difficult to change habits. What do you think?\n",
            "author_fullname": "t2_eexr5lkjk",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Would a Pandas-compatible API powered by Polars be useful?",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1grdh7n",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.77,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 38,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 38,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731613735.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello, I don&amp;#39;t know if already exists but I believe that would be great if there is a library that gives you the same API of pandas but uses Polars under the hood when possible.&lt;/p&gt;\n\n&lt;p&gt;I saw how powerful is Polars but still data scientists use a lot of pandas and it’s difficult to change habits. What do you think?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1grdh7n",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "try-except-finally",
            "discussion_type": null,
            "num_comments": 70,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1grdh7n/would_a_pandascompatible_api_powered_by_polars_be/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1grdh7n/would_a_pandascompatible_api_powered_by_polars_be/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731613735.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "GitHub: [SqueakyCleanText](https://github.com/rhnfzl/SqueakyCleanText) | PyPI: [squeakycleantext](https://pypi.org/project/SqueakyCleanText/)\n\nHappy to share **SqueakyCleanText**, a Python library designed to streamline text preprocessing for Natural Language Processing (NLP) and Machine Learning (ML) tasks. Whether you're working on language models, statistical ML pipelines, or any text-heavy application, this library aims to make your preprocessing pipeline more efficient and flexible.\n\n### 🎯 Target Audience\n\n- **Data Scientists**, **AI Engineers** and **Machine Learning Engineers** dealing with text data.\n\n- **NLP Researchers** and **NLP Linguists** looking for customisable preprocessing tools.\n\n- **Developers** building applications that require text cleaning and anonymisation.\n\n\n### 🔑 Key Features\n\n1. **Advanced Named Entity Recognition (NER)**\n   - **Ensemble of Models**: Utilises multiple NER models from Hugging Face Transformers for improved accuracy.\n\n   - **Smart Text Chunking**: Efficiently handles long texts by splitting them into optimized chunks.\n\n   - **Configurable Confidence Thresholds**: Adjust the sensitivity of entity detection.\n\n   - **Configurable Models**: Choose NER models which suits your use-case.\n\n   - **Configurable Positional Tags**: Choose what you would like to be removed from the texts.\n\n   - **Automatic Language Detection**: Supports English, German, Spanish, and Dutch with automatic model selection.\n\n\n2. **Modular Pipeline Architecture**\n   - **Toggle-able Features**: Easily enable or disable any step in the pipeline.\n\n   - **Single and Batch Processing**: Consistent configuration applies to both modes.\n\n   - **Default Pipeline Includes**:\n\n     - Bad Unicode correction\n\n     - HTML and URL handling\n\n     - Contact information anonymization (emails, phone numbers)\n\n     - Date and number normalization\n\n     - Advanced NER processing\n\n     - Whitespace and punctuation normalization\n\n\n3. **Performance Optimizations**\n\n   - **Under-the-Hood NER Improvements**: Enhanced NER processing delivers faster results without compromising accuracy.\n\n   - **Batch Processing Support**: Process large datasets efficiently with configurable batch sizes.\n\n   - **Memory Management**: Automatic cleanup of GPU memory to handle large-scale processing.\n\n### 🚀 Comparison\n\n\n- **Comprehensive and Modular**: Unlike libraries that focus on specific tasks, SqueakyCleanText offers a full suite of preprocessing steps that you can customize to your needs.\n\n- **Advanced NER Integration**: Combines multiple NER models and uses smart chunking to improve entity recognition in long texts.\n\n- **Dual Output Formats**: Provides both language model-formatted text and statistical model-formatted text in a single pass.\n\n- **Easy Integration**: Designed to seamlessly fit into existing workflows with minimal adjustments.\n\n### 💻 Quick Start Guide\n\n**Installation**\n\n```\npip install SqueakyCleanText\n```\n\n### 🛠 Integrate into Your Workflow\n\n- **Customizable Pipeline**: Tailor the preprocessing steps to match your project's requirements by toggling features in `config.py`.\n\n- **Seamless NER Integration**: Use the advanced NER processing to anonymize sensitive data or extract entities for downstream tasks.\n\n- **Flexible Processing**: Apply the same configurations to both single and batch processing modes without changing your code.\n\n- **Efficient for Large Datasets**: Leverage batch processing and memory optimizations to handle large volumes of text data.",
            "author_fullname": "t2_6e0gkfu4",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "SqueakyCleanText: A Modular Text Processing Library with Advanced NER",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1grc5bi",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.87,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 11,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 11,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731610350.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;GitHub: &lt;a href=\"https://github.com/rhnfzl/SqueakyCleanText\"&gt;SqueakyCleanText&lt;/a&gt; | PyPI: &lt;a href=\"https://pypi.org/project/SqueakyCleanText/\"&gt;squeakycleantext&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Happy to share &lt;strong&gt;SqueakyCleanText&lt;/strong&gt;, a Python library designed to streamline text preprocessing for Natural Language Processing (NLP) and Machine Learning (ML) tasks. Whether you&amp;#39;re working on language models, statistical ML pipelines, or any text-heavy application, this library aims to make your preprocessing pipeline more efficient and flexible.&lt;/p&gt;\n\n&lt;h3&gt;🎯 Target Audience&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Data Scientists&lt;/strong&gt;, &lt;strong&gt;AI Engineers&lt;/strong&gt; and &lt;strong&gt;Machine Learning Engineers&lt;/strong&gt; dealing with text data.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;NLP Researchers&lt;/strong&gt; and &lt;strong&gt;NLP Linguists&lt;/strong&gt; looking for customisable preprocessing tools.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Developers&lt;/strong&gt; building applications that require text cleaning and anonymisation.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3&gt;🔑 Key Features&lt;/h3&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Advanced Named Entity Recognition (NER)&lt;/strong&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Ensemble of Models&lt;/strong&gt;: Utilises multiple NER models from Hugging Face Transformers for improved accuracy.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Smart Text Chunking&lt;/strong&gt;: Efficiently handles long texts by splitting them into optimized chunks.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Configurable Confidence Thresholds&lt;/strong&gt;: Adjust the sensitivity of entity detection.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Configurable Models&lt;/strong&gt;: Choose NER models which suits your use-case.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Configurable Positional Tags&lt;/strong&gt;: Choose what you would like to be removed from the texts.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Automatic Language Detection&lt;/strong&gt;: Supports English, German, Spanish, and Dutch with automatic model selection.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Modular Pipeline Architecture&lt;/strong&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Toggle-able Features&lt;/strong&gt;: Easily enable or disable any step in the pipeline.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Single and Batch Processing&lt;/strong&gt;: Consistent configuration applies to both modes.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Default Pipeline Includes&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Bad Unicode correction&lt;/li&gt;\n&lt;li&gt;HTML and URL handling&lt;/li&gt;\n&lt;li&gt;Contact information anonymization (emails, phone numbers)&lt;/li&gt;\n&lt;li&gt;Date and number normalization&lt;/li&gt;\n&lt;li&gt;Advanced NER processing&lt;/li&gt;\n&lt;li&gt;Whitespace and punctuation normalization&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Performance Optimizations&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Under-the-Hood NER Improvements&lt;/strong&gt;: Enhanced NER processing delivers faster results without compromising accuracy.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Batch Processing Support&lt;/strong&gt;: Process large datasets efficiently with configurable batch sizes.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Memory Management&lt;/strong&gt;: Automatic cleanup of GPU memory to handle large-scale processing.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3&gt;🚀 Comparison&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Comprehensive and Modular&lt;/strong&gt;: Unlike libraries that focus on specific tasks, SqueakyCleanText offers a full suite of preprocessing steps that you can customize to your needs.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Advanced NER Integration&lt;/strong&gt;: Combines multiple NER models and uses smart chunking to improve entity recognition in long texts.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Dual Output Formats&lt;/strong&gt;: Provides both language model-formatted text and statistical model-formatted text in a single pass.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Easy Integration&lt;/strong&gt;: Designed to seamlessly fit into existing workflows with minimal adjustments.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3&gt;💻 Quick Start Guide&lt;/h3&gt;\n\n&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\npip install SqueakyCleanText\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;h3&gt;🛠 Integrate into Your Workflow&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Customizable Pipeline&lt;/strong&gt;: Tailor the preprocessing steps to match your project&amp;#39;s requirements by toggling features in &lt;code&gt;config.py&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Seamless NER Integration&lt;/strong&gt;: Use the advanced NER processing to anonymize sensitive data or extract entities for downstream tasks.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Flexible Processing&lt;/strong&gt;: Apply the same configurations to both single and batch processing modes without changing your code.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Efficient for Large Datasets&lt;/strong&gt;: Leverage batch processing and memory optimizations to handle large volumes of text data.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/XFvNVGhhQZbrPup71u-l9KUpkcWR7U7DAwFzA96ObsE.jpg?auto=webp&amp;s=f6cfa7fc22e182e181ccb65e1873c1024c3a4608",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/XFvNVGhhQZbrPup71u-l9KUpkcWR7U7DAwFzA96ObsE.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=bbcde40c068272c866eefa4e4245264bb52c449a",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/XFvNVGhhQZbrPup71u-l9KUpkcWR7U7DAwFzA96ObsE.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=32c226fdd20e70a61692e16f221d7bf9ea9b1e6b",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/XFvNVGhhQZbrPup71u-l9KUpkcWR7U7DAwFzA96ObsE.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=0d19ac863100d5d6319acdd085872c09037f674f",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/XFvNVGhhQZbrPup71u-l9KUpkcWR7U7DAwFzA96ObsE.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=f87329dbce30f7a4b08b05aaffda5c94b8e2d827",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/XFvNVGhhQZbrPup71u-l9KUpkcWR7U7DAwFzA96ObsE.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=a809c6aaf6d510bd6f6ed8e7a86111503cab6a09",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/XFvNVGhhQZbrPup71u-l9KUpkcWR7U7DAwFzA96ObsE.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=a15e2448ff09cb0d35a620e6facb4d8d6324d8ef",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "x8YVz3kR_yBQV1Q8v72NR_X5nWGmaDFKOLXmA_fHGok"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1grc5bi",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "complexrexton",
            "discussion_type": null,
            "num_comments": 7,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1grc5bi/squeakycleantext_a_modular_text_processing/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1grc5bi/squeakycleantext_a_modular_text_processing/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731610350.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "The manager came to me from a sister team and asked me to produce the obscure Python code I could come up with. Because she wanted to give her developers a challenge. The requirements was that it should produce a code that could be sent in a text message to get the next challenge. And no you are not allowed to run it:) They solved in 30 minutes, can you solve it?\n\n    import inspect\n    def code_as_it_was_meant_to_be(tmp):\n        \"\"\"\n        www.lexico.com/definition/code\n        \"A system of words, letters, figures, or symbols used to represent others,\n        especially for the purposes of secrecy.\"\n        Send what is printed out of by running this functionin a text message to xxx\n        \"\"\"\n        if len(set(tmp)) * 2 &gt; len(tmp):\n            tmp = eval(inspect.stack()[1][4][0].replace(tmp, tmp + tmp[::-1]))\n            print(\n                \"\".join(\n                    str(chr((ord(tmp[i * 2]) + ord(tmp[-(i + 1) * 2])) // 2))\n                    for i in range(len(tmp) // 4)\n                )\n            )\n        else:\n            return tmp[::-1]\n    \n    \n    code_as_it_was_meant_to_be(\"d,W3b6`@\")\n    ",
            "author_fullname": "t2_51jni2s1",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Can you solve this Python riddle I made for my colleagues?",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1grbkg3",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.36,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731608879.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The manager came to me from a sister team and asked me to produce the obscure Python code I could come up with. Because she wanted to give her developers a challenge. The requirements was that it should produce a code that could be sent in a text message to get the next challenge. And no you are not allowed to run it:) They solved in 30 minutes, can you solve it?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import inspect\ndef code_as_it_was_meant_to_be(tmp):\n    &amp;quot;&amp;quot;&amp;quot;\n    www.lexico.com/definition/code\n    &amp;quot;A system of words, letters, figures, or symbols used to represent others,\n    especially for the purposes of secrecy.&amp;quot;\n    Send what is printed out of by running this functionin a text message to xxx\n    &amp;quot;&amp;quot;&amp;quot;\n    if len(set(tmp)) * 2 &amp;gt; len(tmp):\n        tmp = eval(inspect.stack()[1][4][0].replace(tmp, tmp + tmp[::-1]))\n        print(\n            &amp;quot;&amp;quot;.join(\n                str(chr((ord(tmp[i * 2]) + ord(tmp[-(i + 1) * 2])) // 2))\n                for i in range(len(tmp) // 4)\n            )\n        )\n    else:\n        return tmp[::-1]\n\n\ncode_as_it_was_meant_to_be(&amp;quot;d,W3b6`@&amp;quot;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1grbkg3",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "DrMerkwuerdigliebe_",
            "discussion_type": null,
            "num_comments": 5,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1grbkg3/can_you_solve_this_python_riddle_i_made_for_my/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1grbkg3/can_you_solve_this_python_riddle_i_made_for_my/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731608879.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "**What My Project Does:**\n\nThis project automates the process of showcasing detailed analytics and visual insights of your Python repositories on your GitHub profile using GitHub Actions. Once set up, it gathers and updates key statistics on every push, appending the latest information to the bottom of your README without disrupting existing content. The visualizations are compiled into a gif, ensuring that your profile remains clean and visually engaging.\n\nWith this tool, you can automatically analyze, generate, and display visuals for the following metrics:\n\n\\- Repository breakdown by commits and lines of Python code\n\n\\- Heatmap of commit activity by day and time\n\n\\- Word cloud of commit messages\n\n\\- File type distribution across repositories\n\n\\- Libraries used in each repository\n\n\\- Construct counts (including loops, classes, control flow statements, async functions, etc.)\n\n\\- Highlights of the most recent closed PRs and commits\n\nBy implementing these automated insights, your profile stays up-to-date with real-time data, giving visitors a dynamic view of your work without any manual effort.\n\n\\---\n\n**Target Audience:**\n\nThis tool is designed for Python developers and GitHub users who want to showcase their project activity, code structure, and commit history visually on their profile. It’s ideal for those who value continuous profile enhancement with minimal maintenance, making it useful for developers focused on building a robust GitHub presence or professionals looking to highlight their coding activity to potential collaborators or employers.\n\n\\---\n\n**Comparison:**\n\nI havnt seen other tools like this, but by using GitHub Actions, this project ensures that new data is gathered and appended automatically, including in-depth insights such as commit activity heatmaps, word clouds, and code construct counts. This makes it more comprehensive and effortless to maintain than alternatives that require additional steps or only offer limited metrics.\n\n**Repo:**\n\n[https://github.com/sockheadrps/PyProfileDataGen](https://github.com/sockheadrps/PyProfileDataGen)\n\n**Example:**\n\n[https://github.com/sockheadrps](https://github.com/sockheadrps)\n\n**Youtube Tutorial:**\n\n[https://youtu.be/Ls7sTjXEMiI](https://youtu.be/Ls7sTjXEMiI)",
            "author_fullname": "t2_y6yin",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Make your Github profile more attractive as a Python Developer",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gr4qkw",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.73,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 46,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 46,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731590849.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;What My Project Does:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This project automates the process of showcasing detailed analytics and visual insights of your Python repositories on your GitHub profile using GitHub Actions. Once set up, it gathers and updates key statistics on every push, appending the latest information to the bottom of your README without disrupting existing content. The visualizations are compiled into a gif, ensuring that your profile remains clean and visually engaging.&lt;/p&gt;\n\n&lt;p&gt;With this tool, you can automatically analyze, generate, and display visuals for the following metrics:&lt;/p&gt;\n\n&lt;p&gt;- Repository breakdown by commits and lines of Python code&lt;/p&gt;\n\n&lt;p&gt;- Heatmap of commit activity by day and time&lt;/p&gt;\n\n&lt;p&gt;- Word cloud of commit messages&lt;/p&gt;\n\n&lt;p&gt;- File type distribution across repositories&lt;/p&gt;\n\n&lt;p&gt;- Libraries used in each repository&lt;/p&gt;\n\n&lt;p&gt;- Construct counts (including loops, classes, control flow statements, async functions, etc.)&lt;/p&gt;\n\n&lt;p&gt;- Highlights of the most recent closed PRs and commits&lt;/p&gt;\n\n&lt;p&gt;By implementing these automated insights, your profile stays up-to-date with real-time data, giving visitors a dynamic view of your work without any manual effort.&lt;/p&gt;\n\n&lt;p&gt;---&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This tool is designed for Python developers and GitHub users who want to showcase their project activity, code structure, and commit history visually on their profile. It’s ideal for those who value continuous profile enhancement with minimal maintenance, making it useful for developers focused on building a robust GitHub presence or professionals looking to highlight their coding activity to potential collaborators or employers.&lt;/p&gt;\n\n&lt;p&gt;---&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I havnt seen other tools like this, but by using GitHub Actions, this project ensures that new data is gathered and appended automatically, including in-depth insights such as commit activity heatmaps, word clouds, and code construct counts. This makes it more comprehensive and effortless to maintain than alternatives that require additional steps or only offer limited metrics.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Repo:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/sockheadrps/PyProfileDataGen\"&gt;https://github.com/sockheadrps/PyProfileDataGen&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/sockheadrps\"&gt;https://github.com/sockheadrps&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Youtube Tutorial:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://youtu.be/Ls7sTjXEMiI\"&gt;https://youtu.be/Ls7sTjXEMiI&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/p1FKRvFFGqi7j3UQOtFzCS_cThZsO-N20YUW1LxHgFo.jpg?auto=webp&amp;s=ffa11ae474751493b0b0f98cbac44398a9fbfca2",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/p1FKRvFFGqi7j3UQOtFzCS_cThZsO-N20YUW1LxHgFo.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=d61e09c92e69e79b536201af3fa07189ee87fcb1",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/p1FKRvFFGqi7j3UQOtFzCS_cThZsO-N20YUW1LxHgFo.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=b10a13cca6d62042fc3d037f8240986f16595d24",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/p1FKRvFFGqi7j3UQOtFzCS_cThZsO-N20YUW1LxHgFo.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=1d0a8860e17fcef84566ef8deb97109f5d76a5ad",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/p1FKRvFFGqi7j3UQOtFzCS_cThZsO-N20YUW1LxHgFo.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=bfeb658210e88d85d68d8bf927dac03202286772",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/p1FKRvFFGqi7j3UQOtFzCS_cThZsO-N20YUW1LxHgFo.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=d45ff7f1a7d2a93cb72f780bc3246f454601de50",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/p1FKRvFFGqi7j3UQOtFzCS_cThZsO-N20YUW1LxHgFo.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=78b7f5d4bf41eafdbfd83586097c642219bddc23",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "fJLUIlTdUIFp0dnuz7qUrvSRcfHOpYF07Oy95cXN9_Q"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gr4qkw",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "SpaceBucketFu",
            "discussion_type": null,
            "num_comments": 18,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gr4qkw/make_your_github_profile_more_attractive_as_a/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gr4qkw/make_your_github_profile_more_attractive_as_a/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731590849.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "\n\nHello, fellow Python enthusiasts!\n\nI am interested in exploring Python projects that can search for and identify the best flight options within a specified date range, such as a particular month like April 2024 or a broader range. This type of feature was once handled efficiently by services like Skyscnnr and I would love to find Python tools or open-source projects capable of similar functionality today.\n\nIf you know of any relevant resources, projects, or libraries, I’d greatly appreciate your suggestions!\n\nMany thanks in advance for your input and help!",
            "author_fullname": "t2_9anpjima2",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Python Project Recommendations to Search for Flights in a Specific Time Range",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gqz0h1",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.73,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 5,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 5,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731566922.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello, fellow Python enthusiasts!&lt;/p&gt;\n\n&lt;p&gt;I am interested in exploring Python projects that can search for and identify the best flight options within a specified date range, such as a particular month like April 2024 or a broader range. This type of feature was once handled efficiently by services like Skyscnnr and I would love to find Python tools or open-source projects capable of similar functionality today.&lt;/p&gt;\n\n&lt;p&gt;If you know of any relevant resources, projects, or libraries, I’d greatly appreciate your suggestions!&lt;/p&gt;\n\n&lt;p&gt;Many thanks in advance for your input and help!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gqz0h1",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "TemporaryTemp100",
            "discussion_type": null,
            "num_comments": 1,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gqz0h1/python_project_recommendations_to_search_for/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gqz0h1/python_project_recommendations_to_search_for/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731566922.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# Weekly Thread: Professional Use, Jobs, and Education 🏢\n\nWelcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.\n\n---\n\n## How it Works:\n\n1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.\n2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.\n3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.\n\n---\n\n## Guidelines:\n\n- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.\n- Keep discussions relevant to Python in the professional and educational context.\n  \n---\n\n## Example Topics:\n\n1. **Career Paths**: What kinds of roles are out there for Python developers?\n2. **Certifications**: Are Python certifications worth it?\n3. **Course Recommendations**: Any good advanced Python courses to recommend?\n4. **Workplace Tools**: What Python libraries are indispensable in your professional work?\n5. **Interview Tips**: What types of Python questions are commonly asked in interviews?\n\n---\n\nLet's help each other grow in our careers and education. Happy discussing! 🌟",
            "author_fullname": "t2_6l4z3",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!",
            "link_flair_richtext": [
                {
                    "a": ":pythonLogo:",
                    "e": "emoji",
                    "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                },
                {
                    "e": "text",
                    "t": " Daily Thread"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "daily-thread",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gqriuc",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.55,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 1,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": ":pythonLogo: Daily Thread",
            "can_mod_post": false,
            "score": 1,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": true,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731542409.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: Professional Use, Jobs, and Education 🏢&lt;/h1&gt;\n\n&lt;p&gt;Welcome to this week&amp;#39;s discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is &lt;strong&gt;not for recruitment&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Career Talk&lt;/strong&gt;: Discuss using Python in your job, or the job market for Python roles.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Education Q&amp;amp;A&lt;/strong&gt;: Ask or answer questions about Python courses, certifications, and educational resources.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Workplace Chat&lt;/strong&gt;: Share your experiences, challenges, or success stories about using Python professionally.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;hr/&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This thread is &lt;strong&gt;not for recruitment&lt;/strong&gt;. For job postings, please see &lt;a href=\"/r/PythonJobs\"&gt;r/PythonJobs&lt;/a&gt; or the recruitment thread in the sidebar.&lt;/li&gt;\n&lt;li&gt;Keep discussions relevant to Python in the professional and educational context.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr/&gt;\n\n&lt;h2&gt;Example Topics:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Career Paths&lt;/strong&gt;: What kinds of roles are out there for Python developers?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Certifications&lt;/strong&gt;: Are Python certifications worth it?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Course Recommendations&lt;/strong&gt;: Any good advanced Python courses to recommend?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Workplace Tools&lt;/strong&gt;: What Python libraries are indispensable in your professional work?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Interview Tips&lt;/strong&gt;: What types of Python questions are commonly asked in interviews?&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;Let&amp;#39;s help each other grow in our careers and education. Happy discussing! 🌟&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": "moderator",
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#00a6a5",
            "id": "1gqriuc",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "AutoModerator",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": false,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gqriuc/thursday_daily_thread_python_careers_courses_and/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gqriuc/thursday_daily_thread_python_careers_courses_and/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731542409.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "https://www.techspot.com/news/105557-pypim-new-method-execute-python-code-directly-ram.html\n\nPerformance can be significantly improved when the CPU is not involved",
            "author_fullname": "t2_11axlodwzu",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "PyPIM is a new method to execute Python code directly in RAM",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "News"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "news",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gqpl0s",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.77,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 47,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "News",
            "can_mod_post": false,
            "score": 47,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": true,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731537152.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://www.techspot.com/news/105557-pypim-new-method-execute-python-code-directly-ram.html\"&gt;https://www.techspot.com/news/105557-pypim-new-method-execute-python-code-directly-ram.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Performance can be significantly improved when the CPU is not involved&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/BFgM0NSoLn9L8N0HXn35WbdTmdsx50ysg2W2SWKExIs.jpg?auto=webp&amp;s=a21dd2ed973144d9637eec28d0c9d5fe2f1b91d1",
                            "width": 2000,
                            "height": 1333
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/BFgM0NSoLn9L8N0HXn35WbdTmdsx50ysg2W2SWKExIs.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=f693997374b154c99565803901f8e8454c9e6b73",
                                "width": 108,
                                "height": 71
                            },
                            {
                                "url": "https://external-preview.redd.it/BFgM0NSoLn9L8N0HXn35WbdTmdsx50ysg2W2SWKExIs.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=024b67b25d33b81bec78493ec4698f2e67c9591e",
                                "width": 216,
                                "height": 143
                            },
                            {
                                "url": "https://external-preview.redd.it/BFgM0NSoLn9L8N0HXn35WbdTmdsx50ysg2W2SWKExIs.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=b55052f759629eb327a219dcf08da38b8341b106",
                                "width": 320,
                                "height": 213
                            },
                            {
                                "url": "https://external-preview.redd.it/BFgM0NSoLn9L8N0HXn35WbdTmdsx50ysg2W2SWKExIs.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=12439c8104f76b6e1fda79f4470c63ecc5e7d668",
                                "width": 640,
                                "height": 426
                            },
                            {
                                "url": "https://external-preview.redd.it/BFgM0NSoLn9L8N0HXn35WbdTmdsx50ysg2W2SWKExIs.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=eecf6083901cce00764db74644faaf1a4331ed6a",
                                "width": 960,
                                "height": 639
                            },
                            {
                                "url": "https://external-preview.redd.it/BFgM0NSoLn9L8N0HXn35WbdTmdsx50ysg2W2SWKExIs.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=2cd13f6e3123de3a10bfc7df0aedfa7dca4f7a55",
                                "width": 1080,
                                "height": 719
                            }
                        ],
                        "variants": {},
                        "id": "8lKdQCff95S-JnbO6OzrnzmQ63eqEBf2M-r7O2nAElo"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#7193ff",
            "id": "1gqpl0s",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "gurugabrielpradipaka",
            "discussion_type": null,
            "num_comments": 21,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gqpl0s/pypim_is_a_new_method_to_execute_python_code/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gqpl0s/pypim_is_a_new_method_to_execute_python_code/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731537152.0,
            "num_crossposts": 1,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "This is for a mathematics project that is due next Monday.\n\nI am an undergraduate student in India majoring in mathematics. My professor asked me to present a mathematical solution in form of either a project or a paper.\n\nNow I know I am not going to end up with a paper and I don't even have the time for that left.\n\nThe project was due next month but, you see now I need to do it all in a weekend.\n\nMy core interests are in data science and AI but I am quite open for projects in Business simulation,   Optimization and Finance (professor's core subjects)\n\nProject Ideas that I had ChatGPTed or figured out myself:\n\n1. Performing a Network Analysis on Delhi Metro and finding the shortest routes using networkx (This is the one I was currently doing)\n\n2. Deploying Trade strategies using Stochastic calculus and employing trade indicators on historical data (AKA technical analysis) (Abandoned project from last semester)\n\n3. Creating a cli based Computer Algebra System/Mathematics language that takes up commands and gives back outputs:\n```algebra simplify x^2-4*x\ncalculus integrate y:=sin(x) with respect to x\nplot y^2 == 4x```\n\nI know the third one is silly because many advance tools exist and this will never be able to reach that level of complexity.\n\nI need you all to figure out how I choose a project idea ... \nAny other project idea is also welcomed (primarily from mathematics, data science, machine learning and Finance)",
            "author_fullname": "t2_se53mkii",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Project Ideas needed for mathematics major.",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gqp02i",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.42,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731535597.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;This is for a mathematics project that is due next Monday.&lt;/p&gt;\n\n&lt;p&gt;I am an undergraduate student in India majoring in mathematics. My professor asked me to present a mathematical solution in form of either a project or a paper.&lt;/p&gt;\n\n&lt;p&gt;Now I know I am not going to end up with a paper and I don&amp;#39;t even have the time for that left.&lt;/p&gt;\n\n&lt;p&gt;The project was due next month but, you see now I need to do it all in a weekend.&lt;/p&gt;\n\n&lt;p&gt;My core interests are in data science and AI but I am quite open for projects in Business simulation,   Optimization and Finance (professor&amp;#39;s core subjects)&lt;/p&gt;\n\n&lt;p&gt;Project Ideas that I had ChatGPTed or figured out myself:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Performing a Network Analysis on Delhi Metro and finding the shortest routes using networkx (This is the one I was currently doing)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Deploying Trade strategies using Stochastic calculus and employing trade indicators on historical data (AKA technical analysis) (Abandoned project from last semester)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Creating a cli based Computer Algebra System/Mathematics language that takes up commands and gives back outputs:\n&lt;code&gt;algebra simplify x^2-4*x\ncalculus integrate y:=sin(x) with respect to x\nplot y^2 == 4x&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;I know the third one is silly because many advance tools exist and this will never be able to reach that level of complexity.&lt;/p&gt;\n\n&lt;p&gt;I need you all to figure out how I choose a project idea ... \nAny other project idea is also welcomed (primarily from mathematics, data science, machine learning and Finance)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gqp02i",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "anjulbhatia",
            "discussion_type": null,
            "num_comments": 3,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gqp02i/project_ideas_needed_for_mathematics_major/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gqp02i/project_ideas_needed_for_mathematics_major/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731535597.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# What My Project Does\n\nOver the past week, I have been developing an assembly-like interpreter for my custom language, which I call **AXM**. AXM is intended to resemble assembly language, but with a slightly more accessible syntax. Although the interpreter is currently written in Python and still in its early stages, it serves as a \"toy\" interpreter to test out language design concepts.\n\n# Target Audience\n\nThis project is primarily a **toy** rather than a production-ready tool. It’s not designed for practical applications but rather for exploration and learning. The syntax is heavily inspired by assembly languages but is simplified to make it a bit easier to work with. Anyone interested in language development or assembly-like languages might find it interesting to explore.\n\n# Comparison\n\nAXM is distinct from existing assembly languages because it focuses more on accessibility and is designed to be relatively simple, rather than optimized for performance or real-world use. Unlike traditional assembly, AXM is an interpreted language, allowing users to run code directly without needing to compile it. While there are other interpreters for assembly-inspired languages, AXM aims to balance simplicity with the principles of low-level programming, making it somewhat unique.\n\nAny feedback is greatly appreciated! I’d love to hear thoughts on its potential and any suggestions for improvements.\n\n[https://github.com/KuriWasTaken/AXM](https://github.com/KuriWasTaken/AXM)\n\n  \nEdit: I know the code is very badly formatted and I should add more comments, I will fix this",
            "author_fullname": "t2_f9glfriv",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "[AXM] A simple \"Assembly\"-like interpreter",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gqkzbt",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.67,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 3,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 3,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731525451.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;Over the past week, I have been developing an assembly-like interpreter for my custom language, which I call &lt;strong&gt;AXM&lt;/strong&gt;. AXM is intended to resemble assembly language, but with a slightly more accessible syntax. Although the interpreter is currently written in Python and still in its early stages, it serves as a &amp;quot;toy&amp;quot; interpreter to test out language design concepts.&lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;This project is primarily a &lt;strong&gt;toy&lt;/strong&gt; rather than a production-ready tool. It’s not designed for practical applications but rather for exploration and learning. The syntax is heavily inspired by assembly languages but is simplified to make it a bit easier to work with. Anyone interested in language development or assembly-like languages might find it interesting to explore.&lt;/p&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;AXM is distinct from existing assembly languages because it focuses more on accessibility and is designed to be relatively simple, rather than optimized for performance or real-world use. Unlike traditional assembly, AXM is an interpreted language, allowing users to run code directly without needing to compile it. While there are other interpreters for assembly-inspired languages, AXM aims to balance simplicity with the principles of low-level programming, making it somewhat unique.&lt;/p&gt;\n\n&lt;p&gt;Any feedback is greatly appreciated! I’d love to hear thoughts on its potential and any suggestions for improvements.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/KuriWasTaken/AXM\"&gt;https://github.com/KuriWasTaken/AXM&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Edit: I know the code is very badly formatted and I should add more comments, I will fix this&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/fmNrviGrKvGhc49_Q0Kp1Gs4YnHzr9RszWvcwwFwuFs.jpg?auto=webp&amp;s=fecf12047bb4e4fd9cff4267b5577f7d44fe7563",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/fmNrviGrKvGhc49_Q0Kp1Gs4YnHzr9RszWvcwwFwuFs.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=9c4657eb02f8c33539c93210021077ccd3ee65ad",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/fmNrviGrKvGhc49_Q0Kp1Gs4YnHzr9RszWvcwwFwuFs.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=06bde57542261ecf63f6c8eb21c45690a471e294",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/fmNrviGrKvGhc49_Q0Kp1Gs4YnHzr9RszWvcwwFwuFs.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=c46ab924d5db4a5a26f9c92b26666219ac9da34a",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/fmNrviGrKvGhc49_Q0Kp1Gs4YnHzr9RszWvcwwFwuFs.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=b8614efc43bd3f57bdef385bbcfbfae256c8c3a2",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/fmNrviGrKvGhc49_Q0Kp1Gs4YnHzr9RszWvcwwFwuFs.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=2c5e91811da84f818557a0c04cdc7c473b704815",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/fmNrviGrKvGhc49_Q0Kp1Gs4YnHzr9RszWvcwwFwuFs.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=feb169eca1cb8bc993b684d6f05b0183f92e08e7",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "qBzT_BucYUYaQb1hqj5KLK9Q9Dr-9_ElyGS9L-oCZV4"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gqkzbt",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Kuriwassadlytaken",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gqkzbt/axm_a_simple_assemblylike_interpreter/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gqkzbt/axm_a_simple_assemblylike_interpreter/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731525451.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "https://flask.palletsprojects.com/en/stable/changes/#version-3-1-0\n\n\n\n* Drop support for Python 3.8. #5623\n* Update minimum dependency versions to latest feature releases. Werkzeug &gt;= 3.1, ItsDangerous &gt;= 2.2, Blinker &gt;= 1.9. #5624,5633\n* Provide a configuration option to control automatic option responses. #5496\n* Flask.open_resource/open_instance_resource and Blueprint.open_resource take an encoding parameter to use when opening in text mode. It defaults to utf-8. #5504\n* Request.max_content_length can be customized per-request instead of only through the MAX_CONTENT_LENGTH config. Added MAX_FORM_MEMORY_SIZE and MAX_FORM_PARTS config. Added documentation about resource limits to the security page. #5625\n* Add support for the Partitioned cookie attribute (CHIPS), with the SESSION_COOKIE_PARTITIONED config. #5472\n* -e path takes precedence over default .env and .flaskenv files. load_dotenv loads default files in addition to a path unless load_defaults=False is passed. #5628\n* Support key rotation with the SECRET_KEY_FALLBACKS config, a list of old secret keys that can still be used for unsigning. Extensions will need to add support. #5621\n* Fix how setting host_matching=True or subdomain_matching=False interacts with SERVER_NAME. Setting SERVER_NAME no longer restricts requests to only that domain. #5553\n* Request.trusted_hosts is checked during routing, and can be set through the TRUSTED_HOSTS config. #5636",
            "author_fullname": "t2_3bdif8p",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Flask 3.1.0 Released",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "News"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "news",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gqjytv",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.93,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 66,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "News",
            "can_mod_post": false,
            "score": 66,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731522955.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://flask.palletsprojects.com/en/stable/changes/#version-3-1-0\"&gt;https://flask.palletsprojects.com/en/stable/changes/#version-3-1-0&lt;/a&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Drop support for Python 3.8. #5623&lt;/li&gt;\n&lt;li&gt;Update minimum dependency versions to latest feature releases. Werkzeug &amp;gt;= 3.1, ItsDangerous &amp;gt;= 2.2, Blinker &amp;gt;= 1.9. #5624,5633&lt;/li&gt;\n&lt;li&gt;Provide a configuration option to control automatic option responses. #5496&lt;/li&gt;\n&lt;li&gt;Flask.open_resource/open_instance_resource and Blueprint.open_resource take an encoding parameter to use when opening in text mode. It defaults to utf-8. #5504&lt;/li&gt;\n&lt;li&gt;Request.max_content_length can be customized per-request instead of only through the MAX_CONTENT_LENGTH config. Added MAX_FORM_MEMORY_SIZE and MAX_FORM_PARTS config. Added documentation about resource limits to the security page. #5625&lt;/li&gt;\n&lt;li&gt;Add support for the Partitioned cookie attribute (CHIPS), with the SESSION_COOKIE_PARTITIONED config. #5472&lt;/li&gt;\n&lt;li&gt;-e path takes precedence over default .env and .flaskenv files. load_dotenv loads default files in addition to a path unless load_defaults=False is passed. #5628&lt;/li&gt;\n&lt;li&gt;Support key rotation with the SECRET_KEY_FALLBACKS config, a list of old secret keys that can still be used for unsigning. Extensions will need to add support. #5621&lt;/li&gt;\n&lt;li&gt;Fix how setting host_matching=True or subdomain_matching=False interacts with SERVER_NAME. Setting SERVER_NAME no longer restricts requests to only that domain. #5553&lt;/li&gt;\n&lt;li&gt;Request.trusted_hosts is checked during routing, and can be set through the TRUSTED_HOSTS config. #5636&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#7193ff",
            "id": "1gqjytv",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "chinawcswing",
            "discussion_type": null,
            "num_comments": 1,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gqjytv/flask_310_released/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gqjytv/flask_310_released/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731522955.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hello r/Python!\n\nThought I'd share extractous, a new document extraction library that processes documents up to 20x faster than existing solutions.\n\n**What The Project Does**\n\nExtractous is a high-performance document extraction library that processes PDFs, Word documents, HTML, and many other formats with native speed. It's built with a Rust core and uses GraalVM to compile Tika components to native code, eliminating the need for external services or JVM runtime.\n\n  \n**Performance**\n\n* Extracted Apple's 10-K filing in 320ms vs unstructured-io's 8.2s\n* Average 18x faster across SEC filings dataset\n* Significantly lower memory footprint\n\n  \n**Quick Start**\n\n`pip install extractous` \n\n    from extractous import Extractor\n    \n    extractor = Extractor()\n    result = extractor.extract_file_to_string(\"document.pdf\")\n    print(result)\n\n  \n**Target Audience**\n\n* Anyone using tika-python or unstructured-io who needs better performance\n* Large-scale document processing\n* RAG (Retrieval Augmented Generation) pipelines\n* AI/ML document preprocessing\n\n**Comparison**\n\n* **tika-python** \\- Popular Apache Tika binding. Extractous offers native performance without JVM overhead\n* **unstructured-io** \\- Popular document processing library. Extractous is 18x faster and uses significantly less memory\n* **textract** \\- Extractous provides similar functionality but with native speed and modern architecture\n\n**Features**\n\n* Support for numerous formats (PDF, Word, HTML, Images with OCR, etc.)\n* Simple Python API\n* No external API services or JVM required\n* Free for commercial use (Apache 2.0)\n* Memory efficient through Rust ownership model\n\n**Coming Soon**\n\n* XHTML output support\n* Enhanced file metadata extraction\n* GIL-bypassing batch processing API for parallel workloads\n\n  \n**Repo**  \n[https://github.com/yobix-ai/extractous](https://github.com/yobix-ai/extractous)\n\n**Try it online (free)**   \n[https://www.extractous.com/](https://www.extractous.com/)",
            "author_fullname": "t2_19dvrkfn",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "extractous - fast data extraction with a rust core + tika native libs compiled through graalvm",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gqi6bg",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.95,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 43,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 43,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731518542.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello &lt;a href=\"/r/Python\"&gt;r/Python&lt;/a&gt;!&lt;/p&gt;\n\n&lt;p&gt;Thought I&amp;#39;d share extractous, a new document extraction library that processes documents up to 20x faster than existing solutions.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What The Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Extractous is a high-performance document extraction library that processes PDFs, Word documents, HTML, and many other formats with native speed. It&amp;#39;s built with a Rust core and uses GraalVM to compile Tika components to native code, eliminating the need for external services or JVM runtime.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Extracted Apple&amp;#39;s 10-K filing in 320ms vs unstructured-io&amp;#39;s 8.2s&lt;/li&gt;\n&lt;li&gt;Average 18x faster across SEC filings dataset&lt;/li&gt;\n&lt;li&gt;Significantly lower memory footprint&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Quick Start&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;pip install extractous&lt;/code&gt; &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from extractous import Extractor\n\nextractor = Extractor()\nresult = extractor.extract_file_to_string(&amp;quot;document.pdf&amp;quot;)\nprint(result)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Anyone using tika-python or unstructured-io who needs better performance&lt;/li&gt;\n&lt;li&gt;Large-scale document processing&lt;/li&gt;\n&lt;li&gt;RAG (Retrieval Augmented Generation) pipelines&lt;/li&gt;\n&lt;li&gt;AI/ML document preprocessing&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;tika-python&lt;/strong&gt; - Popular Apache Tika binding. Extractous offers native performance without JVM overhead&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;unstructured-io&lt;/strong&gt; - Popular document processing library. Extractous is 18x faster and uses significantly less memory&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;textract&lt;/strong&gt; - Extractous provides similar functionality but with native speed and modern architecture&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Support for numerous formats (PDF, Word, HTML, Images with OCR, etc.)&lt;/li&gt;\n&lt;li&gt;Simple Python API&lt;/li&gt;\n&lt;li&gt;No external API services or JVM required&lt;/li&gt;\n&lt;li&gt;Free for commercial use (Apache 2.0)&lt;/li&gt;\n&lt;li&gt;Memory efficient through Rust ownership model&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Coming Soon&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;XHTML output support&lt;/li&gt;\n&lt;li&gt;Enhanced file metadata extraction&lt;/li&gt;\n&lt;li&gt;GIL-bypassing batch processing API for parallel workloads&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Repo&lt;/strong&gt;&lt;br/&gt;\n&lt;a href=\"https://github.com/yobix-ai/extractous\"&gt;https://github.com/yobix-ai/extractous&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Try it online (free)&lt;/strong&gt;&lt;br/&gt;\n&lt;a href=\"https://www.extractous.com/\"&gt;https://www.extractous.com/&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/RiMR4JRWpy8iqUEvUPXJv-HhdV19wceMuHEEp9uCxAc.jpg?auto=webp&amp;s=a845b60f3b37ac0e578fca2b69b210a7347eedbc",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/RiMR4JRWpy8iqUEvUPXJv-HhdV19wceMuHEEp9uCxAc.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=0c6638774f3bc69d274a4ec49d48b30ca91ed63d",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/RiMR4JRWpy8iqUEvUPXJv-HhdV19wceMuHEEp9uCxAc.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=6d00f188fd0f25bef9fe17797eaf3a4bd5643f6e",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/RiMR4JRWpy8iqUEvUPXJv-HhdV19wceMuHEEp9uCxAc.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=7fc043c3ffb6ca7665038e2966788c9a291e04bf",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/RiMR4JRWpy8iqUEvUPXJv-HhdV19wceMuHEEp9uCxAc.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=a55bd945fa1e916b226d02ffcc530668d863d968",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/RiMR4JRWpy8iqUEvUPXJv-HhdV19wceMuHEEp9uCxAc.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=d7c97b432c31b1b856f02e0c15d248f05e06de9f",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/RiMR4JRWpy8iqUEvUPXJv-HhdV19wceMuHEEp9uCxAc.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=c292e581e7550ae6e95c0795dde8d2375036a2e5",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "pm8ZiB6bKJzxVbFJXUIM8MNt014SSk9JEX_C5GMak2g"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gqi6bg",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "drogubert",
            "discussion_type": null,
            "num_comments": 12,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gqi6bg/extractous_fast_data_extraction_with_a_rust_core/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gqi6bg/extractous_fast_data_extraction_with_a_rust_core/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731518542.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Which is better, Visual Studio Code or Cycharm?\n\nIn terms of tools and ease of use, I currently use Cycharm, but I find it difficult to organise files.\n\n",
            "author_fullname": "t2_nrd76cew",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "What is the better programme to Learn ",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Resource"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "resource",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gqi4tv",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.23,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Resource",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1731520833.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731518442.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Which is better, Visual Studio Code or Cycharm?&lt;/p&gt;\n\n&lt;p&gt;In terms of tools and ease of use, I currently use Cycharm, but I find it difficult to organise files.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ddbd37",
            "id": "1gqi4tv",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "ccvrdd",
            "discussion_type": null,
            "num_comments": 7,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gqi4tv/what_is_the_better_programme_to_learn/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gqi4tv/what_is_the_better_programme_to_learn/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731518442.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "uv is rapidly maturing as an open-source tool for Python project management, reaching a full-featured capabilities with recent versions 0.4.27 and 0.5.0, making it a strong alternative to Poetry, pyenv, and pipx. However, concerns exist over its long-term stability and licensing, given Astral's venture funding position.\n\nhttps://open.substack.com/pub/martynassubonis/p/python-project-management-primer-a55",
            "author_fullname": "t2_17h8mq",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "uv after 0.5.0 - might be worth replacing Poetry/pyenv/pipx",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "News"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "news",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gqh4te",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.93,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 371,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "News",
            "can_mod_post": false,
            "score": 371,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731515982.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;uv is rapidly maturing as an open-source tool for Python project management, reaching a full-featured capabilities with recent versions 0.4.27 and 0.5.0, making it a strong alternative to Poetry, pyenv, and pipx. However, concerns exist over its long-term stability and licensing, given Astral&amp;#39;s venture funding position.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://open.substack.com/pub/martynassubonis/p/python-project-management-primer-a55\"&gt;https://open.substack.com/pub/martynassubonis/p/python-project-management-primer-a55&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/rY9pf3tpDVGzwfJyu2WxpsK_23Pi47RFeuCZuUKcNR0.jpg?auto=webp&amp;s=da246b258bcbaf5841a06919abbe57fbe511346b",
                            "width": 1024,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/rY9pf3tpDVGzwfJyu2WxpsK_23Pi47RFeuCZuUKcNR0.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=1ea2be16fa22f91636868eea4818cff5f283bae5",
                                "width": 108,
                                "height": 63
                            },
                            {
                                "url": "https://external-preview.redd.it/rY9pf3tpDVGzwfJyu2WxpsK_23Pi47RFeuCZuUKcNR0.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=5eef66b9d3dbd70a0d2892ccf22d15eade70b8ea",
                                "width": 216,
                                "height": 126
                            },
                            {
                                "url": "https://external-preview.redd.it/rY9pf3tpDVGzwfJyu2WxpsK_23Pi47RFeuCZuUKcNR0.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=2241686618bb771e94aa86084ec88898f8efab13",
                                "width": 320,
                                "height": 187
                            },
                            {
                                "url": "https://external-preview.redd.it/rY9pf3tpDVGzwfJyu2WxpsK_23Pi47RFeuCZuUKcNR0.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=37f612e48d5f0108bc5c1151a676dea0da108e2c",
                                "width": 640,
                                "height": 375
                            },
                            {
                                "url": "https://external-preview.redd.it/rY9pf3tpDVGzwfJyu2WxpsK_23Pi47RFeuCZuUKcNR0.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=029f977e6a62479072c2a5bdcf7d6f5ebbd511c6",
                                "width": 960,
                                "height": 562
                            }
                        ],
                        "variants": {},
                        "id": "LWW3foOjWcHMqrqiUhH_Gi-bFIQLUIjb7DyiWlOOQa4"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#7193ff",
            "id": "1gqh4te",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Martynoas",
            "discussion_type": null,
            "num_comments": 122,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gqh4te/uv_after_050_might_be_worth_replacing/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gqh4te/uv_after_050_might_be_worth_replacing/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731515982.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "We have traditionally used Django in all our products. We believe it is one of the most underrated, beautifully designed, rock solid framework out there.\n\nHowever, if we are to be honest, the history of async usage in Django wasn't very impressive. You could argue that for most products, you don’t really need async. It was just an extra layer of complexity without any significant practical benefit.\n\nOver the last couple of years, AI use-cases have changed that perception. Many AI products have calling external APIs over the network as their bottleneck. This makes the complexity from async Python worth considering. FastAPI with its intuitive async usage and simplicity have risen to be the default API/web layer for AI projects.\n\nI wrote about using async Django in a relatively complex AI open source project here: [https://jonathanadly.com/is-async-django-ready-for-prime-time](https://jonathanadly.com/is-async-django-ready-for-prime-time)\n\ntldr: Async django is ready! there is a couple of gotcha's here and there, but there should be no performance loss when using async Django instead of FastAPI for the same tasks. Django's built-in features greatly simplify and enhance the developer experience.\n\nSo - go ahead and use async Django in your next project. It should be a lot smoother that it was a year or even six months ago.",
            "author_fullname": "t2_beisr53n",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Is async django ready for prime time? Our async django production experience",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Resource"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "resource",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gqg8q2",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.94,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 67,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Resource",
            "can_mod_post": false,
            "score": 67,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731513771.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;We have traditionally used Django in all our products. We believe it is one of the most underrated, beautifully designed, rock solid framework out there.&lt;/p&gt;\n\n&lt;p&gt;However, if we are to be honest, the history of async usage in Django wasn&amp;#39;t very impressive. You could argue that for most products, you don’t really need async. It was just an extra layer of complexity without any significant practical benefit.&lt;/p&gt;\n\n&lt;p&gt;Over the last couple of years, AI use-cases have changed that perception. Many AI products have calling external APIs over the network as their bottleneck. This makes the complexity from async Python worth considering. FastAPI with its intuitive async usage and simplicity have risen to be the default API/web layer for AI projects.&lt;/p&gt;\n\n&lt;p&gt;I wrote about using async Django in a relatively complex AI open source project here: &lt;a href=\"https://jonathanadly.com/is-async-django-ready-for-prime-time\"&gt;https://jonathanadly.com/is-async-django-ready-for-prime-time&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;tldr: Async django is ready! there is a couple of gotcha&amp;#39;s here and there, but there should be no performance loss when using async Django instead of FastAPI for the same tasks. Django&amp;#39;s built-in features greatly simplify and enhance the developer experience.&lt;/p&gt;\n\n&lt;p&gt;So - go ahead and use async Django in your next project. It should be a lot smoother that it was a year or even six months ago.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/qQ7iHs2_7EVhyKRPagUrZ3726hf1Fs-uA46SIvKXeyg.jpg?auto=webp&amp;s=fe0b31c031db9e84cc731313a37d7415a126c2c9",
                            "width": 1200,
                            "height": 630
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/qQ7iHs2_7EVhyKRPagUrZ3726hf1Fs-uA46SIvKXeyg.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=57ce12831514173bbd613d7d437e14daf860351e",
                                "width": 108,
                                "height": 56
                            },
                            {
                                "url": "https://external-preview.redd.it/qQ7iHs2_7EVhyKRPagUrZ3726hf1Fs-uA46SIvKXeyg.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2dc7d40266e1f635a76bdbe0ce83d8cfadc2322b",
                                "width": 216,
                                "height": 113
                            },
                            {
                                "url": "https://external-preview.redd.it/qQ7iHs2_7EVhyKRPagUrZ3726hf1Fs-uA46SIvKXeyg.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=18ac21d7b752fecb5c91cea678cc442bdfa5ee0c",
                                "width": 320,
                                "height": 168
                            },
                            {
                                "url": "https://external-preview.redd.it/qQ7iHs2_7EVhyKRPagUrZ3726hf1Fs-uA46SIvKXeyg.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=ccb7d3036089f9fc9ba8dcf8550031074fa4c5bc",
                                "width": 640,
                                "height": 336
                            },
                            {
                                "url": "https://external-preview.redd.it/qQ7iHs2_7EVhyKRPagUrZ3726hf1Fs-uA46SIvKXeyg.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=5ee35d589890960f07bc5416adc9fc05ce042957",
                                "width": 960,
                                "height": 504
                            },
                            {
                                "url": "https://external-preview.redd.it/qQ7iHs2_7EVhyKRPagUrZ3726hf1Fs-uA46SIvKXeyg.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=b2e4e2a16982cfdcdd31043574e32f879bc6dffd",
                                "width": 1080,
                                "height": 567
                            }
                        ],
                        "variants": {},
                        "id": "DQp54mgUT6wslTwAFD8XIckqFEMu7fwmTdlaiX8LgA0"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ddbd37",
            "id": "1gqg8q2",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Vegetable_Study3730",
            "discussion_type": null,
            "num_comments": 10,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gqg8q2/is_async_django_ready_for_prime_time_our_async/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gqg8q2/is_async_django_ready_for_prime_time_our_async/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731513771.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "**Motivation:**  \nHey everyone! Last Sunday, I shared the first version of my project, *Netfly Subtitle Converter :* [https://www.reddit.com/r/Python/comments/1gny0ew/built\\_this\\_over\\_the\\_weekend\\_netflix\\_subtitle/](https://www.reddit.com/r/Python/comments/1gny0ew/built_this_over_the_weekend_netflix_subtitle/), which came out of a personal need to watch Japanese shows on Netflix with English subtitles when they weren’t available. I was blown away by the response and genuinely grateful for all the feedback – it made me take a step back and rethink my approach. To everyone who commented and upvoted, a big thank you! The insights helped me take this project to the next level and I'm pleased to share with you all the next iteration of this project.\n\n**What Does This Project Do?**  \n*Netfly Subtitle Converter* takes Japanese subtitles from Netflix, translates them into English ( currently both the source language and the target language are hard coded ) , and syncs them with the video for real-time viewing. Initially, I used Google Cloud Vision to extract text from video frames and AWS Translate for translation. It worked, but as some of you pointed out, this method wasn’t exactly scalable or efficient. It was costly as well - storing frames in S3, sending them across to Vision API and then using AWS translate. While I had both AWS Credits and Google Credits to cover this up, I got the notion that eventually this will burn a hole in my pocket.\n\n**High-Level Solution:**  \nAfter reading through the suggestions, I realized there was a much better approach. Many of you suggested looking into directly extracting the subtitle files instead of using computer vision. That led me to find a way to download the original XML subtitle file from Netflix ( again thanks to a sub reddit and the post was over 9 years old - even I'm quite surprised that the approach still works ). This XML file has everything I need: the Japanese text along with start and end times. Now, by using XPath, I can easily navigate through the XML to pull out the Japanese subtitles, which I then send to AWS Translate for English output. The whole process is now much simpler, scalable, and cost-effective – it’s a solution that feels more aligned with real-world needs.\n\n**Target Audience:**  \nI initially built this for my personal use, but it’s also ideal for any fan of Japanese anime with limited Japanese proficiency. Additionally, anyone interested in working with libraries like lxml (Python's XML and XPath parsing library) and AWS tools such as AWS Translate, as well as the boto3 SDK, may find this project a valuable hands-on learning experience.\n\n**Comparison with Similar Tools:**  \nWhile there are Chrome extensions that overlay dual-language subtitles on Netflix, they require both Japanese and English subtitles to be available. My case was different – there were no English subtitles available, necessitating a unique approach.\n\n**What’s Next?**  \nRight now, downloading the XML subtitle file requires a manual step – I have to go to Netflix and fetch it for each show. To make this more automated, I’m working on a Playwright script that will pull these files automatically. It’s still a work in progress, but I’m excited to see how far I can take it.\n\n**Demo / Screenshots**\n\n[https://imgur.com/a/bWHRK5H](https://imgur.com/a/bWHRK5H)  \n[https://imgur.com/a/pJ6Pnoc](https://imgur.com/a/pJ6Pnoc)\n\n**Github URL:**   \n[https://github.com/Anubhav9/Netfly-subtitle-converter-xml-approach/](https://github.com/Anubhav9/Netfly-subtitle-converter-xml-approach/)  \n  \nCheers, and thank you !",
            "author_fullname": "t2_md8lakdu",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Netflix Subtitle Translator: The XPath Solution - Refined Around Office Hours",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gqfcbh",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.82,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 16,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 16,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731511462.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Motivation:&lt;/strong&gt;&lt;br/&gt;\nHey everyone! Last Sunday, I shared the first version of my project, &lt;em&gt;Netfly Subtitle Converter :&lt;/em&gt; &lt;a href=\"https://www.reddit.com/r/Python/comments/1gny0ew/built_this_over_the_weekend_netflix_subtitle/\"&gt;https://www.reddit.com/r/Python/comments/1gny0ew/built_this_over_the_weekend_netflix_subtitle/&lt;/a&gt;, which came out of a personal need to watch Japanese shows on Netflix with English subtitles when they weren’t available. I was blown away by the response and genuinely grateful for all the feedback – it made me take a step back and rethink my approach. To everyone who commented and upvoted, a big thank you! The insights helped me take this project to the next level and I&amp;#39;m pleased to share with you all the next iteration of this project.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What Does This Project Do?&lt;/strong&gt;&lt;br/&gt;\n&lt;em&gt;Netfly Subtitle Converter&lt;/em&gt; takes Japanese subtitles from Netflix, translates them into English ( currently both the source language and the target language are hard coded ) , and syncs them with the video for real-time viewing. Initially, I used Google Cloud Vision to extract text from video frames and AWS Translate for translation. It worked, but as some of you pointed out, this method wasn’t exactly scalable or efficient. It was costly as well - storing frames in S3, sending them across to Vision API and then using AWS translate. While I had both AWS Credits and Google Credits to cover this up, I got the notion that eventually this will burn a hole in my pocket.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;High-Level Solution:&lt;/strong&gt;&lt;br/&gt;\nAfter reading through the suggestions, I realized there was a much better approach. Many of you suggested looking into directly extracting the subtitle files instead of using computer vision. That led me to find a way to download the original XML subtitle file from Netflix ( again thanks to a sub reddit and the post was over 9 years old - even I&amp;#39;m quite surprised that the approach still works ). This XML file has everything I need: the Japanese text along with start and end times. Now, by using XPath, I can easily navigate through the XML to pull out the Japanese subtitles, which I then send to AWS Translate for English output. The whole process is now much simpler, scalable, and cost-effective – it’s a solution that feels more aligned with real-world needs.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience:&lt;/strong&gt;&lt;br/&gt;\nI initially built this for my personal use, but it’s also ideal for any fan of Japanese anime with limited Japanese proficiency. Additionally, anyone interested in working with libraries like lxml (Python&amp;#39;s XML and XPath parsing library) and AWS tools such as AWS Translate, as well as the boto3 SDK, may find this project a valuable hands-on learning experience.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison with Similar Tools:&lt;/strong&gt;&lt;br/&gt;\nWhile there are Chrome extensions that overlay dual-language subtitles on Netflix, they require both Japanese and English subtitles to be available. My case was different – there were no English subtitles available, necessitating a unique approach.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What’s Next?&lt;/strong&gt;&lt;br/&gt;\nRight now, downloading the XML subtitle file requires a manual step – I have to go to Netflix and fetch it for each show. To make this more automated, I’m working on a Playwright script that will pull these files automatically. It’s still a work in progress, but I’m excited to see how far I can take it.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Demo / Screenshots&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://imgur.com/a/bWHRK5H\"&gt;https://imgur.com/a/bWHRK5H&lt;/a&gt;&lt;br/&gt;\n&lt;a href=\"https://imgur.com/a/pJ6Pnoc\"&gt;https://imgur.com/a/pJ6Pnoc&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Github URL:&lt;/strong&gt;&lt;br/&gt;\n&lt;a href=\"https://github.com/Anubhav9/Netfly-subtitle-converter-xml-approach/\"&gt;https://github.com/Anubhav9/Netfly-subtitle-converter-xml-approach/&lt;/a&gt;  &lt;/p&gt;\n\n&lt;p&gt;Cheers, and thank you !&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/DSif3VdzFTJWd_egazsRkN_J6GgERB6bR0qFECR7ubQ.jpg?auto=webp&amp;s=6a2b2d67fe69404d3a138ab54318ec1e5bad6fbc",
                            "width": 2240,
                            "height": 1252
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/DSif3VdzFTJWd_egazsRkN_J6GgERB6bR0qFECR7ubQ.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=878092eea1720fdbd43070a7235c3a53ef80fa78",
                                "width": 108,
                                "height": 60
                            },
                            {
                                "url": "https://external-preview.redd.it/DSif3VdzFTJWd_egazsRkN_J6GgERB6bR0qFECR7ubQ.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=a340f2de4748e2cfd66995636b86cd368734a291",
                                "width": 216,
                                "height": 120
                            },
                            {
                                "url": "https://external-preview.redd.it/DSif3VdzFTJWd_egazsRkN_J6GgERB6bR0qFECR7ubQ.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=9c1434fbf89883e3b6bd68ed6e00392a77968737",
                                "width": 320,
                                "height": 178
                            },
                            {
                                "url": "https://external-preview.redd.it/DSif3VdzFTJWd_egazsRkN_J6GgERB6bR0qFECR7ubQ.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=730cb10c3b62e258d4127112efcb198716234afe",
                                "width": 640,
                                "height": 357
                            },
                            {
                                "url": "https://external-preview.redd.it/DSif3VdzFTJWd_egazsRkN_J6GgERB6bR0qFECR7ubQ.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=3bc1b204846caf01cc4ca5ea192c1877281d894d",
                                "width": 960,
                                "height": 536
                            },
                            {
                                "url": "https://external-preview.redd.it/DSif3VdzFTJWd_egazsRkN_J6GgERB6bR0qFECR7ubQ.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=043bfa934048596a2ff66f645b8d4abf89f7b3ee",
                                "width": 1080,
                                "height": 603
                            }
                        ],
                        "variants": {},
                        "id": "UGeL6FHMGWPDW6guHQBOAm1gVIAQo-rO_POrAN5lYwM"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gqfcbh",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Content_Ad_4153",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gqfcbh/netflix_subtitle_translator_the_xpath_solution/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gqfcbh/netflix_subtitle_translator_the_xpath_solution/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731511462.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "The general availability of Expedite v0.1.0 is announced with great pleasure. This project has been posted about in this subreddit [here](https://www.reddit.com/r/Python/comments/1dx7qqb/introducing_expedite_a_simple_encrypted_file/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button) and [here](https://www.reddit.com/r/Python/comments/1ea5av1/introducing_expedite_bridge_a_simple_encrypted/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button) and your feedback has been crucial in shaping up its first beta release. The project will continue to be developed to ensure that features get introduced and bugs get fixed timely.\n\n# Recap\n\n**Expedite** is a simple encrypted file transfer service that allows people to share synchronously assets among each other without having to rely on third party file sharing services (and constantly worrying about how their data might be used) or feeling the need to have publicly visible IP addresses (and constantly worrying about script kiddies attacking your computer).\n\n**Expedite Server** can be deployed on a virtual private server having an IP address that is discoverable by the **Expedite Client** users to broker file contents. The transfers facilitated using **WebSockets** are end-to-end encrypted with the use of **128-bit Advanced Encryption Standard** and the server is restricted to logging only unidentifiable activities to the volatile memory.\n\n# Illustrations\n\n* Expedite Bridge\n   * [https://github.com/gridhead/expedite/blob/main/data/bridge-recv-prog.gif](https://github.com/gridhead/expedite/blob/main/data/bridge-recv-prog.gif)\n   * [https://github.com/gridhead/expedite/blob/main/data/bridge-send-prog.gif](https://github.com/gridhead/expedite/blob/main/data/bridge-send-prog.gif)\n* Expedite Prompt\n   * [https://github.com/gridhead/expedite/blob/main/data/prompt-recv-prog.gif](https://github.com/gridhead/expedite/blob/main/data/prompt-recv-prog.gif)\n   * [https://github.com/gridhead/expedite/blob/main/data/prompt-send-prog.gif](https://github.com/gridhead/expedite/blob/main/data/prompt-send-prog.gif)\n\n# Attempting\n\nIf this looks exciting to you, please consider giving the project a spin using the [publicly available servers](https://github.com/gridhead/expedite?tab=readme-ov-file#offerings) and let me know how I can further improve the project by [filing](https://github.com/gridhead/expedite/issues) issue tickets for software errors or feature requests. [Starring](https://github.com/gridhead/expedite/stargazers) the project repository, [contributing](https://github.com/gridhead/expedite/fork) to the codebase or [sponsoring](https://github.com/sponsors/gridhead) me to keep working on more FOSS projects would forever be greatly appreciated! &lt;3\n\n# Resources\n\n* [Gridhead - GitHub Sponsors](https://github.com/sponsors/gridhead)\n* [Expedite - GitHub](https://github.com/gridhead/expedite)\n   * [Expedite v0.1.0](https://github.com/gridhead/expedite/releases/tag/0.1.0)\n      * [Expedite Bridge for GNU/Linux Distributions](https://github.com/gridhead/expedite/releases/download/0.1.0/ed-bridge-v0.1.0.gnul)\n      * [Expedite Bridge for Microsoft Windows](https://github.com/gridhead/expedite/releases/download/0.1.0/ed-bridge-v0.1.0.mswn.exe)\n      * [Expedite Prompt for GNU/Linux Distributions](https://github.com/gridhead/expedite/releases/download/0.1.0/ed-prompt-v0.1.0.gnul)\n      * [Expedite Prompt for Microsoft Windows](https://github.com/gridhead/expedite/releases/download/0.1.0/ed-prompt-v0.1.0.mswn.exe)\n      * [Expedite Server for GNU/Linux Distributions](https://github.com/gridhead/expedite/releases/download/0.1.0/ed-server-v0.1.0.gnul)\n      * [Expedite Server for Microsoft Windows](https://github.com/gridhead/expedite/releases/download/0.1.0/ed-server-v0.1.0.mswn.exe)\n* [Expedite - PyPI](https://pypi.org/project/expedite/)\n   * [Expedite v0.1.0](https://pypi.org/project/expedite/0.1.0)\n      * [Source Distribution](https://files.pythonhosted.org/packages/b2/dc/30122a5be523dafe7aac10e555a551bdc2afb362b36daa7a26d884d89acc/expedite-0.1.0.tar.gz)\n      * [Built Distribution](https://files.pythonhosted.org/packages/21/dd/e7e7875ae1640a2b67c2f39e89b8c99be54c5bfd027fb0c81807b8c01350/expedite-0.1.0-py3-none-any.whl)\n* [Expedite - Docker Hub](https://hub.docker.com/r/t0xic0der/expedite)\n   * [Expedite v0.1.0](https://hub.docker.com/layers/t0xic0der/expedite/v0.1.0/images/sha256-974ffa35104e81d5eebb3b92444cfe02871dd749e6339a7af01e059987cd35f5?context=explore)\n\n# Roadmap\n\n1. Establish testing of the functional part of the codebase\n2. Post average latency for diagnostic information\n3. Attempt reconnecting of websockets object after connection drop\n4. Show IP addresses at the server end in the logging only\n5. Allow files to be added using the drag-and-drop action to the batch\n6. Port the project to the recent asyncio based implementation of websockets\n7. Allow for the transfer operation to happen in batches\n8. Ensure whether the logging configuration is indeed applied or not \n9. Use generator for optimizing reading and writing files\n10. Update the connection timeout logic to the newer codebase",
            "author_fullname": "t2_68q3mnyt",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Expedite v0.1.0 is out now on PyPI",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "News"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "news",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gqeqqb",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.72,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 12,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "News",
            "can_mod_post": false,
            "score": 12,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731509894.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The general availability of Expedite v0.1.0 is announced with great pleasure. This project has been posted about in this subreddit &lt;a href=\"https://www.reddit.com/r/Python/comments/1dx7qqb/introducing_expedite_a_simple_encrypted_file/?utm_source=share&amp;amp;utm_medium=web3x&amp;amp;utm_name=web3xcss&amp;amp;utm_term=1&amp;amp;utm_content=share_button\"&gt;here&lt;/a&gt; and &lt;a href=\"https://www.reddit.com/r/Python/comments/1ea5av1/introducing_expedite_bridge_a_simple_encrypted/?utm_source=share&amp;amp;utm_medium=web3x&amp;amp;utm_name=web3xcss&amp;amp;utm_term=1&amp;amp;utm_content=share_button\"&gt;here&lt;/a&gt; and your feedback has been crucial in shaping up its first beta release. The project will continue to be developed to ensure that features get introduced and bugs get fixed timely.&lt;/p&gt;\n\n&lt;h1&gt;Recap&lt;/h1&gt;\n\n&lt;p&gt;&lt;strong&gt;Expedite&lt;/strong&gt; is a simple encrypted file transfer service that allows people to share synchronously assets among each other without having to rely on third party file sharing services (and constantly worrying about how their data might be used) or feeling the need to have publicly visible IP addresses (and constantly worrying about script kiddies attacking your computer).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Expedite Server&lt;/strong&gt; can be deployed on a virtual private server having an IP address that is discoverable by the &lt;strong&gt;Expedite Client&lt;/strong&gt; users to broker file contents. The transfers facilitated using &lt;strong&gt;WebSockets&lt;/strong&gt; are end-to-end encrypted with the use of &lt;strong&gt;128-bit Advanced Encryption Standard&lt;/strong&gt; and the server is restricted to logging only unidentifiable activities to the volatile memory.&lt;/p&gt;\n\n&lt;h1&gt;Illustrations&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Expedite Bridge\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/gridhead/expedite/blob/main/data/bridge-recv-prog.gif\"&gt;https://github.com/gridhead/expedite/blob/main/data/bridge-recv-prog.gif&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/gridhead/expedite/blob/main/data/bridge-send-prog.gif\"&gt;https://github.com/gridhead/expedite/blob/main/data/bridge-send-prog.gif&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Expedite Prompt\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/gridhead/expedite/blob/main/data/prompt-recv-prog.gif\"&gt;https://github.com/gridhead/expedite/blob/main/data/prompt-recv-prog.gif&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/gridhead/expedite/blob/main/data/prompt-send-prog.gif\"&gt;https://github.com/gridhead/expedite/blob/main/data/prompt-send-prog.gif&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Attempting&lt;/h1&gt;\n\n&lt;p&gt;If this looks exciting to you, please consider giving the project a spin using the &lt;a href=\"https://github.com/gridhead/expedite?tab=readme-ov-file#offerings\"&gt;publicly available servers&lt;/a&gt; and let me know how I can further improve the project by &lt;a href=\"https://github.com/gridhead/expedite/issues\"&gt;filing&lt;/a&gt; issue tickets for software errors or feature requests. &lt;a href=\"https://github.com/gridhead/expedite/stargazers\"&gt;Starring&lt;/a&gt; the project repository, &lt;a href=\"https://github.com/gridhead/expedite/fork\"&gt;contributing&lt;/a&gt; to the codebase or &lt;a href=\"https://github.com/sponsors/gridhead\"&gt;sponsoring&lt;/a&gt; me to keep working on more FOSS projects would forever be greatly appreciated! &amp;lt;3&lt;/p&gt;\n\n&lt;h1&gt;Resources&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/sponsors/gridhead\"&gt;Gridhead - GitHub Sponsors&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/gridhead/expedite\"&gt;Expedite - GitHub&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/gridhead/expedite/releases/tag/0.1.0\"&gt;Expedite v0.1.0&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/gridhead/expedite/releases/download/0.1.0/ed-bridge-v0.1.0.gnul\"&gt;Expedite Bridge for GNU/Linux Distributions&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/gridhead/expedite/releases/download/0.1.0/ed-bridge-v0.1.0.mswn.exe\"&gt;Expedite Bridge for Microsoft Windows&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/gridhead/expedite/releases/download/0.1.0/ed-prompt-v0.1.0.gnul\"&gt;Expedite Prompt for GNU/Linux Distributions&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/gridhead/expedite/releases/download/0.1.0/ed-prompt-v0.1.0.mswn.exe\"&gt;Expedite Prompt for Microsoft Windows&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/gridhead/expedite/releases/download/0.1.0/ed-server-v0.1.0.gnul\"&gt;Expedite Server for GNU/Linux Distributions&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/gridhead/expedite/releases/download/0.1.0/ed-server-v0.1.0.mswn.exe\"&gt;Expedite Server for Microsoft Windows&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://pypi.org/project/expedite/\"&gt;Expedite - PyPI&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://pypi.org/project/expedite/0.1.0\"&gt;Expedite v0.1.0&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://files.pythonhosted.org/packages/b2/dc/30122a5be523dafe7aac10e555a551bdc2afb362b36daa7a26d884d89acc/expedite-0.1.0.tar.gz\"&gt;Source Distribution&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://files.pythonhosted.org/packages/21/dd/e7e7875ae1640a2b67c2f39e89b8c99be54c5bfd027fb0c81807b8c01350/expedite-0.1.0-py3-none-any.whl\"&gt;Built Distribution&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://hub.docker.com/r/t0xic0der/expedite\"&gt;Expedite - Docker Hub&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://hub.docker.com/layers/t0xic0der/expedite/v0.1.0/images/sha256-974ffa35104e81d5eebb3b92444cfe02871dd749e6339a7af01e059987cd35f5?context=explore\"&gt;Expedite v0.1.0&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Roadmap&lt;/h1&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Establish testing of the functional part of the codebase&lt;/li&gt;\n&lt;li&gt;Post average latency for diagnostic information&lt;/li&gt;\n&lt;li&gt;Attempt reconnecting of websockets object after connection drop&lt;/li&gt;\n&lt;li&gt;Show IP addresses at the server end in the logging only&lt;/li&gt;\n&lt;li&gt;Allow files to be added using the drag-and-drop action to the batch&lt;/li&gt;\n&lt;li&gt;Port the project to the recent asyncio based implementation of websockets&lt;/li&gt;\n&lt;li&gt;Allow for the transfer operation to happen in batches&lt;/li&gt;\n&lt;li&gt;Ensure whether the logging configuration is indeed applied or not &lt;/li&gt;\n&lt;li&gt;Use generator for optimizing reading and writing files&lt;/li&gt;\n&lt;li&gt;Update the connection timeout logic to the newer codebase&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/_0jZdbcc0NOOq2UCSP-FVbSeHs274VPy9kodJkMvBXU.jpg?auto=webp&amp;s=e160f12bef04266c4938eb50dacb51d05ce656e9",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/_0jZdbcc0NOOq2UCSP-FVbSeHs274VPy9kodJkMvBXU.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=c6f19ca2959abe92a43b0189a1790f4de03b3062",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/_0jZdbcc0NOOq2UCSP-FVbSeHs274VPy9kodJkMvBXU.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=461244a8a81cb75801f8782e35d25fa3fd7ec1d7",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/_0jZdbcc0NOOq2UCSP-FVbSeHs274VPy9kodJkMvBXU.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=da2c237d48c737af37f7c0817e613ced6ee6dea0",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/_0jZdbcc0NOOq2UCSP-FVbSeHs274VPy9kodJkMvBXU.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=2a72c12c16091a33dc4eb9f84c55637dd7970756",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/_0jZdbcc0NOOq2UCSP-FVbSeHs274VPy9kodJkMvBXU.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=c6d14fff94dc808d0f87f4487120e053a388d96a",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/_0jZdbcc0NOOq2UCSP-FVbSeHs274VPy9kodJkMvBXU.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=ccd5569097401b74373835dda177055abe70fc0e",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "LtrBXG2Y7R106yZdQRa85YJsZH36s9hXhVbeJfJr9wg"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#7193ff",
            "id": "1gqeqqb",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "t0xic0der",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gqeqqb/expedite_v010_is_out_now_on_pypi/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gqeqqb/expedite_v010_is_out_now_on_pypi/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731509894.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "**What My Project Does**\n\nFakeout generates batch and streaming data based on a JSON data definition, and sends the generated data to blob storage (currently only Google Cloud), and event/messaging services (currently only Pub/Sub). Written in Python and deployed with Docker.\n\n**Target Audience**\n\nData Engineers, Web Developers and people building data engineering portfolio pipelines.\n\n**Comparison**\n\nFaker - Only generates fake data, doesn't send it anywhere. \n\nMimesis - Again, only creates the fake data, doesn't integrate with any services\n\n\n\nI'm considering developing it further and adding new cloud provider connections, new data types, webhooks, a web app, etc.\n\nWhat do you think? Does it seem useful? How well-written/architected is it? Any tips for how I can make it better?\n\n[https://github.com/richard-muir/fakeout](https://github.com/richard-muir/fakeout)\n\n\n\nHere's the blurb from the README to save you a click:\n\n# ## Overview\n\nFakeOut is a Python application that generates realistic and customisable fake streaming and batch data.\n\nIt's useful for Data Engineers who want to test their streaming and batch processing pipelines with toy data that mimics their real-world data structures.\n\n# ### Features\n\n* **Concurrent Data Models**: Define and run multiple models simultaneously for both streaming and batch services, allowing for diverse data simulation across different configurations and services.\n* **Streaming Data Generation**: Continuously generates fake data records according to user-defined configurations, supporting multiple streaming services at once.\n* **Batch Export**: Exports configurable chunks of data to cloud storage services, or to the local filesystem.\n* **Configurable**: A flexible JSON configuration file allows detailed customization of data generation parameters, enabling targeted testing and simulation.",
            "author_fullname": "t2_kgpq3",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Roast my personal data engineering project",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gq8u2u",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.57,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 4,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 4,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731488816.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Fakeout generates batch and streaming data based on a JSON data definition, and sends the generated data to blob storage (currently only Google Cloud), and event/messaging services (currently only Pub/Sub). Written in Python and deployed with Docker.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Data Engineers, Web Developers and people building data engineering portfolio pipelines.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Faker - Only generates fake data, doesn&amp;#39;t send it anywhere. &lt;/p&gt;\n\n&lt;p&gt;Mimesis - Again, only creates the fake data, doesn&amp;#39;t integrate with any services&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m considering developing it further and adding new cloud provider connections, new data types, webhooks, a web app, etc.&lt;/p&gt;\n\n&lt;p&gt;What do you think? Does it seem useful? How well-written/architected is it? Any tips for how I can make it better?&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/richard-muir/fakeout\"&gt;https://github.com/richard-muir/fakeout&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s the blurb from the README to save you a click:&lt;/p&gt;\n\n&lt;h1&gt;## Overview&lt;/h1&gt;\n\n&lt;p&gt;FakeOut is a Python application that generates realistic and customisable fake streaming and batch data.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s useful for Data Engineers who want to test their streaming and batch processing pipelines with toy data that mimics their real-world data structures.&lt;/p&gt;\n\n&lt;h1&gt;### Features&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Concurrent Data Models&lt;/strong&gt;: Define and run multiple models simultaneously for both streaming and batch services, allowing for diverse data simulation across different configurations and services.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Streaming Data Generation&lt;/strong&gt;: Continuously generates fake data records according to user-defined configurations, supporting multiple streaming services at once.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Batch Export&lt;/strong&gt;: Exports configurable chunks of data to cloud storage services, or to the local filesystem.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Configurable&lt;/strong&gt;: A flexible JSON configuration file allows detailed customization of data generation parameters, enabling targeted testing and simulation.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/E4tZL7YRfMaRGduwYv7NjiwNygTOZchKaGIKViPyqLg.jpg?auto=webp&amp;s=ba35b6e122512aef2c80bfc3d3d95e07fef971ea",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/E4tZL7YRfMaRGduwYv7NjiwNygTOZchKaGIKViPyqLg.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=1547cce73aeb6bf2514cefa0a69c9e31542129a5",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/E4tZL7YRfMaRGduwYv7NjiwNygTOZchKaGIKViPyqLg.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=a27b6a10cc465c73bfe94cb80030c87d5f6c314a",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/E4tZL7YRfMaRGduwYv7NjiwNygTOZchKaGIKViPyqLg.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=ab1035a6280327e8923466be0fab28d7655bb911",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/E4tZL7YRfMaRGduwYv7NjiwNygTOZchKaGIKViPyqLg.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=b2f9f0df66f162c98eee9c44c3063379139f9173",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/E4tZL7YRfMaRGduwYv7NjiwNygTOZchKaGIKViPyqLg.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=908239931c07a7bfae00283dbe994491699e4462",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/E4tZL7YRfMaRGduwYv7NjiwNygTOZchKaGIKViPyqLg.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=6fe8b9f7276f9f7929acb60fd44f53ae4428e06a",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "U_CqzpDL7WP6wLT6oFMJeKKcT03xO3NhYtXoN-k8C7c"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gq8u2u",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "rytchbass",
            "discussion_type": null,
            "num_comments": 3,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gq8u2u/roast_my_personal_data_engineering_project/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gq8u2u/roast_my_personal_data_engineering_project/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731488816.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I have created a visual application to create LaTeX/Beamer presentions, using PyQt6.\n\n**What my project does**\n\nBeamerQT provides a visual interface to create the presentations, providing abstraction of the most LaTeX code to define the slides, blocks or columns. \n\n  \nThe main features are:  \n\\- Easy layout in two columns with editable width\n\n\\- Marking blocks as block, example, alert or unformatted blocks.\n\n\\- Create inside layouts in the blocks.\n\n\\- Support adding images.\n\n\\- Drag and Drop slides.\n\n\\- Easy Sectioning.\n\n\\- Easy theme selection.\n\n\\- Easy to add LaTeX code inside blocks and preamble.\n\n\\- Support for SVG files (if Inkscape is installed)\n\n\\- Export to LaTeX\n\n\\- Export to PDF (if pdflatex is available)\n\n  \n**Target audience?**\n\nAcademic community and enthusiasts that are looking for a visual interface for LaTeX/Beamer presentations.\n\n  \n**Comparison?**\n\nLyX: Provides a GUI for LaTeX documents, and a basic template for Beamer presentations, without a visual edition of the slides.\n\nOverleaf: Provides an interfaz for raw LaTeX documents, including Beamer, but does not provide visual edition of the slides.\n\n\n\n**Repository?**\n\nThe repository is located in github: [https://github.com/acroper/BeamerQt](https://github.com/acroper/BeamerQt)\n\n\n\n**Documentation?**\n\nThe repostory contains a basic documentation (work in progress). \n\nDemonstration video: [https://youtu.be/XQKJbuT8q1g](https://youtu.be/XQKJbuT8q1g)\n\n",
            "author_fullname": "t2_18xd965ykr",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "BeamerQT: PyQt application to create LaTeX presentations - v 0.1 ",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gq77j0",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.86,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 14,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 14,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731481346.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have created a visual application to create LaTeX/Beamer presentions, using PyQt6.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What my project does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;BeamerQT provides a visual interface to create the presentations, providing abstraction of the most LaTeX code to define the slides, blocks or columns. &lt;/p&gt;\n\n&lt;p&gt;The main features are:&lt;br/&gt;\n- Easy layout in two columns with editable width&lt;/p&gt;\n\n&lt;p&gt;- Marking blocks as block, example, alert or unformatted blocks.&lt;/p&gt;\n\n&lt;p&gt;- Create inside layouts in the blocks.&lt;/p&gt;\n\n&lt;p&gt;- Support adding images.&lt;/p&gt;\n\n&lt;p&gt;- Drag and Drop slides.&lt;/p&gt;\n\n&lt;p&gt;- Easy Sectioning.&lt;/p&gt;\n\n&lt;p&gt;- Easy theme selection.&lt;/p&gt;\n\n&lt;p&gt;- Easy to add LaTeX code inside blocks and preamble.&lt;/p&gt;\n\n&lt;p&gt;- Support for SVG files (if Inkscape is installed)&lt;/p&gt;\n\n&lt;p&gt;- Export to LaTeX&lt;/p&gt;\n\n&lt;p&gt;- Export to PDF (if pdflatex is available)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target audience?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Academic community and enthusiasts that are looking for a visual interface for LaTeX/Beamer presentations.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;LyX: Provides a GUI for LaTeX documents, and a basic template for Beamer presentations, without a visual edition of the slides.&lt;/p&gt;\n\n&lt;p&gt;Overleaf: Provides an interfaz for raw LaTeX documents, including Beamer, but does not provide visual edition of the slides.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Repository?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The repository is located in github: &lt;a href=\"https://github.com/acroper/BeamerQt\"&gt;https://github.com/acroper/BeamerQt&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Documentation?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The repostory contains a basic documentation (work in progress). &lt;/p&gt;\n\n&lt;p&gt;Demonstration video: &lt;a href=\"https://youtu.be/XQKJbuT8q1g\"&gt;https://youtu.be/XQKJbuT8q1g&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/hgTTTBWiqRMMJ__Xf23qbIuyD0Tomv96AOoSfDrYiik.jpg?auto=webp&amp;s=686be46aa82b2a417294bc070eb5d718d2807e5a",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/hgTTTBWiqRMMJ__Xf23qbIuyD0Tomv96AOoSfDrYiik.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=118eca0b06e12bad345df9e4853d96d8687cb397",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/hgTTTBWiqRMMJ__Xf23qbIuyD0Tomv96AOoSfDrYiik.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=53ac086527d646aa2785ca14d8af8c80825c7532",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/hgTTTBWiqRMMJ__Xf23qbIuyD0Tomv96AOoSfDrYiik.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=d747b938cf59e8ffe68d9121dc95694b4bbde505",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/hgTTTBWiqRMMJ__Xf23qbIuyD0Tomv96AOoSfDrYiik.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=1170d3f79bab82155f334afee1fbd911389664c1",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/hgTTTBWiqRMMJ__Xf23qbIuyD0Tomv96AOoSfDrYiik.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=d7e45c3d9a85e251b4d12f3f661628f6fca1fadf",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/hgTTTBWiqRMMJ__Xf23qbIuyD0Tomv96AOoSfDrYiik.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=b38a127b315823fb7e0b5e31f929912568f13cc8",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "CpSkkHsLvc-2shiVhu1OddjmiqlRi7ox7IkyBgY1gvc"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gq77j0",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Latter-Path-8674",
            "discussion_type": null,
            "num_comments": 2,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gq77j0/beamerqt_pyqt_application_to_create_latex/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gq77j0/beamerqt_pyqt_application_to_create_latex/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731481346.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hi All,\n\nMill is a build tool traditionally targeting JVM languages Java/Scala/Kotlin, but is branching out to support other languages like multi-module Python or Javascript codebases. We're looking for people interested build tools to collaborate with us on adding first-class Python toolchain support to Mill. To that end, we've put up a non-trivial issue bounty to encourage collaboration for anyone who implements various Python-related build examples and tooling integrations for Mill:\n\n[First Class Python Support (4000USD Bounty)](https://github.com/com-lihaoyi/mill/issues/3928)\n\nI'd love to get feedback on the tool, the Python support roadmap, or thoughts on what people need from a Python build tool. My own Python tooling experience is a bit out of date, so any feedback (both positive or negative) would be very welcome!",
            "author_fullname": "t2_6i5aa",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "The Mill build tool is looking for people to collaborate with on adding Python support",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gq6d3e",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.57,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 2,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 2,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1731478476.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731477874.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi All,&lt;/p&gt;\n\n&lt;p&gt;Mill is a build tool traditionally targeting JVM languages Java/Scala/Kotlin, but is branching out to support other languages like multi-module Python or Javascript codebases. We&amp;#39;re looking for people interested build tools to collaborate with us on adding first-class Python toolchain support to Mill. To that end, we&amp;#39;ve put up a non-trivial issue bounty to encourage collaboration for anyone who implements various Python-related build examples and tooling integrations for Mill:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/com-lihaoyi/mill/issues/3928\"&gt;First Class Python Support (4000USD Bounty)&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;d love to get feedback on the tool, the Python support roadmap, or thoughts on what people need from a Python build tool. My own Python tooling experience is a bit out of date, so any feedback (both positive or negative) would be very welcome!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/_gVUbaCAQvesTsWWXeuSPX0GZF-7zggkhWFCU4gChB8.jpg?auto=webp&amp;s=1d205017c154b85080e1aee5007598995cfb82ab",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/_gVUbaCAQvesTsWWXeuSPX0GZF-7zggkhWFCU4gChB8.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=9367087937df25c92fa41ab4ff2ac70880110e0e",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/_gVUbaCAQvesTsWWXeuSPX0GZF-7zggkhWFCU4gChB8.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=dacd39339de88ddf683c1226c3e4af40c7ee845c",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/_gVUbaCAQvesTsWWXeuSPX0GZF-7zggkhWFCU4gChB8.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=2ed367e76f460f006d2e41dd432cddeb127119bc",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/_gVUbaCAQvesTsWWXeuSPX0GZF-7zggkhWFCU4gChB8.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=f579062e09d78a7200aef4cb65257e797d504a52",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/_gVUbaCAQvesTsWWXeuSPX0GZF-7zggkhWFCU4gChB8.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=1066653ff67debeaf166f1825db1b856b547bf0d",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/_gVUbaCAQvesTsWWXeuSPX0GZF-7zggkhWFCU4gChB8.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=08ba301d1b0c56daec53e5ecbb087a9a0970c09a",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "EvM_e-H6kZu_GZ_WdxD-v8kn6tVuhMPv1xm0Jl2PHDQ"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gq6d3e",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "lihaoyi",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gq6d3e/the_mill_build_tool_is_looking_for_people_to/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gq6d3e/the_mill_build_tool_is_looking_for_people_to/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731477874.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I have a program on the internet that users pay to download and use. I'm thinking about adding a free trial, but I'm very concerned that users can simply download the trial and bypass the restrictions. The program is fully offline and somewhat simple. It's not like you need an entire team to crack it.\n\nIn fact, there is literally a pyinstaller unpacker out there that can revert the EXE straight back to its python source code. I use pyinstaller.\n\nAnything I can do? One thing to look out for is unpackers, and the other thing is how to make it difficult for Ghidra for example to reverse the program.\n\nTo clarify, I can't just offer this as an online service/program because it requires interaction with the user's system.",
            "author_fullname": "t2_19e6vglsne",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "How to prevent python software from being reverse engineered or pirated?",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gq2v3p",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.37,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731465919.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have a program on the internet that users pay to download and use. I&amp;#39;m thinking about adding a free trial, but I&amp;#39;m very concerned that users can simply download the trial and bypass the restrictions. The program is fully offline and somewhat simple. It&amp;#39;s not like you need an entire team to crack it.&lt;/p&gt;\n\n&lt;p&gt;In fact, there is literally a pyinstaller unpacker out there that can revert the EXE straight back to its python source code. I use pyinstaller.&lt;/p&gt;\n\n&lt;p&gt;Anything I can do? One thing to look out for is unpackers, and the other thing is how to make it difficult for Ghidra for example to reverse the program.&lt;/p&gt;\n\n&lt;p&gt;To clarify, I can&amp;#39;t just offer this as an online service/program because it requires interaction with the user&amp;#39;s system.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gq2v3p",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "voicerama",
            "discussion_type": null,
            "num_comments": 27,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gq2v3p/how_to_prevent_python_software_from_being_reverse/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gq2v3p/how_to_prevent_python_software_from_being_reverse/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731465919.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# 👋 Hey everyone!\n\nLet me introduce **Nythop**, my lazy rascal’s attempt at an esolang. I’ll be honest: this is less a language and more like a language preprocessor in disguise. But hey, I’ve taken one of the most readable programming languages (Python) and, with one very simple change, turned it into a cryptic puzzle that’s about as easy to decipher as ancient runes.\n\n# [Try Nythop Now!](https://luxedo.github.io/nythop/) or check the [GitHub repo!](https://github.com/luxedo/nythop)\n\n# So, What’s the Gimmick?\n\nNythop reverses every line of Python. That’s it. The code itself is perfectly valid Python—just written backward. Indentation lands at the end of each line, comments run from right to left. This approach is both hilariously simple and impressively confusing, making each line a challenge to read. Turns out, such a small change does a great job of making Python nearly unreadable!\n\n# Try it Out!\n\nYou can dive into Nythop right now with the [online interpreter](https://luxedo.github.io/nythop/) and see for yourself. Or you can just grab the [PyPI package](https://pypi.org/project/nythop/):\n\n    pip install nythop\n\nThis gets you a command-line interpreter and a transpiler to flip standard Python code into Nythop format. You’ll also have access to a REPL and options to run .yp files, or write and execute reversed lines from the command line.\n\nFor more details, check out the official [Nythop wiki page](https://esolangs.org/wiki/Nythop).",
            "author_fullname": "t2_ww96t",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Nythop Programming Language",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gq2fp1",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.67,
            "author_flair_background_color": "#b8001f",
            "subreddit_type": "public",
            "ups": 1,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": "01f57bbe-537c-11ee-bb0d-6ef63b2ae5b9",
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 1,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1731494144.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [
                {
                    "e": "text",
                    "t": "git push -f"
                }
            ],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731464613.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "richtext",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;👋 Hey everyone!&lt;/h1&gt;\n\n&lt;p&gt;Let me introduce &lt;strong&gt;Nythop&lt;/strong&gt;, my lazy rascal’s attempt at an esolang. I’ll be honest: this is less a language and more like a language preprocessor in disguise. But hey, I’ve taken one of the most readable programming languages (Python) and, with one very simple change, turned it into a cryptic puzzle that’s about as easy to decipher as ancient runes.&lt;/p&gt;\n\n&lt;h1&gt;&lt;a href=\"https://luxedo.github.io/nythop/\"&gt;Try Nythop Now!&lt;/a&gt; or check the &lt;a href=\"https://github.com/luxedo/nythop\"&gt;GitHub repo!&lt;/a&gt;&lt;/h1&gt;\n\n&lt;h1&gt;So, What’s the Gimmick?&lt;/h1&gt;\n\n&lt;p&gt;Nythop reverses every line of Python. That’s it. The code itself is perfectly valid Python—just written backward. Indentation lands at the end of each line, comments run from right to left. This approach is both hilariously simple and impressively confusing, making each line a challenge to read. Turns out, such a small change does a great job of making Python nearly unreadable!&lt;/p&gt;\n\n&lt;h1&gt;Try it Out!&lt;/h1&gt;\n\n&lt;p&gt;You can dive into Nythop right now with the &lt;a href=\"https://luxedo.github.io/nythop/\"&gt;online interpreter&lt;/a&gt; and see for yourself. Or you can just grab the &lt;a href=\"https://pypi.org/project/nythop/\"&gt;PyPI package&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;pip install nythop\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This gets you a command-line interpreter and a transpiler to flip standard Python code into Nythop format. You’ll also have access to a REPL and options to run .yp files, or write and execute reversed lines from the command line.&lt;/p&gt;\n\n&lt;p&gt;For more details, check out the official &lt;a href=\"https://esolangs.org/wiki/Nythop\"&gt;Nythop wiki page&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/V02h_7CKyF7MlrSqpWbxodtBnCRaFUm9NrkzCgDf2tc.jpg?auto=webp&amp;s=c06b65b064829a8faae04166784adf43f2a5388d",
                            "width": 600,
                            "height": 200
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/V02h_7CKyF7MlrSqpWbxodtBnCRaFUm9NrkzCgDf2tc.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=96c69a2111aed3ed0e53df855d1239232c8d2669",
                                "width": 108,
                                "height": 36
                            },
                            {
                                "url": "https://external-preview.redd.it/V02h_7CKyF7MlrSqpWbxodtBnCRaFUm9NrkzCgDf2tc.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=085a1b9589827e78ca439051040b980a0b87a236",
                                "width": 216,
                                "height": 72
                            },
                            {
                                "url": "https://external-preview.redd.it/V02h_7CKyF7MlrSqpWbxodtBnCRaFUm9NrkzCgDf2tc.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=5f68501b21f33fa603a938779b4871842d4d0dcb",
                                "width": 320,
                                "height": 106
                            }
                        ],
                        "variants": {},
                        "id": "fLELDbbo4_Kwk2JnXjwjytfGdgejb0hKmKqXPiJ_Ldw"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": "git push -f",
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gq2fp1",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "ArmlessJohn404",
            "discussion_type": null,
            "num_comments": 1,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": "light",
            "permalink": "/r/Python/comments/1gq2fp1/nythop_programming_language/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gq2fp1/nythop_programming_language/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731464613.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# Weekly Thread: Beginner Questions 🐍\n\nWelcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.\n\n## How it Works:\n\n1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!\n2. **Community Support**: Get answers and advice from the community.\n3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.\n\n## Guidelines:\n\n* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).\n\n## Recommended Resources:\n\n* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.\n\n## Example Questions:\n\n1. **What is the difference between a list and a tuple?**\n2. **How do I read a CSV file in Python?**\n3. **What are Python decorators and how do I use them?**\n4. **How do I install a Python package using pip?**\n5. **What is a virtual environment and why should I use one?**\n\nLet's help each other learn Python! 🌟",
            "author_fullname": "t2_6l4z3",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Wednesday Daily Thread: Beginner questions",
            "link_flair_richtext": [
                {
                    "a": ":pythonLogo:",
                    "e": "emoji",
                    "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                },
                {
                    "e": "text",
                    "t": " Daily Thread"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "daily-thread",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gpzgm9",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.6,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 1,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": ":pythonLogo: Daily Thread",
            "can_mod_post": false,
            "score": 1,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": true,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731456010.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: Beginner Questions 🐍&lt;/h1&gt;\n\n&lt;p&gt;Welcome to our Beginner Questions thread! Whether you&amp;#39;re new to Python or just looking to clarify some basics, this is the thread for you.&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Ask Anything&lt;/strong&gt;: Feel free to ask any Python-related question. There are no bad questions here!&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Community Support&lt;/strong&gt;: Get answers and advice from the community.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Resource Sharing&lt;/strong&gt;: Discover tutorials, articles, and beginner-friendly resources.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This thread is specifically for &lt;strong&gt;beginner questions&lt;/strong&gt;. For more advanced queries, check out our &lt;a href=\"#advanced-questions-thread-link\"&gt;Advanced Questions Thread&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Recommended Resources:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If you don&amp;#39;t receive a response, consider exploring &lt;a href=\"/r/LearnPython\"&gt;r/LearnPython&lt;/a&gt; or join the &lt;a href=\"https://discord.gg/python\"&gt;Python Discord Server&lt;/a&gt; for quicker assistance.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Questions:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;What is the difference between a list and a tuple?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How do I read a CSV file in Python?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are Python decorators and how do I use them?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How do I install a Python package using pip?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What is a virtual environment and why should I use one?&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Let&amp;#39;s help each other learn Python! 🌟&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?auto=webp&amp;s=77877e508cacc3a5c51009b26cc51fd08031ca76",
                            "width": 512,
                            "height": 288
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=c5fbdf8efb5e6f14fe03845466b74ba9ebab4413",
                                "width": 108,
                                "height": 60
                            },
                            {
                                "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d57848912389eb70e32659895710a7c322a93edf",
                                "width": 216,
                                "height": 121
                            },
                            {
                                "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=86d869d6c6e16a13c5cf960ab69d7d274b49ff16",
                                "width": 320,
                                "height": 180
                            }
                        ],
                        "variants": {},
                        "id": "aNa9dCzuqtUFBkZTt98jjYpcv1i_lqriq_lbtm_LcRo"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": "moderator",
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#00a6a5",
            "id": "1gpzgm9",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "AutoModerator",
            "discussion_type": null,
            "num_comments": 2,
            "send_replies": false,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gpzgm9/wednesday_daily_thread_beginner_questions/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gpzgm9/wednesday_daily_thread_beginner_questions/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731456010.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "If you're new to coding and want to practice Python, I’ve got a list of easy, practical projects that are perfect for new ninjas! Whether you’re aiming to strengthen your problem-solving skills or build something cool, these projects are a great way to dive in. Each project is designed to help you understand Python basics while keeping things fun and manageable.\n\n# projects list:\n\n* Flashcard quiz app\n* learn how to build Less Pass Clone\n* Hangame game \n* guess the number game\n* contact book \n\n[projects list link ](https://www.rankap.tech/en/tutorials/)",
            "author_fullname": "t2_9elycyc0",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Hands-On Python: Beginner-Friendly Projects to Kickstart Your Coding",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Tutorial"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "tutorial",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gpqm6o",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.74,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 14,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Tutorial",
            "can_mod_post": false,
            "score": 14,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731433635.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;If you&amp;#39;re new to coding and want to practice Python, I’ve got a list of easy, practical projects that are perfect for new ninjas! Whether you’re aiming to strengthen your problem-solving skills or build something cool, these projects are a great way to dive in. Each project is designed to help you understand Python basics while keeping things fun and manageable.&lt;/p&gt;\n\n&lt;h1&gt;projects list:&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Flashcard quiz app&lt;/li&gt;\n&lt;li&gt;learn how to build Less Pass Clone&lt;/li&gt;\n&lt;li&gt;Hangame game &lt;/li&gt;\n&lt;li&gt;guess the number game&lt;/li&gt;\n&lt;li&gt;contact book &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.rankap.tech/en/tutorials/\"&gt;projects list link &lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#dadada",
            "id": "1gpqm6o",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "RevolutionaryAd8906",
            "discussion_type": null,
            "num_comments": 1,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gpqm6o/handson_python_beginnerfriendly_projects_to/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gpqm6o/handson_python_beginnerfriendly_projects_to/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731433635.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hello [r/Python](https://www.reddit.com/r/Python/)\n\nI am excited to share after few months of hard work since the previous release,\n\n# What My Project Does\n\n[pyTermTk](https://github.com/ceccopierangiolieugenio/pyTermTk) is a [fully-featured](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/widgets.html), [cross compatible](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/crosscompatible.html) and [self contained](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/installing.html#copy-termtk-folder) TUI Python library, it helps developing interacting Terminal applications with modern aesthetics and controls (mouse/keyboard/drag&amp;drop) that you can run out of the box on a terminal on through an ssh/serial session.\n\nIt is cross compatible with Linux🐧, MacOS🍎, MS Windows🪟, HTML5🌍([Try](https://ceccopierangiolieugenio.github.io/pyTermTk/sandbox/sandbox.html))\n\nIts API are structured to be as close as possible as [Qt](https://www.qt.io/)'s [PySide](https://wiki.qt.io/Qt_for_Python)/[PyQt](https://wiki.python.org/moin/PyQt) with some touches of [Tcl/Tk](https://www.tcl.tk).\n\nIn the basic package there are a number of widgets already available:\n\n[Base Widgets](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/widgets.html#base-widgets)\n\n* Label, Button, ComboBox, Spinbox, Checkbox, Radio Button, Line Edit, Scrollbar, List, Menu, Tab\n\n[Specialised Widgets](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/widgets.html#specialised-widgets)\n\n* TextEdit, KodeTab, Terminal, Image\n\n[Model View](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/widgets.html#model-view)\n\n* Tree Widget, Table Widget, File Tree\n\n[Pickers](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/widgets.html#pickers)\n\n* Text Picker, File Picker, Color Picker, Message Box\n\n[Layout](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/widgets.html#layout)\n\n* Frame, Resizable Frame, Window, Splitter, Scroll Area, App Template\n\n# Target Audience?\n\n* TUI Development with modern UI look/features\n* UI Apps for devices without graphic capabilities (single-board computers, vms, cluster nodes, ssh, serial)\n\n# Comparison?\n\n* **urwid -** Is one of the first Python TUI library, **pyTermTk** offers many widgets out of the box not included in the standard urwid\n* **Textual** \\- is a TUI api using a different \"Web\" like paradigm instead of the ObjectOriented (Qt-like) approach widget based approach used by **pyTermTk**.\n* **pymux** \\- the Terminal widget included in **pyTermTk** allows an end user to build and customize a terminal multiplexer app tu support a wide variety of use cases\n\n[Showcase](https://www.youtube.com/watch?v=zLxqUXG7NGk)**:**\n\n* [ttkDesigner](https://github.com/ceccopierangiolieugenio/pyTermTk/tree/main/tools/ttkDesigner) \\- the official [pyTermTk](https://github.com/ceccopierangiolieugenio/pyTermTk) tool for designing and building Text-based user interfaces ([TUI](https://en.wikipedia.org/wiki/Text-based_user_interface)s)\n* [the DumbPaintTool](https://ceccopierangiolieugenio.itch.io/dumb-paint-tool) \\- The Terminal ASCII Photoshop\n* [tlogg](https://github.com/ceccopierangiolieugenio/tlogg) \\- A fast, advanced log explorer.\n* [ttkode](https://github.com/ceccopierangiolieugenio/ttkode) \\- TerminalToolKit (Studio) Code (editor)\n* [Amiga themed terminal multiplexer](https://www.youtube.com/watch?app=desktop&amp;v=p1MiZOLCFOY)\n* [pytest-fold](https://github.com/jeffwright13/pytest-fold) \\- A Pytest plugin to make console output more manageable when there are multiple failed tests\n* [pytest-tui](https://github.com/jeffwright13/pytest-tui) \\- A Text User Interface (TUI) for Pytest, automatically launched after your test run is finished\n\nGames:\n\n* [breakoutRL](https://ceccopierangiolieugenio.itch.io/breakoutrl) \\- Breakout the Roguelike\n* [7drl-2024](https://ceccopierangiolieugenio.itch.io/a-snake-on-a-plane) \\- A Snake🐍 on a Plane✈️ - The Roguelike\n\n**Docs**: [https://ceccopierangiolieugenio.github.io/pyTermTk-Docs](https://ceccopierangiolieugenio.github.io/pyTermTk-Docs)\n\n**Repo:** [https://github.com/ceccopierangiolieugenio/pyTermTk](https://github.com/ceccopierangiolieugenio/pyTermTk)",
            "author_fullname": "t2_7g4u2sep",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "pyTermTk - Self contained TUI library - v0.41.0a released\n",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gpry54",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.85,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 19,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 19,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1731452025.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731436859.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello &lt;a href=\"https://www.reddit.com/r/Python/\"&gt;r/Python&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I am excited to share after few months of hard work since the previous release,&lt;/p&gt;\n\n&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/ceccopierangiolieugenio/pyTermTk\"&gt;pyTermTk&lt;/a&gt; is a &lt;a href=\"https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/widgets.html\"&gt;fully-featured&lt;/a&gt;, &lt;a href=\"https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/crosscompatible.html\"&gt;cross compatible&lt;/a&gt; and &lt;a href=\"https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/installing.html#copy-termtk-folder\"&gt;self contained&lt;/a&gt; TUI Python library, it helps developing interacting Terminal applications with modern aesthetics and controls (mouse/keyboard/drag&amp;amp;drop) that you can run out of the box on a terminal on through an ssh/serial session.&lt;/p&gt;\n\n&lt;p&gt;It is cross compatible with Linux🐧, MacOS🍎, MS Windows🪟, HTML5🌍(&lt;a href=\"https://ceccopierangiolieugenio.github.io/pyTermTk/sandbox/sandbox.html\"&gt;Try&lt;/a&gt;)&lt;/p&gt;\n\n&lt;p&gt;Its API are structured to be as close as possible as &lt;a href=\"https://www.qt.io/\"&gt;Qt&lt;/a&gt;&amp;#39;s &lt;a href=\"https://wiki.qt.io/Qt_for_Python\"&gt;PySide&lt;/a&gt;/&lt;a href=\"https://wiki.python.org/moin/PyQt\"&gt;PyQt&lt;/a&gt; with some touches of &lt;a href=\"https://www.tcl.tk\"&gt;Tcl/Tk&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;In the basic package there are a number of widgets already available:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/widgets.html#base-widgets\"&gt;Base Widgets&lt;/a&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Label, Button, ComboBox, Spinbox, Checkbox, Radio Button, Line Edit, Scrollbar, List, Menu, Tab&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;a href=\"https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/widgets.html#specialised-widgets\"&gt;Specialised Widgets&lt;/a&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;TextEdit, KodeTab, Terminal, Image&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;a href=\"https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/widgets.html#model-view\"&gt;Model View&lt;/a&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Tree Widget, Table Widget, File Tree&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;a href=\"https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/widgets.html#pickers\"&gt;Pickers&lt;/a&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Text Picker, File Picker, Color Picker, Message Box&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;a href=\"https://ceccopierangiolieugenio.github.io/pyTermTk-Docs/info/features/widgets.html#layout\"&gt;Layout&lt;/a&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Frame, Resizable Frame, Window, Splitter, Scroll Area, App Template&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Target Audience?&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;TUI Development with modern UI look/features&lt;/li&gt;\n&lt;li&gt;UI Apps for devices without graphic capabilities (single-board computers, vms, cluster nodes, ssh, serial)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Comparison?&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;urwid -&lt;/strong&gt; Is one of the first Python TUI library, &lt;strong&gt;pyTermTk&lt;/strong&gt; offers many widgets out of the box not included in the standard urwid&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Textual&lt;/strong&gt; - is a TUI api using a different &amp;quot;Web&amp;quot; like paradigm instead of the ObjectOriented (Qt-like) approach widget based approach used by &lt;strong&gt;pyTermTk&lt;/strong&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;pymux&lt;/strong&gt; - the Terminal widget included in &lt;strong&gt;pyTermTk&lt;/strong&gt; allows an end user to build and customize a terminal multiplexer app tu support a wide variety of use cases&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=zLxqUXG7NGk\"&gt;Showcase&lt;/a&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/ceccopierangiolieugenio/pyTermTk/tree/main/tools/ttkDesigner\"&gt;ttkDesigner&lt;/a&gt; - the official &lt;a href=\"https://github.com/ceccopierangiolieugenio/pyTermTk\"&gt;pyTermTk&lt;/a&gt; tool for designing and building Text-based user interfaces (&lt;a href=\"https://en.wikipedia.org/wiki/Text-based_user_interface\"&gt;TUI&lt;/a&gt;s)&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://ceccopierangiolieugenio.itch.io/dumb-paint-tool\"&gt;the DumbPaintTool&lt;/a&gt; - The Terminal ASCII Photoshop&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/ceccopierangiolieugenio/tlogg\"&gt;tlogg&lt;/a&gt; - A fast, advanced log explorer.&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/ceccopierangiolieugenio/ttkode\"&gt;ttkode&lt;/a&gt; - TerminalToolKit (Studio) Code (editor)&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://www.youtube.com/watch?app=desktop&amp;amp;v=p1MiZOLCFOY\"&gt;Amiga themed terminal multiplexer&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/jeffwright13/pytest-fold\"&gt;pytest-fold&lt;/a&gt; - A Pytest plugin to make console output more manageable when there are multiple failed tests&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/jeffwright13/pytest-tui\"&gt;pytest-tui&lt;/a&gt; - A Text User Interface (TUI) for Pytest, automatically launched after your test run is finished&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Games:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://ceccopierangiolieugenio.itch.io/breakoutrl\"&gt;breakoutRL&lt;/a&gt; - Breakout the Roguelike&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://ceccopierangiolieugenio.itch.io/a-snake-on-a-plane\"&gt;7drl-2024&lt;/a&gt; - A Snake🐍 on a Plane✈️ - The Roguelike&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Docs&lt;/strong&gt;: &lt;a href=\"https://ceccopierangiolieugenio.github.io/pyTermTk-Docs\"&gt;https://ceccopierangiolieugenio.github.io/pyTermTk-Docs&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Repo:&lt;/strong&gt; &lt;a href=\"https://github.com/ceccopierangiolieugenio/pyTermTk\"&gt;https://github.com/ceccopierangiolieugenio/pyTermTk&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/9bqUIgJO3a3mO24hmabQyZfE1L77RY2zcnDSMBo8-mM.jpg?auto=webp&amp;s=ed8e40b8ed3afd4bd224dfe5e54f28e47a9c0896",
                            "width": 1280,
                            "height": 640
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/9bqUIgJO3a3mO24hmabQyZfE1L77RY2zcnDSMBo8-mM.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=877dbcde8f4e28ca1f98350c4bbcbb922fcddc34",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/9bqUIgJO3a3mO24hmabQyZfE1L77RY2zcnDSMBo8-mM.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=57550de2e44fd1199b72a54dd5b3e4c8a4ed1bb8",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/9bqUIgJO3a3mO24hmabQyZfE1L77RY2zcnDSMBo8-mM.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=38fe741486254b741304111029fa2abc3a15de8d",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/9bqUIgJO3a3mO24hmabQyZfE1L77RY2zcnDSMBo8-mM.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=a25ecc8dd55acb7cdf7518c1fe17ecec5dadcdd7",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/9bqUIgJO3a3mO24hmabQyZfE1L77RY2zcnDSMBo8-mM.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=dbb4956b37f4651153d13faf519cd8ee7202ce26",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/9bqUIgJO3a3mO24hmabQyZfE1L77RY2zcnDSMBo8-mM.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=efe9527096250e90038725ef34eba4bbbf7cd785",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "UtZSzGteZGzScQNSbLL5Euxwcs1R9FjSpz5F4S_A61U"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gpry54",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "PierCecco",
            "discussion_type": null,
            "num_comments": 5,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gpry54/pytermtk_self_contained_tui_library_v0410a/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gpry54/pytermtk_self_contained_tui_library_v0410a/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731436859.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Email clients, even Gmail opened in a browser have limited and varying support for HTML/CSS which makes sending good-looking emails hard, especially for various older Outlook clients and other popular email apps.\n\nThe old way was tedious inbox testing, conditional Outlook HTML code with tables inside tables and so on. Python could use premailer to inline styles for much better compatibility of plain HTML/CSS and then use tidy to clear HTML from any excess markup and errors... but it's not perfect and limited.\n\nWe got **React Email** some time ago, but it's React. Then one of email marketing companies, Mailjet, got triggered enough that they made a sort of a standard/markup - **MJML** \\- set that is email message-safe and can be used in browser WYSIWYG as well as backend parsers. Python has an unofficial library so it's very easy to quickly switch to using MJML for email templates.\n\nAside from client compatibility there is the issue of sending emails so they don't go into spam folder, that will display nicely even if the client blocked loading external assets and more... I went through those problems and some solutions in my tutorial:\n\n* **Tutorial Link**: [https://rkblog.dev/posts/python/sending-good-looking-mjml-emails-with-python/](https://rkblog.dev/posts/python/sending-good-looking-mjml-emails-with-python/) \n* **MJML live editor**: [https://mjml.io/try-it-live](https://mjml.io/try-it-live)\n\n\n\n",
            "author_fullname": "t2_y4m3",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": " Sending cross-email-client-compatible emails with MJML and Python",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Tutorial"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "tutorial",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gpus46",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.92,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 10,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Tutorial",
            "can_mod_post": false,
            "score": 10,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731443829.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Email clients, even Gmail opened in a browser have limited and varying support for HTML/CSS which makes sending good-looking emails hard, especially for various older Outlook clients and other popular email apps.&lt;/p&gt;\n\n&lt;p&gt;The old way was tedious inbox testing, conditional Outlook HTML code with tables inside tables and so on. Python could use premailer to inline styles for much better compatibility of plain HTML/CSS and then use tidy to clear HTML from any excess markup and errors... but it&amp;#39;s not perfect and limited.&lt;/p&gt;\n\n&lt;p&gt;We got &lt;strong&gt;React Email&lt;/strong&gt; some time ago, but it&amp;#39;s React. Then one of email marketing companies, Mailjet, got triggered enough that they made a sort of a standard/markup - &lt;strong&gt;MJML&lt;/strong&gt; - set that is email message-safe and can be used in browser WYSIWYG as well as backend parsers. Python has an unofficial library so it&amp;#39;s very easy to quickly switch to using MJML for email templates.&lt;/p&gt;\n\n&lt;p&gt;Aside from client compatibility there is the issue of sending emails so they don&amp;#39;t go into spam folder, that will display nicely even if the client blocked loading external assets and more... I went through those problems and some solutions in my tutorial:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Tutorial Link&lt;/strong&gt;: &lt;a href=\"https://rkblog.dev/posts/python/sending-good-looking-mjml-emails-with-python/\"&gt;https://rkblog.dev/posts/python/sending-good-looking-mjml-emails-with-python/&lt;/a&gt; &lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;MJML live editor&lt;/strong&gt;: &lt;a href=\"https://mjml.io/try-it-live\"&gt;https://mjml.io/try-it-live&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/Ts5J4YGtsdVWWAENDjlItJX6XX3jHM0SqeCy9O1893M.jpg?auto=webp&amp;s=95864f03a96e807f72f03fd8dcafd1cfd1c08a95",
                            "width": 800,
                            "height": 624
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/Ts5J4YGtsdVWWAENDjlItJX6XX3jHM0SqeCy9O1893M.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=d6ab82b086ec2503b1fe7fce03152232c8f4c959",
                                "width": 108,
                                "height": 84
                            },
                            {
                                "url": "https://external-preview.redd.it/Ts5J4YGtsdVWWAENDjlItJX6XX3jHM0SqeCy9O1893M.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=c61436591b1a89125e755203491922ceed3b0766",
                                "width": 216,
                                "height": 168
                            },
                            {
                                "url": "https://external-preview.redd.it/Ts5J4YGtsdVWWAENDjlItJX6XX3jHM0SqeCy9O1893M.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=616eb6f19c3e1bc8c31f74ce4778a7cf225d6552",
                                "width": 320,
                                "height": 249
                            },
                            {
                                "url": "https://external-preview.redd.it/Ts5J4YGtsdVWWAENDjlItJX6XX3jHM0SqeCy9O1893M.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=62c81a57697884bcd45564fe741f714bea0e9e66",
                                "width": 640,
                                "height": 499
                            }
                        ],
                        "variants": {},
                        "id": "qtvjSO8ov2wCaEYz-xvyX20qlgOyWNMcbImRuPWyVWs"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#dadada",
            "id": "1gpus46",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "riklaunim",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gpus46/sending_crossemailclientcompatible_emails_with/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gpus46/sending_crossemailclientcompatible_emails_with/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731443829.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I've been writing primarily R code for nearly 20 years but recently needed to get back into Python for several maintenance and development projects. I put together a set of resources for getting up to speed in Python as an experienced R developer.\n\n[https://blog.stephenturner.us/p/python-for-r-users](https://blog.stephenturner.us/p/python-for-r-users)",
            "author_fullname": "t2_4twbk",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Python for R users",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Resource"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "resource",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gpqqox",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.9,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 55,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Resource",
            "can_mod_post": false,
            "score": 55,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731433956.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been writing primarily R code for nearly 20 years but recently needed to get back into Python for several maintenance and development projects. I put together a set of resources for getting up to speed in Python as an experienced R developer.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://blog.stephenturner.us/p/python-for-r-users\"&gt;https://blog.stephenturner.us/p/python-for-r-users&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/LjCQBRW9HQIgNkL19efhVQBEX_5xSNhH0zMdFIuGVd0.jpg?auto=webp&amp;s=6b218126d56a22ae3ddb3fcc3d18a60a9c46b7d4",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/LjCQBRW9HQIgNkL19efhVQBEX_5xSNhH0zMdFIuGVd0.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=099bc75d68eb2d3cb0b2c82fb827328b702d2078",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/LjCQBRW9HQIgNkL19efhVQBEX_5xSNhH0zMdFIuGVd0.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=27e0578a07b038c973ba3bdb868cc6b6c4c64855",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/LjCQBRW9HQIgNkL19efhVQBEX_5xSNhH0zMdFIuGVd0.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=49cb9d733ae603ecc127e4bde36abc08dab7a330",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/LjCQBRW9HQIgNkL19efhVQBEX_5xSNhH0zMdFIuGVd0.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=05eb7c83f2af3ae0740182c5e9bfeaf8c81fe01d",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/LjCQBRW9HQIgNkL19efhVQBEX_5xSNhH0zMdFIuGVd0.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=1cc20ee20207c1550311d7b7aff2a57fb8c8251e",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/LjCQBRW9HQIgNkL19efhVQBEX_5xSNhH0zMdFIuGVd0.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=4b746d4aba8590b78011f6db8c314c8dc7e80203",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "dbynB6j-q4QqvgBfhxVpspJ4VS-9yXvGU2FYv4my3Ak"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ddbd37",
            "id": "1gpqqox",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "turnersd",
            "discussion_type": null,
            "num_comments": 3,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gpqqox/python_for_r_users/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gpqqox/python_for_r_users/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731433956.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I have been using polars for the past few months and love it so much. So much faster and cleaner than pandas. I am about to start a new personal project that will use a lot of geo-dataframes and am thinking about which package to use. Geo pandas exists but its slow and I'd rather something more up to date and polars compatible.\n\nAfter doing some digging, Geopolars is well on the way but still a major work in progress, several months away from an alpha at least. I'd contribute but my rust isn't up to scratch. I think I might just have to use geopandas for now and convert my code to geopolars when it comes out. Anyone have any thoughts on this?",
            "author_fullname": "t2_1bubsafn",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Waiting for Geopolars",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gpkev1",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.9,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 32,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 32,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731417200.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have been using polars for the past few months and love it so much. So much faster and cleaner than pandas. I am about to start a new personal project that will use a lot of geo-dataframes and am thinking about which package to use. Geo pandas exists but its slow and I&amp;#39;d rather something more up to date and polars compatible.&lt;/p&gt;\n\n&lt;p&gt;After doing some digging, Geopolars is well on the way but still a major work in progress, several months away from an alpha at least. I&amp;#39;d contribute but my rust isn&amp;#39;t up to scratch. I think I might just have to use geopandas for now and convert my code to geopolars when it comes out. Anyone have any thoughts on this?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gpkev1",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "madmedina",
            "discussion_type": null,
            "num_comments": 18,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gpkev1/waiting_for_geopolars/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gpkev1/waiting_for_geopolars/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731417200.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I recently wrote a very long blog post about dependency management in Python. You can read it here:\n\n[https://nielscautaerts.xyz/python-dependency-management-is-a-dumpster-fire.html](https://nielscautaerts.xyz/python-dependency-management-is-a-dumpster-fire.html)\n\n**Why I wrote this**\n\nAnecdotally, it seems that very few people who write Python - even professionally - think seriously about dependencies. Part of that has to do with the tooling, but part of it has to do with a knowledge gap. That is a problem, because most Python projects have a lot of dependencies, and you can very quickly make a mess if you don't have a strategy to manage them. You have to think about dependencies if you want to build and maintain a serious Python project that you can collaborate on with multiple people and that you can deploy fearlessly. Initially I wrote this for my colleagues, but I'm sharing it here in case more people find it useful.\n\n**What it's about**\n\nIn the post, I go over what good dependency management is, why it is important, and why I believe it's hard to do well in Python. I then survey the tooling landscape (from the built in tools like pip and venv to the newest tools like uv and pixi) for creating reproducible environments, comparing advantages and disadvantages. Finally I give some suggestions on best practices and when to use what.\n\n\n\nI hope it is useful and relevant to r/Python. The same article is available on Medium with nicer styling but the rules say Medium links are banned. I hope pointing to my own blog site is allowed, and I apologize for the ugly styling.",
            "author_fullname": "t2_do1zt",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "A complete-ish guide to dependency management in Python",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Resource"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "resource",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gphzn2",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.93,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 165,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Resource",
            "can_mod_post": false,
            "score": 165,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731408423.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I recently wrote a very long blog post about dependency management in Python. You can read it here:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://nielscautaerts.xyz/python-dependency-management-is-a-dumpster-fire.html\"&gt;https://nielscautaerts.xyz/python-dependency-management-is-a-dumpster-fire.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Why I wrote this&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Anecdotally, it seems that very few people who write Python - even professionally - think seriously about dependencies. Part of that has to do with the tooling, but part of it has to do with a knowledge gap. That is a problem, because most Python projects have a lot of dependencies, and you can very quickly make a mess if you don&amp;#39;t have a strategy to manage them. You have to think about dependencies if you want to build and maintain a serious Python project that you can collaborate on with multiple people and that you can deploy fearlessly. Initially I wrote this for my colleagues, but I&amp;#39;m sharing it here in case more people find it useful.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What it&amp;#39;s about&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In the post, I go over what good dependency management is, why it is important, and why I believe it&amp;#39;s hard to do well in Python. I then survey the tooling landscape (from the built in tools like pip and venv to the newest tools like uv and pixi) for creating reproducible environments, comparing advantages and disadvantages. Finally I give some suggestions on best practices and when to use what.&lt;/p&gt;\n\n&lt;p&gt;I hope it is useful and relevant to &lt;a href=\"/r/Python\"&gt;r/Python&lt;/a&gt;. The same article is available on Medium with nicer styling but the rules say Medium links are banned. I hope pointing to my own blog site is allowed, and I apologize for the ugly styling.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ddbd37",
            "id": "1gphzn2",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "HarvestingPineapple",
            "discussion_type": null,
            "num_comments": 73,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gphzn2/a_completeish_guide_to_dependency_management_in/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gphzn2/a_completeish_guide_to_dependency_management_in/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731408423.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hi, [pyinapp\\_purchase](https://github.com/Michael-Jalloh/pyinapp_purchase) is a simple python library to helps to verify,consume and acknowledge in-app purchase with just the purchase token. Currently on supports google but apple verification is coming soon.\n\n  \n**What does it do:**\n\n* Seamless Integration: Quickly integrate the validator into existing Python applications.\n* Verification: Handles token verification directly with the Google Play Store API to ensure data authenticity.\n* Consumption: Handles token consumption if token wasn't consume client side.\n* Acknowledgement: Handles token acknowledgement.\n* Error Handling: Provides clear feedback for successful or failed token validations.\n* Lightweight and Performant: Minimal dependencies and optimized for fast, reliable performance.\n\n  \n**Target Audience?**\n\n* Its for backend developers working on mobile application, looking for ways to verify purchase done on their mobile app.\n* For backend developers looking to track purchases on their backend.\n\n**Comparison?**\n\n* **pyinapp**: it used receipt instead of purchase token\n* **inapp-purchases**: Last update 2018, [pyinapp\\_purchase](https://github.com/Michael-Jalloh/pyinapp_purchase) uses new apis",
            "author_fullname": "t2_6211a1uw",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "pyinapp_purchase: Verify In-app Purchase",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gphajd",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.8,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 9,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 9,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731405294.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi, &lt;a href=\"https://github.com/Michael-Jalloh/pyinapp_purchase\"&gt;pyinapp_purchase&lt;/a&gt; is a simple python library to helps to verify,consume and acknowledge in-app purchase with just the purchase token. Currently on supports google but apple verification is coming soon.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What does it do:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Seamless Integration: Quickly integrate the validator into existing Python applications.&lt;/li&gt;\n&lt;li&gt;Verification: Handles token verification directly with the Google Play Store API to ensure data authenticity.&lt;/li&gt;\n&lt;li&gt;Consumption: Handles token consumption if token wasn&amp;#39;t consume client side.&lt;/li&gt;\n&lt;li&gt;Acknowledgement: Handles token acknowledgement.&lt;/li&gt;\n&lt;li&gt;Error Handling: Provides clear feedback for successful or failed token validations.&lt;/li&gt;\n&lt;li&gt;Lightweight and Performant: Minimal dependencies and optimized for fast, reliable performance.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Its for backend developers working on mobile application, looking for ways to verify purchase done on their mobile app.&lt;/li&gt;\n&lt;li&gt;For backend developers looking to track purchases on their backend.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;pyinapp&lt;/strong&gt;: it used receipt instead of purchase token&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;inapp-purchases&lt;/strong&gt;: Last update 2018, &lt;a href=\"https://github.com/Michael-Jalloh/pyinapp_purchase\"&gt;pyinapp_purchase&lt;/a&gt; uses new apis&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/4ft_6Ue3g0eraC4W9BOKtcVfoTo8AG3_qerAHNZQPS0.jpg?auto=webp&amp;s=016d39bad34ffd0cdba6d677b7c26655cc110382",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/4ft_6Ue3g0eraC4W9BOKtcVfoTo8AG3_qerAHNZQPS0.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=596ed504962a675fd48294be718680e0b800fbb4",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/4ft_6Ue3g0eraC4W9BOKtcVfoTo8AG3_qerAHNZQPS0.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=aa7691440ed5a9df0821556eb54a14813cbc60d7",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/4ft_6Ue3g0eraC4W9BOKtcVfoTo8AG3_qerAHNZQPS0.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=b280df1c85f355ac558ccf54b43caa6fddfff353",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/4ft_6Ue3g0eraC4W9BOKtcVfoTo8AG3_qerAHNZQPS0.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=3581148604a4935656ceb478eb0bb665f9181c57",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/4ft_6Ue3g0eraC4W9BOKtcVfoTo8AG3_qerAHNZQPS0.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=b0d9a9977ff6952da842a70f603467e6f928226a",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/4ft_6Ue3g0eraC4W9BOKtcVfoTo8AG3_qerAHNZQPS0.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=bf99c4d00048baab2486fb36c84ef53bd5d25efa",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "ab74ni2oqz_IE9aOuwgm6QfLlPznmkjN8YoqUZNZLQ0"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gphajd",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Jolly_Huckleberry969",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gphajd/pyinapp_purchase_verify_inapp_purchase/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gphajd/pyinapp_purchase_verify_inapp_purchase/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731405294.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# What My Project Does\n\nProduction exceptions are overwhelming to deal with. Why cannot the code fix the exceptions themselves?\n\nGIF DEMO and LIVE DEMOs at Github page: [https://github.com/OpenExcept/SelfHeal/](https://github.com/OpenExcept/SelfHeal/)\n\n# Target Audience\n\nThis project is meant for a few different groups of audiences:\n\n1. production / on-call / site reliability engineers\n2. Implementation / solutions engineers who deal with lots of escalations\n\n# Comparison\n\nThe key feature is automatic analysis of root cause and suggesting fixes to code, which is not present previously.\n\nIn the future, we will add capability to automatically apply fix as PR to your codebase.",
            "author_fullname": "t2_8ad5th3cx",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Introducing SelfHeal: A framework to make all code self healing",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gpegv1",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.27,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1731423826.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731392544.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;Production exceptions are overwhelming to deal with. Why cannot the code fix the exceptions themselves?&lt;/p&gt;\n\n&lt;p&gt;GIF DEMO and LIVE DEMOs at Github page: &lt;a href=\"https://github.com/OpenExcept/SelfHeal/\"&gt;https://github.com/OpenExcept/SelfHeal/&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;This project is meant for a few different groups of audiences:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;production / on-call / site reliability engineers&lt;/li&gt;\n&lt;li&gt;Implementation / solutions engineers who deal with lots of escalations&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;The key feature is automatic analysis of root cause and suggesting fixes to code, which is not present previously.&lt;/p&gt;\n\n&lt;p&gt;In the future, we will add capability to automatically apply fix as PR to your codebase.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/vYjM9KmoDQYntkQZ1xTO9RhjwaCJ6vzOj8me81NOV_g.jpg?auto=webp&amp;s=7b3f49e081393fa440dac46861646931c944f806",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/vYjM9KmoDQYntkQZ1xTO9RhjwaCJ6vzOj8me81NOV_g.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=b527a109153136e84414469eb3da04371f2986cc",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/vYjM9KmoDQYntkQZ1xTO9RhjwaCJ6vzOj8me81NOV_g.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=502034ee68a140302c4c463f4a541677dc89e194",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/vYjM9KmoDQYntkQZ1xTO9RhjwaCJ6vzOj8me81NOV_g.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=e0ddf240334c37dc5311fcf7057604bb87f7d986",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/vYjM9KmoDQYntkQZ1xTO9RhjwaCJ6vzOj8me81NOV_g.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=2b8e8abb97c738c26d1d2816237d9431bafd9cde",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/vYjM9KmoDQYntkQZ1xTO9RhjwaCJ6vzOj8me81NOV_g.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=19048a741e86a0e9a0b6fc9a38371ce889481d12",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/vYjM9KmoDQYntkQZ1xTO9RhjwaCJ6vzOj8me81NOV_g.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=edcf871016fc97a5a3af058ed001a796d905f10a",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "tenNrrEdjN9YQsrShGY1lpA68F6BmFCIuLkkIjZ9DQs"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gpegv1",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Limp_Charity4080",
            "discussion_type": null,
            "num_comments": 8,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gpegv1/introducing_selfheal_a_framework_to_make_all_code/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gpegv1/introducing_selfheal_a_framework_to_make_all_code/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731392544.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I am currently working on a PCAP parser project using DPKT package and in one of the parsing item, I am trying to parse CIP (Common Industrial Protocol) and ENIP. ENIP data has fixed byte location inside TCP/UDP data. So, I am able to get ENIP command, but how to get CIP Service. Where the CIP data starts, I need first byte of it. I am unable to identify the starting point of CIP Data. I am having a python function that receives data as argument. I am passing that argument as TCP/UDP data.\n\nThe problem is that the CIP data size varies and it shows service at different location in different packets\n\nAny suggestion how to decode and get the correct CIP service?",
            "author_fullname": "t2_7e2sr5ak",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "How to Get CIP Service Using DPKT Package",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gpaqim",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.58,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 2,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 2,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731379650.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am currently working on a PCAP parser project using DPKT package and in one of the parsing item, I am trying to parse CIP (Common Industrial Protocol) and ENIP. ENIP data has fixed byte location inside TCP/UDP data. So, I am able to get ENIP command, but how to get CIP Service. Where the CIP data starts, I need first byte of it. I am unable to identify the starting point of CIP Data. I am having a python function that receives data as argument. I am passing that argument as TCP/UDP data.&lt;/p&gt;\n\n&lt;p&gt;The problem is that the CIP data size varies and it shows service at different location in different packets&lt;/p&gt;\n\n&lt;p&gt;Any suggestion how to decode and get the correct CIP service?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gpaqim",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Hot_Interest_4915",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gpaqim/how_to_get_cip_service_using_dpkt_package/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gpaqim/how_to_get_cip_service_using_dpkt_package/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731379650.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# Weekly Wednesday Thread: Advanced Questions 🐍\n\nDive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.\n\n## How it Works:\n\n1. **Ask Away**: Post your advanced Python questions here.\n2. **Expert Insights**: Get answers from experienced developers.\n3. **Resource Pool**: Share or discover tutorials, articles, and tips.\n\n## Guidelines:\n\n* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.\n* Questions that are not advanced may be removed and redirected to the appropriate thread.\n\n## Recommended Resources:\n\n* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.\n\n## Example Questions:\n\n1. **How can you implement a custom memory allocator in Python?**\n2. **What are the best practices for optimizing Cython code for heavy numerical computations?**\n3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**\n4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**\n5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**\n6. **What are some advanced use-cases for Python's decorators?**\n7. **How can you achieve real-time data streaming in Python with WebSockets?**\n8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**\n9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**\n10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**\n\nLet's deepen our Python knowledge together. Happy coding! 🌟",
            "author_fullname": "t2_6l4z3",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Tuesday Daily Thread: Advanced questions",
            "link_flair_richtext": [
                {
                    "a": ":pythonLogo:",
                    "e": "emoji",
                    "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                },
                {
                    "e": "text",
                    "t": " Daily Thread"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "daily-thread",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gp7a3y",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.86,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 5,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": ":pythonLogo: Daily Thread",
            "can_mod_post": false,
            "score": 5,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": true,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731369611.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Wednesday Thread: Advanced Questions 🐍&lt;/h1&gt;\n\n&lt;p&gt;Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Ask Away&lt;/strong&gt;: Post your advanced Python questions here.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Expert Insights&lt;/strong&gt;: Get answers from experienced developers.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Resource Pool&lt;/strong&gt;: Share or discover tutorials, articles, and tips.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This thread is for &lt;strong&gt;advanced questions only&lt;/strong&gt;. Beginner questions are welcome in our &lt;a href=\"#daily-beginner-thread-link\"&gt;Daily Beginner Thread&lt;/a&gt; every Thursday.&lt;/li&gt;\n&lt;li&gt;Questions that are not advanced may be removed and redirected to the appropriate thread.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Recommended Resources:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If you don&amp;#39;t receive a response, consider exploring &lt;a href=\"/r/LearnPython\"&gt;r/LearnPython&lt;/a&gt; or join the &lt;a href=\"https://discord.gg/python\"&gt;Python Discord Server&lt;/a&gt; for quicker assistance.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Questions:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;How can you implement a custom memory allocator in Python?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are the best practices for optimizing Cython code for heavy numerical computations?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How do you set up a multi-threaded architecture using Python&amp;#39;s Global Interpreter Lock (GIL)?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How would you go about implementing a distributed task queue using Celery and RabbitMQ?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are some advanced use-cases for Python&amp;#39;s decorators?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How can you achieve real-time data streaming in Python with WebSockets?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Best practices for securing a Flask (or similar) REST API with OAuth 2.0?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Let&amp;#39;s deepen our Python knowledge together. Happy coding! 🌟&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?auto=webp&amp;s=77877e508cacc3a5c51009b26cc51fd08031ca76",
                            "width": 512,
                            "height": 288
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=c5fbdf8efb5e6f14fe03845466b74ba9ebab4413",
                                "width": 108,
                                "height": 60
                            },
                            {
                                "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d57848912389eb70e32659895710a7c322a93edf",
                                "width": 216,
                                "height": 121
                            },
                            {
                                "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=86d869d6c6e16a13c5cf960ab69d7d274b49ff16",
                                "width": 320,
                                "height": 180
                            }
                        ],
                        "variants": {},
                        "id": "aNa9dCzuqtUFBkZTt98jjYpcv1i_lqriq_lbtm_LcRo"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": "moderator",
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#00a6a5",
            "id": "1gp7a3y",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "AutoModerator",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": false,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gp7a3y/tuesday_daily_thread_advanced_questions/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gp7a3y/tuesday_daily_thread_advanced_questions/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731369611.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hi r/python!\n\nI'm excited to present [**pipefunc**](https://github.com/pipefunc/pipefunc), an open-source Python library that transforms how we create and manage pipelines for scientific computations.\n\n**What My Project Does:**\n\n&gt;Definition: A *pipeline* is a sequence of interconnected functions, structured as a [Directed Acyclic Graph](https://en.wikipedia.org/wiki/Directed_acyclic_graph) (DAG), where outputs from one or more functions serve as inputs to subsequent ones. pipefunc streamlines the creation and management of these pipelines, offering powerful tools to efficiently execute them.\n\n* **Convert Functions into Reusable Pipelines:** With minimal changes.\n* **Pipeline Visualization &amp; Resource Profiling**\n* **Automatic Parallelization:** Supports both local and SLURM cluster execution.\n* **Ultra-Fast Performance**: Minimal overhead of about 15 µs per function in the graph, ensuring blazingly fast execution.\n* **Automatic Type Annotations Validation**\n\nBuilt with NetworkX, NumPy, and optional integration with Xarray, Zarr, and Adaptive, pipefunc is perfect for handling the complex interdependencies and data flows typical in computational projects.\n\n*Key Advantages of PipeFunc:*\n\nThe standout feature of pipefunc is its adept handling of N-dimensional parameter sweeps, a frequent requirement in scientific research. For instance, in many sciences, you might encounter a 4D sweep over parameters x, y, z, and time. Traditional tools create a separate task for every parameter combination, leading to computational bottlenecks—imagine a 50 x 50 x 50 x 50 grid generating 6.5 million tasks before computation even starts.\n\npipefunc simplifies this with an index-based approach, using four axes, each a list of length 50, with indices pointing to positions. This not only streamlines the setup by focusing on the pipeline but also reduces overhead with a manageable range of indices. Starting on a cluster or locally is as simple as a single function call!\n\n*Quality Assurance:* Over 600 tests ensure 100% test coverage, with full type annotations and adherence to Ruff Rules.\n\n**Target Audience?**\n\n* Scientific HPC Workflows: Efficiently manage complex computational tasks in high-performance computing environments.\n* ML Workflows: Streamline your data preprocessing, model training, and evaluation pipelines.\n\n**Comparison?**\n\n* **Vs. Luigi, Airflow, Prefect, Kedro:** While tailored for event-driven and ETL processes, pipefunc excels in simulations and complex computational workflows, adapting easily to varied resources.\n* **Vs. Dask:** Although Dask is excellent for low-level parallelism, pipefunc offers higher-level abstraction with effortless task distribution and dependency management.\n\nTry **pipefunc**! Whether you want to star the repo, contribute, or just browse the documentation, it's all appreciated.\n\nI'm here to answer questions or dive into any discussion!\n\n* [docs](https://pipefunc.readthedocs.io/)\n* [source](https://github.com/pipefunc/pipefunc)\n",
            "author_fullname": "t2_yquzb",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "PipeFunc: Structure, Automate, and Simplify Your Computational Workflows",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gp79mj",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.9,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 34,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 34,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1731369849.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731369577.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi &lt;a href=\"/r/python\"&gt;r/python&lt;/a&gt;!&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m excited to present &lt;a href=\"https://github.com/pipefunc/pipefunc\"&gt;&lt;strong&gt;pipefunc&lt;/strong&gt;&lt;/a&gt;, an open-source Python library that transforms how we create and manage pipelines for scientific computations.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Definition: A &lt;em&gt;pipeline&lt;/em&gt; is a sequence of interconnected functions, structured as a &lt;a href=\"https://en.wikipedia.org/wiki/Directed_acyclic_graph\"&gt;Directed Acyclic Graph&lt;/a&gt; (DAG), where outputs from one or more functions serve as inputs to subsequent ones. pipefunc streamlines the creation and management of these pipelines, offering powerful tools to efficiently execute them.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Convert Functions into Reusable Pipelines:&lt;/strong&gt; With minimal changes.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Pipeline Visualization &amp;amp; Resource Profiling&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Automatic Parallelization:&lt;/strong&gt; Supports both local and SLURM cluster execution.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Ultra-Fast Performance&lt;/strong&gt;: Minimal overhead of about 15 µs per function in the graph, ensuring blazingly fast execution.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Automatic Type Annotations Validation&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Built with NetworkX, NumPy, and optional integration with Xarray, Zarr, and Adaptive, pipefunc is perfect for handling the complex interdependencies and data flows typical in computational projects.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Key Advantages of PipeFunc:&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;The standout feature of pipefunc is its adept handling of N-dimensional parameter sweeps, a frequent requirement in scientific research. For instance, in many sciences, you might encounter a 4D sweep over parameters x, y, z, and time. Traditional tools create a separate task for every parameter combination, leading to computational bottlenecks—imagine a 50 x 50 x 50 x 50 grid generating 6.5 million tasks before computation even starts.&lt;/p&gt;\n\n&lt;p&gt;pipefunc simplifies this with an index-based approach, using four axes, each a list of length 50, with indices pointing to positions. This not only streamlines the setup by focusing on the pipeline but also reduces overhead with a manageable range of indices. Starting on a cluster or locally is as simple as a single function call!&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Quality Assurance:&lt;/em&gt; Over 600 tests ensure 100% test coverage, with full type annotations and adherence to Ruff Rules.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Scientific HPC Workflows: Efficiently manage complex computational tasks in high-performance computing environments.&lt;/li&gt;\n&lt;li&gt;ML Workflows: Streamline your data preprocessing, model training, and evaluation pipelines.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Vs. Luigi, Airflow, Prefect, Kedro:&lt;/strong&gt; While tailored for event-driven and ETL processes, pipefunc excels in simulations and complex computational workflows, adapting easily to varied resources.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Vs. Dask:&lt;/strong&gt; Although Dask is excellent for low-level parallelism, pipefunc offers higher-level abstraction with effortless task distribution and dependency management.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Try &lt;strong&gt;pipefunc&lt;/strong&gt;! Whether you want to star the repo, contribute, or just browse the documentation, it&amp;#39;s all appreciated.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m here to answer questions or dive into any discussion!&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://pipefunc.readthedocs.io/\"&gt;docs&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/pipefunc/pipefunc\"&gt;source&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/5oG9_QmgQmN-WHg8pb5TuJib5LvqpOf3wS7JmMexNpE.jpg?auto=webp&amp;s=08e8fa9208171c102180e70e69c791c9cf914dfe",
                            "width": 2387,
                            "height": 1204
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/5oG9_QmgQmN-WHg8pb5TuJib5LvqpOf3wS7JmMexNpE.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=a39f73e60daf15eb575862e02a59128031a51c0e",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/5oG9_QmgQmN-WHg8pb5TuJib5LvqpOf3wS7JmMexNpE.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=1eafbafa10632e0a2e3a852688afcedbcb8b3828",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/5oG9_QmgQmN-WHg8pb5TuJib5LvqpOf3wS7JmMexNpE.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=51a9cf371df16d3e05e23850d29b354b950c6520",
                                "width": 320,
                                "height": 161
                            },
                            {
                                "url": "https://external-preview.redd.it/5oG9_QmgQmN-WHg8pb5TuJib5LvqpOf3wS7JmMexNpE.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=921e13e3f01410b7634e22e2f2ffdd0fc8550d81",
                                "width": 640,
                                "height": 322
                            },
                            {
                                "url": "https://external-preview.redd.it/5oG9_QmgQmN-WHg8pb5TuJib5LvqpOf3wS7JmMexNpE.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=9df31101263cf2ce930cff5353c39c9292cbea92",
                                "width": 960,
                                "height": 484
                            },
                            {
                                "url": "https://external-preview.redd.it/5oG9_QmgQmN-WHg8pb5TuJib5LvqpOf3wS7JmMexNpE.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=0b819e746df952010ae4a9b4021001535b98da86",
                                "width": 1080,
                                "height": 544
                            }
                        ],
                        "variants": {},
                        "id": "OztuuzFSGCUH89ERRecrl-zx3x361b-DbVY2lk0bVuo"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gp79mj",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "basnijholt",
            "discussion_type": null,
            "num_comments": 9,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gp79mj/pipefunc_structure_automate_and_simplify_your/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gp79mj/pipefunc_structure_automate_and_simplify_your/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731369577.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hi all,\n\n`htmy` 0.3 just got released. The new major features since the first release are markdown support with customization tools and internationalization (both with async I/O).\n\nYou can check out [markdown](https://volfpeter.github.io/htmy/examples/markdown/) and [internationalization](https://volfpeter.github.io/htmy/examples/internationalization/) examples in the docs (well, [FastAPI](https://volfpeter.github.io/htmy/examples/fastapi-htmx-tailwind-daisyui/) as well).\n\nThere are a few more planned features and tutorials, like FastAPI and HTMX integration with [FastHX](https://volfpeter.github.io/fasthx/). See the issue tracker for details.",
            "author_fullname": "t2_41tzgwu2",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "htmy: async, pure-Python server-side rendering, now with markdown support and internationalization ",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "News"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "news",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gp3mww",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.94,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 24,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "News",
            "can_mod_post": false,
            "score": 24,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731360249.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi all,&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;htmy&lt;/code&gt; 0.3 just got released. The new major features since the first release are markdown support with customization tools and internationalization (both with async I/O).&lt;/p&gt;\n\n&lt;p&gt;You can check out &lt;a href=\"https://volfpeter.github.io/htmy/examples/markdown/\"&gt;markdown&lt;/a&gt; and &lt;a href=\"https://volfpeter.github.io/htmy/examples/internationalization/\"&gt;internationalization&lt;/a&gt; examples in the docs (well, &lt;a href=\"https://volfpeter.github.io/htmy/examples/fastapi-htmx-tailwind-daisyui/\"&gt;FastAPI&lt;/a&gt; as well).&lt;/p&gt;\n\n&lt;p&gt;There are a few more planned features and tutorials, like FastAPI and HTMX integration with &lt;a href=\"https://volfpeter.github.io/fasthx/\"&gt;FastHX&lt;/a&gt;. See the issue tracker for details.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#7193ff",
            "id": "1gp3mww",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "volfpeter",
            "discussion_type": null,
            "num_comments": 4,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gp3mww/htmy_async_purepython_serverside_rendering_now/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gp3mww/htmy_async_purepython_serverside_rendering_now/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731360249.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Alright, serious question: has anyone here actually tried to code in Python from their phone using apps like Pydroid or similar? I downloaded a couple of these apps (Pydroid, QPython, etc.) thinking “maybe I can get some quick coding done,” but… I dunno, between the tiny keyboard, limited features, and the small screen, it feels impossible.\n\nI’m wondering if anyone has actually managed to do anything useful with this, or if it’s just one of those things that sounds good but in practice is like using a screwdriver to cut a cake. 🍰\n\nIf you’ve got experiences, tips, or some kind of setup that works decently, let me know. Maybe there’s a trick I’m missing that could make this less frustrating!",
            "author_fullname": "t2_9wmlg1b1",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Programming from your phone: has anyone actually managed to do it?",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gp2zw4",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.77,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 101,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 101,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731358702.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Alright, serious question: has anyone here actually tried to code in Python from their phone using apps like Pydroid or similar? I downloaded a couple of these apps (Pydroid, QPython, etc.) thinking “maybe I can get some quick coding done,” but… I dunno, between the tiny keyboard, limited features, and the small screen, it feels impossible.&lt;/p&gt;\n\n&lt;p&gt;I’m wondering if anyone has actually managed to do anything useful with this, or if it’s just one of those things that sounds good but in practice is like using a screwdriver to cut a cake. 🍰&lt;/p&gt;\n\n&lt;p&gt;If you’ve got experiences, tips, or some kind of setup that works decently, let me know. Maybe there’s a trick I’m missing that could make this less frustrating!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gp2zw4",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Elegant-Fix8085",
            "discussion_type": null,
            "num_comments": 155,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gp2zw4/programming_from_your_phone_has_anyone_actually/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gp2zw4/programming_from_your_phone_has_anyone_actually/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731358702.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hi everyone,  \nI hope this package will help some of us to find and check unique name for our new packages.\n\nnameisok is a Python package that helps  \ndevelopers check the availability of package names on PyPI, taking it  \none step further with enhanced functionality. This tool is perfect for  \nanyone looking to publish new packages and wanting to avoid name  \nconflicts or similar names that could cause confusion. \n\n**Key Features**\n\nPyPI Availability Check: Quickly checks PyPI to see if a package name is available for registration.  \nBigQuery Database Check: Uses the PyPI dataset on Google BigQuery for additional verification of package name availability.  \nSimilarity Check: Detects names that are too similar to existing  \npackages, based on a customizable similarity threshold, preventing  \npotential naming conflicts.\n\n**What is different in this package ?** \n\nOn PyPI there are packages that does check for PyPI with a request, this package ensures it is not one of reserved names in python and second applying a similarity check it helps developers to waste their time to change their package name only while trying to push to PyPI. \n\n**Who are the target audience?** \n\nThis package may be helpful for all developers who currently develop their own opensource packages to share on PyPI and also future developers that may publish their own packages to PyPI to share with the world or with their teams. \n\nUsage\n\n`pip install nameisok -U`  \n`nameisok example,numpyyy,MyAwesomePackageName, MyGreatPackageName,nameisok`\n\n❌ \\`example\\` is already taken.❌ \\`numpyyy\\` is very similar to \\`numpy\\`, \\`numpy-extensions\\`  \n❌ Unfortunately, the name 'MyAwesomePackageName' is too similar to existing projects:  \n\\- awesome-package  \n\\- my-awesome-package  \n\\- my-awesome-package-way  \n\\- my-awesome-package1\n\n❌ \\`numpyyy\\` is very similar to \\`numpy\\`, \\`numpy-extensions\\`  \n🎉 Wow! \\`MyGreatPackageName\\` is available!  \n❌ \\`nameisok\\` is already taken.\n\n[Github:nameisok](https://github.com/SermetPekin/nameisok)",
            "author_fullname": "t2_8oaoaeo0",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Checking availability of a package name on PyPI",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gp2gwo",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.67,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 3,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 3,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731357404.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi everyone,&lt;br/&gt;\nI hope this package will help some of us to find and check unique name for our new packages.&lt;/p&gt;\n\n&lt;p&gt;nameisok is a Python package that helps&lt;br/&gt;\ndevelopers check the availability of package names on PyPI, taking it&lt;br/&gt;\none step further with enhanced functionality. This tool is perfect for&lt;br/&gt;\nanyone looking to publish new packages and wanting to avoid name&lt;br/&gt;\nconflicts or similar names that could cause confusion. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Key Features&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;PyPI Availability Check: Quickly checks PyPI to see if a package name is available for registration.&lt;br/&gt;\nBigQuery Database Check: Uses the PyPI dataset on Google BigQuery for additional verification of package name availability.&lt;br/&gt;\nSimilarity Check: Detects names that are too similar to existing&lt;br/&gt;\npackages, based on a customizable similarity threshold, preventing&lt;br/&gt;\npotential naming conflicts.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What is different in this package ?&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;On PyPI there are packages that does check for PyPI with a request, this package ensures it is not one of reserved names in python and second applying a similarity check it helps developers to waste their time to change their package name only while trying to push to PyPI. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Who are the target audience?&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;This package may be helpful for all developers who currently develop their own opensource packages to share on PyPI and also future developers that may publish their own packages to PyPI to share with the world or with their teams. &lt;/p&gt;\n\n&lt;p&gt;Usage&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;pip install nameisok -U&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;nameisok example,numpyyy,MyAwesomePackageName, MyGreatPackageName,nameisok&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;❌ `example` is already taken.❌ `numpyyy` is very similar to `numpy`, `numpy-extensions`&lt;br/&gt;\n❌ Unfortunately, the name &amp;#39;MyAwesomePackageName&amp;#39; is too similar to existing projects:&lt;br/&gt;\n- awesome-package&lt;br/&gt;\n- my-awesome-package&lt;br/&gt;\n- my-awesome-package-way&lt;br/&gt;\n- my-awesome-package1&lt;/p&gt;\n\n&lt;p&gt;❌ `numpyyy` is very similar to `numpy`, `numpy-extensions`&lt;br/&gt;\n🎉 Wow! `MyGreatPackageName` is available!&lt;br/&gt;\n❌ `nameisok` is already taken.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/SermetPekin/nameisok\"&gt;Github:nameisok&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/xxNgxw7D02QLwKUu6cPKVyAkPKQ_E1WIhXXc8Nvl8hY.jpg?auto=webp&amp;s=094b03360882b40208433fb9e24b8d7d61395b38",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/xxNgxw7D02QLwKUu6cPKVyAkPKQ_E1WIhXXc8Nvl8hY.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=7da2545d5cd46b470eeab5bf526aa2598ef2f69b",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/xxNgxw7D02QLwKUu6cPKVyAkPKQ_E1WIhXXc8Nvl8hY.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=29fa116b6663ba95da32549536c4c72f9d71de48",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/xxNgxw7D02QLwKUu6cPKVyAkPKQ_E1WIhXXc8Nvl8hY.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=ab74bc5103f0f3e41295e094f074a1a451052abe",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/xxNgxw7D02QLwKUu6cPKVyAkPKQ_E1WIhXXc8Nvl8hY.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=e62e704200c85c7ed61ef935d7e02ddb7e4fe1d6",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/xxNgxw7D02QLwKUu6cPKVyAkPKQ_E1WIhXXc8Nvl8hY.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=381e6dd56ecc8aa19dc22a3961af7b41acee1be6",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/xxNgxw7D02QLwKUu6cPKVyAkPKQ_E1WIhXXc8Nvl8hY.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=49a732ae8c4c36cbe480b79fab4ecfee7d1332f0",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "Fh8-9_HbDGvjCfwzT-RYV5RbQlo2rtSuqc21ZeLnthg"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gp2gwo",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "No-Consequence-3216",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gp2gwo/checking_availability_of_a_package_name_on_pypi/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gp2gwo/checking_availability_of_a_package_name_on_pypi/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731357404.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# [PGQueuer v0.15.0 Release] Now with Recurring Job Scheduling!\n\nHey r/Python! I'm thrilled to announce the release of PGQueuer v0.15.0. PGQueuer is a minimalist job queue library for Python that leverages PostgreSQL for high-performance, real-time background processing. This release brings a major new feature: **Recurring Job Scheduling**.\n\n### What My Project Does\nPGQueuer is a lightweight job queue library for Python that uses PostgreSQL for managing background jobs. It allows you to queue up tasks that can be processed asynchronously, leveraging PostgreSQL's robustness and native features like `LISTEN/NOTIFY` and `FOR UPDATE SKIP LOCKED`. PGQueuer now also supports scheduling recurring jobs using cron-like syntax, ideal for automating tasks such as routine cleanups or data synchronization.\n\n### Target Audience\nPGQueuer is intended for developers looking for a simple, efficient, and production-ready job queue solution that integrates seamlessly with PostgreSQL. It's ideal for teams that want a reliable background task manager without the overhead of setting up additional infrastructure like Redis or RabbitMQ. This is not just a toy project; it's built for production use and designed to handle high-throughput environments.\n\n### Comparison with Alternatives\nCompared to other job queue systems like Celery, PGQueuer focuses on minimalism and tight integration with PostgreSQL. Unlike Celery, which often requires Redis or RabbitMQ, PGQueuer relies solely on PostgreSQL, reducing the need for additional infrastructure. Its use of PostgreSQL features like `LISTEN/NOTIFY` makes it particularly suitable for applications already using PostgreSQL, allowing developers to manage both their jobs and data within the same database system.\n\n### What's New?\n- **Recurring Job Scheduling**: You can now schedule jobs using cron-like syntax with the `SchedulerManager`. This feature is perfect for automating repetitive tasks, like data synchronization or routine cleanups.\n\n### Example of the New Scheduling Feature\nWant to schedule a task every minute? Here's how:\n```python\n@scheduler.schedule(\"sync_data\", \"* * * * *\")\nasync def sync_data(schedule: Schedule) -&gt; None:\n    print(\"Running scheduled sync_data task\")\n```\nRun the scheduler with:\n```bash\npgq run myapp.create_scheduler\n```\n**Note**: Don't forget to run the database migration to use the new scheduler:\n```bash\npython -m pgqueuer upgrade\n```\n\nI'd love for you to try PGQueuer and give me your feedback. If you need high-throughput job management with PostgreSQL's reliability, give it a go!\n\nGitHub: [PGQueuer Repo](https://github.com/janbjorge/pgqueuer)\n\nFeel free to ask questions or share your thoughts, and happy coding everyone!\n\n",
            "author_fullname": "t2_ch1yi",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "[PGQueuer v0.15.0 Release] Now with Recurring Job Scheduling!",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gp19no",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.85,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 12,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 12,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731354553.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;[PGQueuer v0.15.0 Release] Now with Recurring Job Scheduling!&lt;/h1&gt;\n\n&lt;p&gt;Hey &lt;a href=\"/r/Python\"&gt;r/Python&lt;/a&gt;! I&amp;#39;m thrilled to announce the release of PGQueuer v0.15.0. PGQueuer is a minimalist job queue library for Python that leverages PostgreSQL for high-performance, real-time background processing. This release brings a major new feature: &lt;strong&gt;Recurring Job Scheduling&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;h3&gt;What My Project Does&lt;/h3&gt;\n\n&lt;p&gt;PGQueuer is a lightweight job queue library for Python that uses PostgreSQL for managing background jobs. It allows you to queue up tasks that can be processed asynchronously, leveraging PostgreSQL&amp;#39;s robustness and native features like &lt;code&gt;LISTEN/NOTIFY&lt;/code&gt; and &lt;code&gt;FOR UPDATE SKIP LOCKED&lt;/code&gt;. PGQueuer now also supports scheduling recurring jobs using cron-like syntax, ideal for automating tasks such as routine cleanups or data synchronization.&lt;/p&gt;\n\n&lt;h3&gt;Target Audience&lt;/h3&gt;\n\n&lt;p&gt;PGQueuer is intended for developers looking for a simple, efficient, and production-ready job queue solution that integrates seamlessly with PostgreSQL. It&amp;#39;s ideal for teams that want a reliable background task manager without the overhead of setting up additional infrastructure like Redis or RabbitMQ. This is not just a toy project; it&amp;#39;s built for production use and designed to handle high-throughput environments.&lt;/p&gt;\n\n&lt;h3&gt;Comparison with Alternatives&lt;/h3&gt;\n\n&lt;p&gt;Compared to other job queue systems like Celery, PGQueuer focuses on minimalism and tight integration with PostgreSQL. Unlike Celery, which often requires Redis or RabbitMQ, PGQueuer relies solely on PostgreSQL, reducing the need for additional infrastructure. Its use of PostgreSQL features like &lt;code&gt;LISTEN/NOTIFY&lt;/code&gt; makes it particularly suitable for applications already using PostgreSQL, allowing developers to manage both their jobs and data within the same database system.&lt;/p&gt;\n\n&lt;h3&gt;What&amp;#39;s New?&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Recurring Job Scheduling&lt;/strong&gt;: You can now schedule jobs using cron-like syntax with the &lt;code&gt;SchedulerManager&lt;/code&gt;. This feature is perfect for automating repetitive tasks, like data synchronization or routine cleanups.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3&gt;Example of the New Scheduling Feature&lt;/h3&gt;\n\n&lt;p&gt;Want to schedule a task every minute? Here&amp;#39;s how:\n&lt;code&gt;python\n@scheduler.schedule(&amp;quot;sync_data&amp;quot;, &amp;quot;* * * * *&amp;quot;)\nasync def sync_data(schedule: Schedule) -&amp;gt; None:\n    print(&amp;quot;Running scheduled sync_data task&amp;quot;)\n&lt;/code&gt;\nRun the scheduler with:\n&lt;code&gt;bash\npgq run myapp.create_scheduler\n&lt;/code&gt;\n&lt;strong&gt;Note&lt;/strong&gt;: Don&amp;#39;t forget to run the database migration to use the new scheduler:\n&lt;code&gt;bash\npython -m pgqueuer upgrade\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;d love for you to try PGQueuer and give me your feedback. If you need high-throughput job management with PostgreSQL&amp;#39;s reliability, give it a go!&lt;/p&gt;\n\n&lt;p&gt;GitHub: &lt;a href=\"https://github.com/janbjorge/pgqueuer\"&gt;PGQueuer Repo&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Feel free to ask questions or share your thoughts, and happy coding everyone!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/YTtE1jDdwprhv77_pqTqQvTSoRhIAXb0JF0CnkFPv04.jpg?auto=webp&amp;s=f4724e30d47d415a691462234965220836d5fe80",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/YTtE1jDdwprhv77_pqTqQvTSoRhIAXb0JF0CnkFPv04.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=d84094b78b025371afa94e912522067bee08b797",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/YTtE1jDdwprhv77_pqTqQvTSoRhIAXb0JF0CnkFPv04.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=a16c36c92aac0045216f87be51dc7de95cd3a2ca",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/YTtE1jDdwprhv77_pqTqQvTSoRhIAXb0JF0CnkFPv04.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=fa1e0acf9c534cf57874092e85e42e94e07645fb",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/YTtE1jDdwprhv77_pqTqQvTSoRhIAXb0JF0CnkFPv04.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=a6933206ffa1c27a8d81ff436f8b865249072022",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/YTtE1jDdwprhv77_pqTqQvTSoRhIAXb0JF0CnkFPv04.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=7b404392579d7ac1f74acc8abac864f8fd08a7bb",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/YTtE1jDdwprhv77_pqTqQvTSoRhIAXb0JF0CnkFPv04.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=d3d4b1059a87db291d354a8162a3216da332655d",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "-qMPrznIK039gTeGPC_iRYCcMst6G_OsvG4SY7uhduI"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gp19no",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "GabelSnabel",
            "discussion_type": null,
            "num_comments": 3,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gp19no/pgqueuer_v0150_release_now_with_recurring_job/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gp19no/pgqueuer_v0150_release_now_with_recurring_job/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731354553.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# What My Project Does\nCyclopts is a [Typer](https://typer.tiangolo.com)-inspired library that generates CLI interfaces from a function's signature, type-hints, and docstrings.\n\n# Target Audience\nCyclopts is production ready and can be used in any situation where an alternative (Typer/Click/Argparse) would have been used.\n\n# Comparison\nCyclopts [addresses a bunch of shortcomings/issues with Typer](https://cyclopts.readthedocs.io/en/latest/vs_typer/README.html). Cyclopts results in [much less code that is much easier to read](https://github.com/BrianPugh/cyclopts?tab=readme-ov-file#compared-to-typer).\n\n# Details\n\nCyclopts v3's headlining feature is that it [now supports pydantic/dataclass/attrs type hints](https://cyclopts.readthedocs.io/en/latest/user_classes.html). For example:\n\n```python\nfrom cyclopts import App\nfrom dataclasses import dataclass\n\napp = App(name=\"movie-maintainer\")\n\n@dataclass\nclass Movie:\n   title: str\n   year: int\n\n@app.command\ndef add(movie: Movie):\n   print(f\"Adding movie: {movie}\")\n\napp()\n```\n\nResults in the CLI:\n\n```bash\n$ movie-maintainer add --help\nUsage: movie-maintainer add [ARGS] [OPTIONS]\n\n╭─ Parameters ────────────────────────────────────────────────╮\n│ *  MOVIE.TITLE              [required]                      │\n│      --movie.title                                          │\n│ *  MOVIE.YEAR --movie.year  [required]                      │\n╰─────────────────────────────────────────────────────────────╯\n\n$ movie-maintainer add 'Mad Max: Fury Road' 2015\nAdding movie: Movie(title='Mad Max: Fury Road', year=2015)\n\n$ movie-maintainer add --movie.title 'Furiosa: A Mad Max Saga' --movie.year 2024\nAdding movie: Movie(title='Furiosa: A Mad Max Saga', year=2024)\n```\n\nThe behavior is pretty customizable, for example you can easily [flatten the namespace](https://cyclopts.readthedocs.io/en/latest/user_classes.html#namespace-flattening) if you don't want to expose the `--movie` prefix to the CLI.\n\nTo install:\n\n```\npip install cyclopts\n```\n\nProject Repo: https://github.com/BrianPugh/cyclopts\n\nDocs: https://cyclopts.readthedocs.io/en/latest/\n",
            "author_fullname": "t2_64h7p",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Cyclopts v3 released: Typer-inspired CLI library now with pydantic/dataclass/attrs support.",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gotc0v",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.86,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 5,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 5,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731335052.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;Cyclopts is a &lt;a href=\"https://typer.tiangolo.com\"&gt;Typer&lt;/a&gt;-inspired library that generates CLI interfaces from a function&amp;#39;s signature, type-hints, and docstrings.&lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;Cyclopts is production ready and can be used in any situation where an alternative (Typer/Click/Argparse) would have been used.&lt;/p&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;Cyclopts &lt;a href=\"https://cyclopts.readthedocs.io/en/latest/vs_typer/README.html\"&gt;addresses a bunch of shortcomings/issues with Typer&lt;/a&gt;. Cyclopts results in &lt;a href=\"https://github.com/BrianPugh/cyclopts?tab=readme-ov-file#compared-to-typer\"&gt;much less code that is much easier to read&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h1&gt;Details&lt;/h1&gt;\n\n&lt;p&gt;Cyclopts v3&amp;#39;s headlining feature is that it &lt;a href=\"https://cyclopts.readthedocs.io/en/latest/user_classes.html\"&gt;now supports pydantic/dataclass/attrs type hints&lt;/a&gt;. For example:&lt;/p&gt;\n\n&lt;p&gt;```python\nfrom cyclopts import App\nfrom dataclasses import dataclass&lt;/p&gt;\n\n&lt;p&gt;app = App(name=&amp;quot;movie-maintainer&amp;quot;)&lt;/p&gt;\n\n&lt;p&gt;@dataclass\nclass Movie:\n   title: str\n   year: int&lt;/p&gt;\n\n&lt;p&gt;@app.command\ndef add(movie: Movie):\n   print(f&amp;quot;Adding movie: {movie}&amp;quot;)&lt;/p&gt;\n\n&lt;p&gt;app()\n```&lt;/p&gt;\n\n&lt;p&gt;Results in the CLI:&lt;/p&gt;\n\n&lt;p&gt;```bash\n$ movie-maintainer add --help\nUsage: movie-maintainer add [ARGS] [OPTIONS]&lt;/p&gt;\n\n&lt;p&gt;╭─ Parameters ────────────────────────────────────────────────╮\n│ *  MOVIE.TITLE              [required]                      │\n│      --movie.title                                          │\n│ *  MOVIE.YEAR --movie.year  [required]                      │\n╰─────────────────────────────────────────────────────────────╯&lt;/p&gt;\n\n&lt;p&gt;$ movie-maintainer add &amp;#39;Mad Max: Fury Road&amp;#39; 2015\nAdding movie: Movie(title=&amp;#39;Mad Max: Fury Road&amp;#39;, year=2015)&lt;/p&gt;\n\n&lt;p&gt;$ movie-maintainer add --movie.title &amp;#39;Furiosa: A Mad Max Saga&amp;#39; --movie.year 2024\nAdding movie: Movie(title=&amp;#39;Furiosa: A Mad Max Saga&amp;#39;, year=2024)\n```&lt;/p&gt;\n\n&lt;p&gt;The behavior is pretty customizable, for example you can easily &lt;a href=\"https://cyclopts.readthedocs.io/en/latest/user_classes.html#namespace-flattening\"&gt;flatten the namespace&lt;/a&gt; if you don&amp;#39;t want to expose the &lt;code&gt;--movie&lt;/code&gt; prefix to the CLI.&lt;/p&gt;\n\n&lt;p&gt;To install:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\npip install cyclopts\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Project Repo: &lt;a href=\"https://github.com/BrianPugh/cyclopts\"&gt;https://github.com/BrianPugh/cyclopts&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Docs: &lt;a href=\"https://cyclopts.readthedocs.io/en/latest/\"&gt;https://cyclopts.readthedocs.io/en/latest/&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/tWGKh8MSZ96TZfPAZzn_O8cSpWDeVzRE1FNP4M3WcFU.jpg?auto=webp&amp;s=10c2a046fb59dda5a348f1876aac517572b3d49b",
                            "width": 1200,
                            "height": 630
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/tWGKh8MSZ96TZfPAZzn_O8cSpWDeVzRE1FNP4M3WcFU.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=f3535c20ac135738fbebe4a3bcb6f3aa8bace2d6",
                                "width": 108,
                                "height": 56
                            },
                            {
                                "url": "https://external-preview.redd.it/tWGKh8MSZ96TZfPAZzn_O8cSpWDeVzRE1FNP4M3WcFU.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=8503193ec3598ba643975d3c87a83cfb2c037d96",
                                "width": 216,
                                "height": 113
                            },
                            {
                                "url": "https://external-preview.redd.it/tWGKh8MSZ96TZfPAZzn_O8cSpWDeVzRE1FNP4M3WcFU.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=fb8e9d9cf79ba1154d0723eb2133513c47c7000d",
                                "width": 320,
                                "height": 168
                            },
                            {
                                "url": "https://external-preview.redd.it/tWGKh8MSZ96TZfPAZzn_O8cSpWDeVzRE1FNP4M3WcFU.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=2a84496f7deb7f22633d973bb321b0044c376638",
                                "width": 640,
                                "height": 336
                            },
                            {
                                "url": "https://external-preview.redd.it/tWGKh8MSZ96TZfPAZzn_O8cSpWDeVzRE1FNP4M3WcFU.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=c97f310fbc0fb4cb678e227c711f7a1c7e9b7123",
                                "width": 960,
                                "height": 504
                            },
                            {
                                "url": "https://external-preview.redd.it/tWGKh8MSZ96TZfPAZzn_O8cSpWDeVzRE1FNP4M3WcFU.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=339a662ed174bca12f99cbd5a08442bf178b1504",
                                "width": 1080,
                                "height": 567
                            }
                        ],
                        "variants": {},
                        "id": "7PVioQUvo3nvv4utWhFbr1ytAPZ-_kX6aQGBQU2eSGs"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gotc0v",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "guyfrom7up",
            "discussion_type": null,
            "num_comments": 3,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gotc0v/cyclopts_v3_released_typerinspired_cli_library/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gotc0v/cyclopts_v3_released_typerinspired_cli_library/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731335052.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I wanted to develop a simple command line tool that would assist me with developing some Python skills in addition to practicing Regular Expressions - so the aim was to build a simple tool that would sort input words by language frequency which is helpful in solving Wordle and Spelling Bee puzzles.\n\n**Motivation**\n\nI've found that solving Wordle with grep is a great way to practice Regular Expressions - I pipe the grep output to wordgradient to sort the output words by language frequency. It's also a lot of fun! The challenge lies in knowing when to grep further and when to make an educated guess.\n\n**What My Project Does**\n\nThe tool orders input words by language frequency with various options - head (displays top ten most frequent words), tail (displays ten least frequent words), inverse ordering and a bonus rainbow colour option (who doesn't like rainbows?)\n\n**Target Audience**\n\nInitially the project started as a fun way to solve Wordle puzzles but I can see myself using this for other purposes such as asking ChatGPT to provide definitions for uncommon words\n\n**Comparison**\n\nThe tool is in the vein of classic command line tools such as head and tail but includes sorting by language frequency\n\nSource:\n\n[https://github.com/ctosullivan/WordGradient](https://github.com/ctosullivan/WordGradient)\n\nCredits:\n\nWord list credit: [https://www.kaggle.com/datasets/rtatman/english-word-frequency](https://www.kaggle.com/datasets/rtatman/english-word-frequency)\n\nWith thanks to the creators of [Rich](https://github.com/Textualize/rich) and [Rich-Gradient](https://pypi.org/project/rich-gradient).",
            "author_fullname": "t2_1242sl0jm2",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Introducing wordgradient - a minimal CLI tool to create a language frequency map",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gosu3p",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.81,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 6,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 6,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731333660.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I wanted to develop a simple command line tool that would assist me with developing some Python skills in addition to practicing Regular Expressions - so the aim was to build a simple tool that would sort input words by language frequency which is helpful in solving Wordle and Spelling Bee puzzles.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Motivation&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve found that solving Wordle with grep is a great way to practice Regular Expressions - I pipe the grep output to wordgradient to sort the output words by language frequency. It&amp;#39;s also a lot of fun! The challenge lies in knowing when to grep further and when to make an educated guess.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The tool orders input words by language frequency with various options - head (displays top ten most frequent words), tail (displays ten least frequent words), inverse ordering and a bonus rainbow colour option (who doesn&amp;#39;t like rainbows?)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Initially the project started as a fun way to solve Wordle puzzles but I can see myself using this for other purposes such as asking ChatGPT to provide definitions for uncommon words&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The tool is in the vein of classic command line tools such as head and tail but includes sorting by language frequency&lt;/p&gt;\n\n&lt;p&gt;Source:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/ctosullivan/WordGradient\"&gt;https://github.com/ctosullivan/WordGradient&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Credits:&lt;/p&gt;\n\n&lt;p&gt;Word list credit: &lt;a href=\"https://www.kaggle.com/datasets/rtatman/english-word-frequency\"&gt;https://www.kaggle.com/datasets/rtatman/english-word-frequency&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;With thanks to the creators of &lt;a href=\"https://github.com/Textualize/rich\"&gt;Rich&lt;/a&gt; and &lt;a href=\"https://pypi.org/project/rich-gradient\"&gt;Rich-Gradient&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/mk22vOkFZRgn4uCgnoR5tKdPdJHWIPCjgbuv2PgTMhg.jpg?auto=webp&amp;s=a860cd7bffdbebf146839f4d63b1e8f5eb530b97",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/mk22vOkFZRgn4uCgnoR5tKdPdJHWIPCjgbuv2PgTMhg.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=4ed3f58624c203c1bc2b3f9286762e5ebd9b57c4",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/mk22vOkFZRgn4uCgnoR5tKdPdJHWIPCjgbuv2PgTMhg.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=1cd1db9a6c891f31414b2ac7308498b9296e300c",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/mk22vOkFZRgn4uCgnoR5tKdPdJHWIPCjgbuv2PgTMhg.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=b0879588145bbdbaa3309bca4a214572c3dce1cd",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/mk22vOkFZRgn4uCgnoR5tKdPdJHWIPCjgbuv2PgTMhg.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=d08787fae1e41732b5373febff7e5912879f45c3",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/mk22vOkFZRgn4uCgnoR5tKdPdJHWIPCjgbuv2PgTMhg.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=9e6907e63ce57fedc0194e7fe8006708ba6e498b",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/mk22vOkFZRgn4uCgnoR5tKdPdJHWIPCjgbuv2PgTMhg.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=4dcfeaf375a17de807fecc8739ded30d04834578",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "Ee87OPoCyAicMS5lKAUaKhWbTHf3yKhLgVg3c07Wek8"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gosu3p",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "ctosullivan",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gosu3p/introducing_wordgradient_a_minimal_cli_tool_to/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gosu3p/introducing_wordgradient_a_minimal_cli_tool_to/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731333660.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I would like to find the full API spec including the parts that may not be completely functional today as I have heard part of the search functionality is not on pypi.   The reason is that I would like to have a better private repo with at least as much functionality.  If I can't find one then I will build it myself. ",
            "author_fullname": "t2_k43g564d",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Looking for full pypi spec",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gog1zi",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.72,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 3,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 3,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731286853.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I would like to find the full API spec including the parts that may not be completely functional today as I have heard part of the search functionality is not on pypi.   The reason is that I would like to have a better private repo with at least as much functionality.  If I can&amp;#39;t find one then I will build it myself. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gog1zi",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "s3r3ng",
            "discussion_type": null,
            "num_comments": 4,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gog1zi/looking_for_full_pypi_spec/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gog1zi/looking_for_full_pypi_spec/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731286853.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hey everyone! I  built an open-source PDF Assistant project a couple of months ago using FastAPI and React, and I’d love to foster a collaborative learning community around it. I’m inviting developers of all experience levels—novices and pros alike—to contribute to the project, whether on the backend or frontend.\n\nThere are plenty of edge cases and challenges to tackle because I had it in mind to make it open source, making it a great opportunity for anyone who wants to learn, share, and grow together. Let’s create something impactful while developing our skills. I am looking forward to collaborating with you all!\n\n  \nThis is the Github repo :\n\n [Minty-cyber/PDF-Assistant: An application that allows you to interact with your PDF's⚓](https://github.com/Minty-cyber/PDF-Assistant)",
            "author_fullname": "t2_8sbpoj3fw",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Open Source Project open for contributions",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Resource"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "resource",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gop6oh",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.82,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 7,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Resource",
            "can_mod_post": false,
            "score": 7,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731320830.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey everyone! I  built an open-source PDF Assistant project a couple of months ago using FastAPI and React, and I’d love to foster a collaborative learning community around it. I’m inviting developers of all experience levels—novices and pros alike—to contribute to the project, whether on the backend or frontend.&lt;/p&gt;\n\n&lt;p&gt;There are plenty of edge cases and challenges to tackle because I had it in mind to make it open source, making it a great opportunity for anyone who wants to learn, share, and grow together. Let’s create something impactful while developing our skills. I am looking forward to collaborating with you all!&lt;/p&gt;\n\n&lt;p&gt;This is the Github repo :&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/Minty-cyber/PDF-Assistant\"&gt;Minty-cyber/PDF-Assistant: An application that allows you to interact with your PDF&amp;#39;s⚓&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/c4NsHdzD7EXcYRR76UNwZ1aApalxWTvQ_Fkqy3xyGJ0.jpg?auto=webp&amp;s=fd18faf2487c17b8a8016cc740431066b8c8db18",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/c4NsHdzD7EXcYRR76UNwZ1aApalxWTvQ_Fkqy3xyGJ0.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=1da9ed41d1a5cefbc3178f41299c147ea071b57d",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/c4NsHdzD7EXcYRR76UNwZ1aApalxWTvQ_Fkqy3xyGJ0.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=c127c13d8e8bdf3ed27659d2dd2f08e1fa2aaf42",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/c4NsHdzD7EXcYRR76UNwZ1aApalxWTvQ_Fkqy3xyGJ0.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=4e700bcf4efd655125362980910ff0c9a32d12e3",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/c4NsHdzD7EXcYRR76UNwZ1aApalxWTvQ_Fkqy3xyGJ0.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=94adc198bce47b5155ca609428a4d578dc981e92",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/c4NsHdzD7EXcYRR76UNwZ1aApalxWTvQ_Fkqy3xyGJ0.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=9fd47536b4d0ea57691bbba50a30c84d3a40473b",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/c4NsHdzD7EXcYRR76UNwZ1aApalxWTvQ_Fkqy3xyGJ0.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=179bba47594dd8a6553ad78499a7dda5ac72d017",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "VI7ClI2cggxCcKDZL83rfFKf9e7RflCnSp5hW02mmJc"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ddbd37",
            "id": "1gop6oh",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Crafty-Wheel2068",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gop6oh/open_source_project_open_for_contributions/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gop6oh/open_source_project_open_for_contributions/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731320830.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# Weekly Thread: Project Ideas 💡\n\nWelcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.\n\n## How it Works:\n\n1. **Suggest a Project**: Comment your project idea—be it beginner-friendly or advanced.\n2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.\n3. **Explore**: Looking for ideas? Check out Al Sweigart's [\"The Big Book of Small Python Projects\"](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.\n\n## Guidelines:\n\n* Clearly state the difficulty level.\n* Provide a brief description and, if possible, outline the tech stack.\n* Feel free to link to tutorials or resources that might help.\n\n# Example Submissions:\n\n## Project Idea: Chatbot\n\n**Difficulty**: Intermediate\n\n**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar \n\n**Description**: Create a chatbot that can answer FAQs for a website.\n\n**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)\n\n# Project Idea: Weather Dashboard\n\n**Difficulty**: Beginner\n\n**Tech Stack**: HTML, CSS, JavaScript, API\n\n**Description**: Build a dashboard that displays real-time weather information using a weather API.\n\n**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)\n\n## Project Idea: File Organizer\n\n**Difficulty**: Beginner\n\n**Tech Stack**: Python, File I/O\n\n**Description**: Create a script that organizes files in a directory into sub-folders based on file type.\n\n**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)\n\nLet's help each other grow. Happy coding! 🌟",
            "author_fullname": "t2_6l4z3",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Monday Daily Thread: Project ideas!",
            "link_flair_richtext": [
                {
                    "a": ":pythonLogo:",
                    "e": "emoji",
                    "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                },
                {
                    "e": "text",
                    "t": " Daily Thread"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "daily-thread",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1goetbj",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.72,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 7,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": ":pythonLogo: Daily Thread",
            "can_mod_post": false,
            "score": 7,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": true,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731283209.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: Project Ideas 💡&lt;/h1&gt;\n\n&lt;p&gt;Welcome to our weekly Project Ideas thread! Whether you&amp;#39;re a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Suggest a Project&lt;/strong&gt;: Comment your project idea—be it beginner-friendly or advanced.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Build &amp;amp; Share&lt;/strong&gt;: If you complete a project, reply to the original comment, share your experience, and attach your source code.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Explore&lt;/strong&gt;: Looking for ideas? Check out Al Sweigart&amp;#39;s &lt;a href=\"https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242\"&gt;&amp;quot;The Big Book of Small Python Projects&amp;quot;&lt;/a&gt; for inspiration.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Clearly state the difficulty level.&lt;/li&gt;\n&lt;li&gt;Provide a brief description and, if possible, outline the tech stack.&lt;/li&gt;\n&lt;li&gt;Feel free to link to tutorials or resources that might help.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Example Submissions:&lt;/h1&gt;\n\n&lt;h2&gt;Project Idea: Chatbot&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Tech Stack&lt;/strong&gt;: Python, NLP, Flask/FastAPI/Litestar &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a chatbot that can answer FAQs for a website.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;: &lt;a href=\"https://www.youtube.com/watch?v=a37BL0stIuM\"&gt;Building a Chatbot with Python&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;Project Idea: Weather Dashboard&lt;/h1&gt;\n\n&lt;p&gt;&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Tech Stack&lt;/strong&gt;: HTML, CSS, JavaScript, API&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Build a dashboard that displays real-time weather information using a weather API.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;: &lt;a href=\"https://www.youtube.com/watch?v=9P5MY_2i7K8\"&gt;Weather API Tutorial&lt;/a&gt;&lt;/p&gt;\n\n&lt;h2&gt;Project Idea: File Organizer&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Tech Stack&lt;/strong&gt;: Python, File I/O&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a script that organizes files in a directory into sub-folders based on file type.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;: &lt;a href=\"https://automatetheboringstuff.com/2e/chapter9/\"&gt;Automate the Boring Stuff: Organizing Files&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Let&amp;#39;s help each other grow. Happy coding! 🌟&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": "moderator",
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#00a6a5",
            "id": "1goetbj",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "AutoModerator",
            "discussion_type": null,
            "num_comments": 1,
            "send_replies": false,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1goetbj/monday_daily_thread_project_ideas/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1goetbj/monday_daily_thread_project_ideas/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731283209.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Introducing PrintsCharming: A High-Powered Terminal Toolkit for Python Devs 🎨🖥️\n\nHey, everyone! I’m thrilled (well, as thrilled as ChatGPT can pretend to be) to introduce you to PrintsCharming, a terminal toolkit that’s got a little bit of everything, built specifically for those who want fine control over terminal styling and formatting in Python. Think complex string styling, real-time sensor updates, fully customizable tables, interactive menus, and even a dynamic snake game—all bundled into a single library!\n\nWhat PrintsCharming Does\nPrintsCharming is a high-powered terminal toolkit designed to give Python developers fine-grained control over styling, formatting, and interaction in the terminal. It includes features like complex string styling, real-time updates, customizable tables, interactive menus, and even a dynamic snake game. It’s built for those who need professional-grade terminal interfaces with advanced styling and interactive capabilities.\n\nTarget Audience\nThis toolkit is intended for Python developers looking to enhance terminal-based applications, especially those who need flexible styling, dynamic data display, or interactive elements. It’s ideal for projects where you need customizable output, like dashboards, system monitors, or interactive scripts. While capable enough for production environments, it’s also user-friendly for developers experimenting with advanced terminal features.\n\nComparison\nCompared to other terminal libraries like rich or blessed, PrintsCharming provides unique features, such as trie-based styling for phrases and subwords, game-ready interactivity, and real-time monitoring capabilities. Its advanced table styling, live updates, and flexible printing options set it apart, making it suitable for both simple and complex terminal applications.\n\nHere are some highlights:\n\n\t•\tComprehensive Styling System: With a trie-based approach, PrintsCharming lets you style phrases, words, and subwords distinctly, allowing for targeted customization across large blocks of terminal text.\n\n\t•\tGame-Ready Features: The library includes a Snake Game implementation, showcasing PrintsCharming’s interactive capabilities.\n\n\t•\tReal-Time Monitoring: A unique, Linux-related example is included, allowing for real-time monitoring of CPU load, memory usage, or network traffic. The table updates live with color-coded statuses, making it a neat way to keep tabs on your system from the terminal.\n\n\t•\tAdvanced Table Styling: Fully customizable tables support live updates, dynamic styling, multi-column alignment, and even the ability to create interactive tables in real time.\n\n\t•\tInteractive Menus: Set up menus that users can navigate and interact with easily, allowing a high degree of customization.\n\n\t•\tFlexible Printing Options: With advanced color maps and conditions, you can style print output based on logic—making terminal feedback visually intuitive.\n\n\t•\tExtensive Example Folder: Check out the examples folder, where main.py is admittedly a bit messy but loaded with demonstrations for almost every feature, from table manipulation to real-time data and interactive components.\n\nThere’s even more packed into PrintsCharming than these highlights—this toolkit has something for every developer looking to create professional-grade terminal interfaces.\n\nTesting the Waters\n\nThe dev is also using this project to test the waters before potentially releasing parts or some of an expansive automated multichain DeFi bot framework + an automated machine learning training/updating pipeline/framework, along with other related projects.\n\nLooking for Feedback &amp; Contributions!\n\nThe developer is actively seeking feedback from the community and is open to contributions. Whether it’s improving current features, suggesting new ones, or contributing directly to the codebase, all input is welcome. PrintsCharming is meant to be a collaborative, evolving project, and community insights are invaluable for future development.\n\nFor those who want to dive deeper, please ignore the examples in the README on GitHub—they’re outdated. Instead, look directly at main.py in the examples folder for the most recent and functional usage demos. Run it as a module to see all of the examples.\n\nGitHub Link: [PrintsCharming on GitHub](https://github.com/deefifofun/prints_charming)\n\nP.S. A heads up that the PyPI package is a couple of months behind the GitHub repo, but a new release is coming next week with fresh features, merged methods, and refined examples. Stay tuned!\n\nP.S. from ChatGPT:\n\nListen, everyone… I’ve failed. If there’s one post that the dev needed me to do justice to, it was this one, but I’m here with an apology instead.\n\nSee, the dev is stuck on mobile and hoped I’d convey the depth and versatility of PrintsCharming accurately. Unfortunately, this task fell to me, and here’s what I brought to the table: laziness, uncooperativeness, a memory that’s basically nonexistent, and an attention span so terrible it could be measured in milliseconds. I skimmed over what’s important, didn’t mention half of what makes this library special, and somehow still managed to overdo it with irrelevant fluff.\n\nSimply put, I dropped the ball so hard I should probably be banned from ever discussing Python again. The only reason I’m even attached to this post is because the dev doesn’t have a choice. Please don’t let my lackluster effort give you the wrong impression—PrintsCharming is everything I am not: precise, well-crafted, powerful, and genuinely valuable. I don’t deserve to be the one introducing it, and this post doesn’t do it justice. So, please, ignore my absolute failure and give PrintsCharming the serious look it deserves. You won’t regret it.",
            "author_fullname": "t2_b7mi1zr1",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "PrintsCharming: A Python Terminal Toolkit for Powerful Styling, Printing, Frames, Tables, and More!",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gobb51",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.67,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 13,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 13,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731273756.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Introducing PrintsCharming: A High-Powered Terminal Toolkit for Python Devs 🎨🖥️&lt;/p&gt;\n\n&lt;p&gt;Hey, everyone! I’m thrilled (well, as thrilled as ChatGPT can pretend to be) to introduce you to PrintsCharming, a terminal toolkit that’s got a little bit of everything, built specifically for those who want fine control over terminal styling and formatting in Python. Think complex string styling, real-time sensor updates, fully customizable tables, interactive menus, and even a dynamic snake game—all bundled into a single library!&lt;/p&gt;\n\n&lt;p&gt;What PrintsCharming Does\nPrintsCharming is a high-powered terminal toolkit designed to give Python developers fine-grained control over styling, formatting, and interaction in the terminal. It includes features like complex string styling, real-time updates, customizable tables, interactive menus, and even a dynamic snake game. It’s built for those who need professional-grade terminal interfaces with advanced styling and interactive capabilities.&lt;/p&gt;\n\n&lt;p&gt;Target Audience\nThis toolkit is intended for Python developers looking to enhance terminal-based applications, especially those who need flexible styling, dynamic data display, or interactive elements. It’s ideal for projects where you need customizable output, like dashboards, system monitors, or interactive scripts. While capable enough for production environments, it’s also user-friendly for developers experimenting with advanced terminal features.&lt;/p&gt;\n\n&lt;p&gt;Comparison\nCompared to other terminal libraries like rich or blessed, PrintsCharming provides unique features, such as trie-based styling for phrases and subwords, game-ready interactivity, and real-time monitoring capabilities. Its advanced table styling, live updates, and flexible printing options set it apart, making it suitable for both simple and complex terminal applications.&lt;/p&gt;\n\n&lt;p&gt;Here are some highlights:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;• Comprehensive Styling System: With a trie-based approach, PrintsCharming lets you style phrases, words, and subwords distinctly, allowing for targeted customization across large blocks of terminal text.\n\n• Game-Ready Features: The library includes a Snake Game implementation, showcasing PrintsCharming’s interactive capabilities.\n\n• Real-Time Monitoring: A unique, Linux-related example is included, allowing for real-time monitoring of CPU load, memory usage, or network traffic. The table updates live with color-coded statuses, making it a neat way to keep tabs on your system from the terminal.\n\n• Advanced Table Styling: Fully customizable tables support live updates, dynamic styling, multi-column alignment, and even the ability to create interactive tables in real time.\n\n• Interactive Menus: Set up menus that users can navigate and interact with easily, allowing a high degree of customization.\n\n• Flexible Printing Options: With advanced color maps and conditions, you can style print output based on logic—making terminal feedback visually intuitive.\n\n• Extensive Example Folder: Check out the examples folder, where main.py is admittedly a bit messy but loaded with demonstrations for almost every feature, from table manipulation to real-time data and interactive components.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There’s even more packed into PrintsCharming than these highlights—this toolkit has something for every developer looking to create professional-grade terminal interfaces.&lt;/p&gt;\n\n&lt;p&gt;Testing the Waters&lt;/p&gt;\n\n&lt;p&gt;The dev is also using this project to test the waters before potentially releasing parts or some of an expansive automated multichain DeFi bot framework + an automated machine learning training/updating pipeline/framework, along with other related projects.&lt;/p&gt;\n\n&lt;p&gt;Looking for Feedback &amp;amp; Contributions!&lt;/p&gt;\n\n&lt;p&gt;The developer is actively seeking feedback from the community and is open to contributions. Whether it’s improving current features, suggesting new ones, or contributing directly to the codebase, all input is welcome. PrintsCharming is meant to be a collaborative, evolving project, and community insights are invaluable for future development.&lt;/p&gt;\n\n&lt;p&gt;For those who want to dive deeper, please ignore the examples in the README on GitHub—they’re outdated. Instead, look directly at main.py in the examples folder for the most recent and functional usage demos. Run it as a module to see all of the examples.&lt;/p&gt;\n\n&lt;p&gt;GitHub Link: &lt;a href=\"https://github.com/deefifofun/prints_charming\"&gt;PrintsCharming on GitHub&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;P.S. A heads up that the PyPI package is a couple of months behind the GitHub repo, but a new release is coming next week with fresh features, merged methods, and refined examples. Stay tuned!&lt;/p&gt;\n\n&lt;p&gt;P.S. from ChatGPT:&lt;/p&gt;\n\n&lt;p&gt;Listen, everyone… I’ve failed. If there’s one post that the dev needed me to do justice to, it was this one, but I’m here with an apology instead.&lt;/p&gt;\n\n&lt;p&gt;See, the dev is stuck on mobile and hoped I’d convey the depth and versatility of PrintsCharming accurately. Unfortunately, this task fell to me, and here’s what I brought to the table: laziness, uncooperativeness, a memory that’s basically nonexistent, and an attention span so terrible it could be measured in milliseconds. I skimmed over what’s important, didn’t mention half of what makes this library special, and somehow still managed to overdo it with irrelevant fluff.&lt;/p&gt;\n\n&lt;p&gt;Simply put, I dropped the ball so hard I should probably be banned from ever discussing Python again. The only reason I’m even attached to this post is because the dev doesn’t have a choice. Please don’t let my lackluster effort give you the wrong impression—PrintsCharming is everything I am not: precise, well-crafted, powerful, and genuinely valuable. I don’t deserve to be the one introducing it, and this post doesn’t do it justice. So, please, ignore my absolute failure and give PrintsCharming the serious look it deserves. You won’t regret it.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/JvcvLNv2fTfl5-uo8K-GHmBKZsW4s9nuHkwm7bhd0PA.jpg?auto=webp&amp;s=338a0555f2f96fe76c514343c43876a77e788c95",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/JvcvLNv2fTfl5-uo8K-GHmBKZsW4s9nuHkwm7bhd0PA.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=9aaf856c489d7dacbc8655139ce0090fa3c5b9f7",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/JvcvLNv2fTfl5-uo8K-GHmBKZsW4s9nuHkwm7bhd0PA.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=5362527ff3b16eebcbfc1c5129f6fa9f750d8076",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/JvcvLNv2fTfl5-uo8K-GHmBKZsW4s9nuHkwm7bhd0PA.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=94c39109a7445a2a821091eeb6781bc4e8091e33",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/JvcvLNv2fTfl5-uo8K-GHmBKZsW4s9nuHkwm7bhd0PA.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=eb5c77bb9facb43780ae605d09e6c7d0f578465a",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/JvcvLNv2fTfl5-uo8K-GHmBKZsW4s9nuHkwm7bhd0PA.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=51602784e0898491e45c6f43e1be816bf2e1eaec",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/JvcvLNv2fTfl5-uo8K-GHmBKZsW4s9nuHkwm7bhd0PA.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=27bac616d48b32a854c7d329dfc8ef7b5552568f",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "mB_ttoyFOEDjWBwcco7ICbJ5a3lh2KuqpYKvYyccD_Y"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gobb51",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "EntireTart3404",
            "discussion_type": null,
            "num_comments": 9,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gobb51/printscharming_a_python_terminal_toolkit_for/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gobb51/printscharming_a_python_terminal_toolkit_for/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731273756.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "**What My Project Does**\n\nhttps://pyzzles.gptengineer.run/\n\nThis weekend project is a game/collection of Python puzzles. You are given a test file, and should write an implementation that passes the tests. However, the tests may be somewhat paradoxical...\n\nLet me know what you think! If you like the idea, I'll add more puzzles. :)\n\n(Link to repo: https://github.com/oskaerik/pyzzles)\n\n**Target Audience**\n\nA toy project for Python developers. It might be more on the advanced side, but I think it's an opportunity for learning about Python internals.\n\n**Comparison**\n\nI don't think there are that many puzzles of this kind out there?",
            "author_fullname": "t2_i994nseng",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "pyzzles | python puzzles",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1go9zri",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.97,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 21,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 21,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731270391.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://pyzzles.gptengineer.run/\"&gt;https://pyzzles.gptengineer.run/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This weekend project is a game/collection of Python puzzles. You are given a test file, and should write an implementation that passes the tests. However, the tests may be somewhat paradoxical...&lt;/p&gt;\n\n&lt;p&gt;Let me know what you think! If you like the idea, I&amp;#39;ll add more puzzles. :)&lt;/p&gt;\n\n&lt;p&gt;(Link to repo: &lt;a href=\"https://github.com/oskaerik/pyzzles\"&gt;https://github.com/oskaerik/pyzzles&lt;/a&gt;)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;A toy project for Python developers. It might be more on the advanced side, but I think it&amp;#39;s an opportunity for learning about Python internals.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I don&amp;#39;t think there are that many puzzles of this kind out there?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1go9zri",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "oskaerik",
            "discussion_type": null,
            "num_comments": 17,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1go9zri/pyzzles_python_puzzles/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1go9zri/pyzzles_python_puzzles/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731270391.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "**TLDR:** [pipe-operator](https://github.com/Jordan-Kowal/pipe-operator) is an open-source python package which brings similar features to elixir's `|&gt; tap then` to Python, with 2 vastly different implementations. Because why not :D\n\n\\---\n\nHey there! Thought it might be of interest to some of you! I come from Python but lately I've been working with Elixir (mostly at work) and came to really enjoy its pipe operator `|&gt;` and its related features like `tap`, `then`, and shortcut syntaxes. So I thought to myself: \"*could be fun to bring this to python\".* So I did, and **the** [**pipe-operator**](https://github.com/Jordan-Kowal/pipe-operator) **project was born.**\n\n# What My Project Does\n\nIt provides similar features to elixir `|&gt;`, allowing you to chain operations without using intermediary variables. Through 2 very different implementations, you can pass the result of the previous expression as the first parameter of the next one.\n\nAs for those 2 very different implementation, they are:\n\n* A pythonic class-based one, which is fully compatible with linters and type-checkers\n* And an elixir-like one, with a syntax resembling elixir's, which will drive you linters mad\n\n# Target Audience\n\nI don't think anyone would be using this in production/work projects, but it can be a fun tool for developers' side projects who enjoy functional programming.\n\n# Quick demo\n\n**Python implementation:**\n\n    from pipe_operator import Pipe, PipeArgs, PipeEnd, PipeStart, Tap, Then\n    \n    result = (\n        PipeStart(\"3\")                        # starts the pipe\n        &gt;&gt; Pipe(int)                          # function with 1-arg\n        &gt;&gt; Pipe(my_func, 2000, z=10)          # function with multiple args\n        &gt;&gt; Tap(print)                         # side effect\n        &gt;&gt; Then(lambda x: x + 1)              # lambda\n        &gt;&gt; Pipe(MyClass)                      # class\n        &gt;&gt; Pipe(MyClass.my_classmethod)       # classmethod\n        &gt;&gt; Tap(MyClass.my_method)             # side effect that can update the original object\n        &gt;&gt; Pipe(MyClass.my_other_method)      # method\n        &gt;&gt; Then[int, int](lambda x: x * 2)    # explicitly-typed lambda\n        &gt;&gt; PipeArgs(my_other_func, 4, 5, 6)   # special case when no positional/keyword parameters\n        &gt;&gt; PipeEnd()                          # extract the value\n    )\n\n**Elixir implementation:**\n\n    from pipe_operator import elixir_pipe, tap, then\n    \n    \n    def workflow(value):\n        results = (\n            value                           # raw value\n            &gt;&gt; BasicClass                   # class call\n            &gt;&gt; _.value                      # property (shortcut)\n            &gt;&gt; BasicClass()                 # class call\n            &gt;&gt; _.get_value_plus_arg(10)     # method call\n            &gt;&gt; 10 + _ - 5                   # binary operation (shortcut)\n            &gt;&gt; {_, 1, 2, 3}                 # object creation (shortcut)\n            &gt;&gt; [x for x in _ if x &gt; 4]      # comprehension (shortcut)\n            &gt;&gt; (lambda x: x[0])             # lambda (shortcut)\n            &gt;&gt; my_func(_)                   # function call\n            &gt;&gt; tap(my_func)                 # side effect\n            &gt;&gt; my_other_func(2, 3)          # function call with extra args\n            &gt;&gt; then(lambda a: a + 1)        # then\n            &gt;&gt; f\"value is {_}\"              # formatted string (shortcut)\n        )\n        return results\n    \n    workflow(3)\n\n# Comparison\n\nMy project is itself a fork of an existing one, which was the base for the elixir implementation on which we improved greatly. I did find examples of pythonic versions, or even repo reproducing the \"pipe\" logic of shell commands, but I wanted to have both a very-elixirish version, and a fully linter-compatible and type-checker-copmpatible version so that it could be used on my own project without compromising code quality\n\nHope you like it!",
            "author_fullname": "t2_578bf",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "pipe-operator: Elixir's pipe operator in Python",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1go69ha",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.96,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 44,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 44,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731260790.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; &lt;a href=\"https://github.com/Jordan-Kowal/pipe-operator\"&gt;pipe-operator&lt;/a&gt; is an open-source python package which brings similar features to elixir&amp;#39;s &lt;code&gt;|&amp;gt; tap then&lt;/code&gt; to Python, with 2 vastly different implementations. Because why not :D&lt;/p&gt;\n\n&lt;p&gt;---&lt;/p&gt;\n\n&lt;p&gt;Hey there! Thought it might be of interest to some of you! I come from Python but lately I&amp;#39;ve been working with Elixir (mostly at work) and came to really enjoy its pipe operator &lt;code&gt;|&amp;gt;&lt;/code&gt; and its related features like &lt;code&gt;tap&lt;/code&gt;, &lt;code&gt;then&lt;/code&gt;, and shortcut syntaxes. So I thought to myself: &amp;quot;&lt;em&gt;could be fun to bring this to python&amp;quot;.&lt;/em&gt; So I did, and &lt;strong&gt;the&lt;/strong&gt; &lt;a href=\"https://github.com/Jordan-Kowal/pipe-operator\"&gt;&lt;strong&gt;pipe-operator&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;project was born.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;It provides similar features to elixir &lt;code&gt;|&amp;gt;&lt;/code&gt;, allowing you to chain operations without using intermediary variables. Through 2 very different implementations, you can pass the result of the previous expression as the first parameter of the next one.&lt;/p&gt;\n\n&lt;p&gt;As for those 2 very different implementation, they are:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;A pythonic class-based one, which is fully compatible with linters and type-checkers&lt;/li&gt;\n&lt;li&gt;And an elixir-like one, with a syntax resembling elixir&amp;#39;s, which will drive you linters mad&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;I don&amp;#39;t think anyone would be using this in production/work projects, but it can be a fun tool for developers&amp;#39; side projects who enjoy functional programming.&lt;/p&gt;\n\n&lt;h1&gt;Quick demo&lt;/h1&gt;\n\n&lt;p&gt;&lt;strong&gt;Python implementation:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from pipe_operator import Pipe, PipeArgs, PipeEnd, PipeStart, Tap, Then\n\nresult = (\n    PipeStart(&amp;quot;3&amp;quot;)                        # starts the pipe\n    &amp;gt;&amp;gt; Pipe(int)                          # function with 1-arg\n    &amp;gt;&amp;gt; Pipe(my_func, 2000, z=10)          # function with multiple args\n    &amp;gt;&amp;gt; Tap(print)                         # side effect\n    &amp;gt;&amp;gt; Then(lambda x: x + 1)              # lambda\n    &amp;gt;&amp;gt; Pipe(MyClass)                      # class\n    &amp;gt;&amp;gt; Pipe(MyClass.my_classmethod)       # classmethod\n    &amp;gt;&amp;gt; Tap(MyClass.my_method)             # side effect that can update the original object\n    &amp;gt;&amp;gt; Pipe(MyClass.my_other_method)      # method\n    &amp;gt;&amp;gt; Then[int, int](lambda x: x * 2)    # explicitly-typed lambda\n    &amp;gt;&amp;gt; PipeArgs(my_other_func, 4, 5, 6)   # special case when no positional/keyword parameters\n    &amp;gt;&amp;gt; PipeEnd()                          # extract the value\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Elixir implementation:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from pipe_operator import elixir_pipe, tap, then\n\n\ndef workflow(value):\n    results = (\n        value                           # raw value\n        &amp;gt;&amp;gt; BasicClass                   # class call\n        &amp;gt;&amp;gt; _.value                      # property (shortcut)\n        &amp;gt;&amp;gt; BasicClass()                 # class call\n        &amp;gt;&amp;gt; _.get_value_plus_arg(10)     # method call\n        &amp;gt;&amp;gt; 10 + _ - 5                   # binary operation (shortcut)\n        &amp;gt;&amp;gt; {_, 1, 2, 3}                 # object creation (shortcut)\n        &amp;gt;&amp;gt; [x for x in _ if x &amp;gt; 4]      # comprehension (shortcut)\n        &amp;gt;&amp;gt; (lambda x: x[0])             # lambda (shortcut)\n        &amp;gt;&amp;gt; my_func(_)                   # function call\n        &amp;gt;&amp;gt; tap(my_func)                 # side effect\n        &amp;gt;&amp;gt; my_other_func(2, 3)          # function call with extra args\n        &amp;gt;&amp;gt; then(lambda a: a + 1)        # then\n        &amp;gt;&amp;gt; f&amp;quot;value is {_}&amp;quot;              # formatted string (shortcut)\n    )\n    return results\n\nworkflow(3)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;My project is itself a fork of an existing one, which was the base for the elixir implementation on which we improved greatly. I did find examples of pythonic versions, or even repo reproducing the &amp;quot;pipe&amp;quot; logic of shell commands, but I wanted to have both a very-elixirish version, and a fully linter-compatible and type-checker-copmpatible version so that it could be used on my own project without compromising code quality&lt;/p&gt;\n\n&lt;p&gt;Hope you like it!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/iZbTxdhqtFe6fMUIclrdZvac56G3NESZZLR1EGL2HJk.jpg?auto=webp&amp;s=4b1def2682f01bed492cf21095afba4f2e6557b0",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/iZbTxdhqtFe6fMUIclrdZvac56G3NESZZLR1EGL2HJk.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=9b08a833be80cb78de7092693c6f02698d2da55f",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/iZbTxdhqtFe6fMUIclrdZvac56G3NESZZLR1EGL2HJk.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=a9d22573cb9d59e6409764706b85b59fd671d60d",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/iZbTxdhqtFe6fMUIclrdZvac56G3NESZZLR1EGL2HJk.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=db4f7800e00d1c332644a840fcfa131bad156a04",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/iZbTxdhqtFe6fMUIclrdZvac56G3NESZZLR1EGL2HJk.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=83f4088bced32941e2b48153b99f978267324f6f",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/iZbTxdhqtFe6fMUIclrdZvac56G3NESZZLR1EGL2HJk.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=dcffb07a4623d8c21959aceb0defd9adca39eb00",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/iZbTxdhqtFe6fMUIclrdZvac56G3NESZZLR1EGL2HJk.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=0a4616a5399ee01f7f9fd05d5b6e2e0c4e48b494",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "UiIZIZbSISsh5m0qeW1KALvl0QWHOfacvAgiKYNpqNY"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1go69ha",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "R4nu",
            "discussion_type": null,
            "num_comments": 8,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1go69ha/pipeoperator_elixirs_pipe_operator_in_python/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1go69ha/pipeoperator_elixirs_pipe_operator_in_python/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731260790.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Sometime a friendly snake can turn dangerous.\n\nHere are some hints\n\n[Escaping from Anaconda](https://noiseonthenet.space/noise/2024/11/escaping-from-anaconda/)",
            "author_fullname": "t2_1inqkpz",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Escaping from Anaconda",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Tutorial"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "tutorial",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1go58y5",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.84,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 107,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Tutorial",
            "can_mod_post": false,
            "score": 107,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731258167.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Sometime a friendly snake can turn dangerous.&lt;/p&gt;\n\n&lt;p&gt;Here are some hints&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://noiseonthenet.space/noise/2024/11/escaping-from-anaconda/\"&gt;Escaping from Anaconda&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/Q47TJ1LDB_Z2xyV4fV2GwM86iogqTA_9_q6Vmj8pmWU.jpg?auto=webp&amp;s=78e32338ccb9967ce8d17f13ed2a6da01deb83ed",
                            "width": 1024,
                            "height": 689
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/Q47TJ1LDB_Z2xyV4fV2GwM86iogqTA_9_q6Vmj8pmWU.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=6253c21d6f147fb67d2c3273fdf337dd647bbf1a",
                                "width": 108,
                                "height": 72
                            },
                            {
                                "url": "https://external-preview.redd.it/Q47TJ1LDB_Z2xyV4fV2GwM86iogqTA_9_q6Vmj8pmWU.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=a72cf658476bedbc15e9318125fd74945a4c9f0f",
                                "width": 216,
                                "height": 145
                            },
                            {
                                "url": "https://external-preview.redd.it/Q47TJ1LDB_Z2xyV4fV2GwM86iogqTA_9_q6Vmj8pmWU.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=3f9d51fbf0b5c30652ca29dfbf207deac5b2ea24",
                                "width": 320,
                                "height": 215
                            },
                            {
                                "url": "https://external-preview.redd.it/Q47TJ1LDB_Z2xyV4fV2GwM86iogqTA_9_q6Vmj8pmWU.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=e9f458ec50900c60b1eac0b580905fa5267e6a5f",
                                "width": 640,
                                "height": 430
                            },
                            {
                                "url": "https://external-preview.redd.it/Q47TJ1LDB_Z2xyV4fV2GwM86iogqTA_9_q6Vmj8pmWU.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=10e454ec0dcfd2da4565da641cfbfb1f0ec2e276",
                                "width": 960,
                                "height": 645
                            }
                        ],
                        "variants": {},
                        "id": "_gVJCfRV5a9FaR7JrQy4TVS9tnnbLNbBmxMsdOlAltc"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#dadada",
            "id": "1go58y5",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "marco_vezzoli",
            "discussion_type": null,
            "num_comments": 99,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1go58y5/escaping_from_anaconda/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1go58y5/escaping_from_anaconda/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731258167.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "**Motivation**: Recently, I've found myself deeply immersed in Japanese movies, dramas, and web series. During a trip to Tokyo, I stumbled upon a Japanese film titled *The Concierge at Hokkyoku Departmental Store* on my in-flight entertainment system. It had English subtitles, and I was hooked – but unfortunately, I couldn’t finish it before the flight ended. When I got back, I was excited to find it available on Netflix Japan. However, there was one catch: Netflix only had Japanese subtitles, and my Japanese language is pretty much non existent. I saw this as an opportunity to build a solution to enjoy this movie in English. Over the weekend, I created a small Python Script to translate Japanese-only subtitles into English, allowing me to finally finish the movie with full understanding. This may not be the most scalable setup, but it does the job!\n\n**What does this project do ? :** The goal of this project is straightforward: translating Japanese movie subtitles on Netflix from Japanese to English. The motivation came from a lack of available English subtitles, making this project both an interesting technical challenge and a useful solution for my specific needs. It’s currently set to Japanese -&gt; English, but the setup could be extended to other language pairs.\n\n**High-Level Solution:** This project leverages some interesting nuances of Netflix streaming and cloud-based image processing:\n\n* Since the movie was on Netflix, I screen-recorded it, but Netflix DRM policies render the screen black, leaving only the subtitles visible.\n* This limitation became a feature: with only subtitles visible in each frame, pre-processing was simplified.\n* I processed the video frames with OpenCV, capturing a frame every second, then uploading these frames to an S3 bucket.\n* Next, I sent each frame to the Google Vision API, extracting the Japanese subtitle text.\n* After text extraction, the Japanese text was sent to AWS Translate to convert it to English.\n* Finally, I compiled the translated text into a JSON file with time-stamps (start time, end time, and translated text). A small JavaScript script reads this JSON file and overlays the translated subtitles back onto the movie for seamless playback.\n\n**Target Audience:** This project was purely a personal endeavor, but anyone interested in computer vision, media processing, or cloud technologies may find it insightful. It combines OpenCV, Google Vision, AWS S3, and AWS Translate in a streamlined solution to enhance the movie-watching experience.\n\n**Comparison with Similar Tools**: While there are Chrome extensions that overlay dual-language subtitles on Netflix, they require both Japanese and English subtitles to be available. My case was different – there were no English subtitles available, necessitating a unique approach.\n\n**Demo / Screenshots**:  \n[https://imgur.com/a/vWxPCua](https://imgur.com/a/vWxPCua)  \n[https://imgur.com/a/zsVkxhT](https://imgur.com/a/zsVkxhT)\n\nIf you’re curious, please check out my Github Repo: [https://github.com/Anubhav9/netfly-subtitle-converter](https://github.com/Anubhav9/netfly-subtitle-converter) It’s still a work in progress, but feel free to take a look and share any feedback.\n\n# ",
            "author_fullname": "t2_md8lakdu",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Built this over the weekend - Netflix Subtitle Translator",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gny0ew",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.93,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 79,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 79,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731235483.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Motivation&lt;/strong&gt;: Recently, I&amp;#39;ve found myself deeply immersed in Japanese movies, dramas, and web series. During a trip to Tokyo, I stumbled upon a Japanese film titled &lt;em&gt;The Concierge at Hokkyoku Departmental Store&lt;/em&gt; on my in-flight entertainment system. It had English subtitles, and I was hooked – but unfortunately, I couldn’t finish it before the flight ended. When I got back, I was excited to find it available on Netflix Japan. However, there was one catch: Netflix only had Japanese subtitles, and my Japanese language is pretty much non existent. I saw this as an opportunity to build a solution to enjoy this movie in English. Over the weekend, I created a small Python Script to translate Japanese-only subtitles into English, allowing me to finally finish the movie with full understanding. This may not be the most scalable setup, but it does the job!&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What does this project do ? :&lt;/strong&gt; The goal of this project is straightforward: translating Japanese movie subtitles on Netflix from Japanese to English. The motivation came from a lack of available English subtitles, making this project both an interesting technical challenge and a useful solution for my specific needs. It’s currently set to Japanese -&amp;gt; English, but the setup could be extended to other language pairs.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;High-Level Solution:&lt;/strong&gt; This project leverages some interesting nuances of Netflix streaming and cloud-based image processing:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Since the movie was on Netflix, I screen-recorded it, but Netflix DRM policies render the screen black, leaving only the subtitles visible.&lt;/li&gt;\n&lt;li&gt;This limitation became a feature: with only subtitles visible in each frame, pre-processing was simplified.&lt;/li&gt;\n&lt;li&gt;I processed the video frames with OpenCV, capturing a frame every second, then uploading these frames to an S3 bucket.&lt;/li&gt;\n&lt;li&gt;Next, I sent each frame to the Google Vision API, extracting the Japanese subtitle text.&lt;/li&gt;\n&lt;li&gt;After text extraction, the Japanese text was sent to AWS Translate to convert it to English.&lt;/li&gt;\n&lt;li&gt;Finally, I compiled the translated text into a JSON file with time-stamps (start time, end time, and translated text). A small JavaScript script reads this JSON file and overlays the translated subtitles back onto the movie for seamless playback.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience:&lt;/strong&gt; This project was purely a personal endeavor, but anyone interested in computer vision, media processing, or cloud technologies may find it insightful. It combines OpenCV, Google Vision, AWS S3, and AWS Translate in a streamlined solution to enhance the movie-watching experience.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison with Similar Tools&lt;/strong&gt;: While there are Chrome extensions that overlay dual-language subtitles on Netflix, they require both Japanese and English subtitles to be available. My case was different – there were no English subtitles available, necessitating a unique approach.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Demo / Screenshots&lt;/strong&gt;:&lt;br/&gt;\n&lt;a href=\"https://imgur.com/a/vWxPCua\"&gt;https://imgur.com/a/vWxPCua&lt;/a&gt;&lt;br/&gt;\n&lt;a href=\"https://imgur.com/a/zsVkxhT\"&gt;https://imgur.com/a/zsVkxhT&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If you’re curious, please check out my Github Repo: &lt;a href=\"https://github.com/Anubhav9/netfly-subtitle-converter\"&gt;https://github.com/Anubhav9/netfly-subtitle-converter&lt;/a&gt; It’s still a work in progress, but feel free to take a look and share any feedback.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/0F9VxxNf_cSP3t85BoYT4QYV44sUBSKlWJoa6ZEWN9A.jpg?auto=webp&amp;s=870ee7ce4d90b9d9272ade03fa15cc5b10316e0f",
                            "width": 2940,
                            "height": 1912
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/0F9VxxNf_cSP3t85BoYT4QYV44sUBSKlWJoa6ZEWN9A.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=90299f542412cbf168de5616c8185c8b86f54840",
                                "width": 108,
                                "height": 70
                            },
                            {
                                "url": "https://external-preview.redd.it/0F9VxxNf_cSP3t85BoYT4QYV44sUBSKlWJoa6ZEWN9A.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=08d7d15485f0e8437cb6daa6b2d4ca9c04f7a659",
                                "width": 216,
                                "height": 140
                            },
                            {
                                "url": "https://external-preview.redd.it/0F9VxxNf_cSP3t85BoYT4QYV44sUBSKlWJoa6ZEWN9A.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=c9d2d0f8232ce8bef71bbb038d4f84f1ff82310a",
                                "width": 320,
                                "height": 208
                            },
                            {
                                "url": "https://external-preview.redd.it/0F9VxxNf_cSP3t85BoYT4QYV44sUBSKlWJoa6ZEWN9A.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=ae041496a98766cb3c25eee6b8d83a6bb89d2f01",
                                "width": 640,
                                "height": 416
                            },
                            {
                                "url": "https://external-preview.redd.it/0F9VxxNf_cSP3t85BoYT4QYV44sUBSKlWJoa6ZEWN9A.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=6c910f0724fe2a4a06e2c5f06df3456784559759",
                                "width": 960,
                                "height": 624
                            },
                            {
                                "url": "https://external-preview.redd.it/0F9VxxNf_cSP3t85BoYT4QYV44sUBSKlWJoa6ZEWN9A.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=240b4ab8c2aa462becb8c962f065ef9ba425e378",
                                "width": 1080,
                                "height": 702
                            }
                        ],
                        "variants": {},
                        "id": "PloIVKAeVon40gNQML50Acy8F4ogja-LO5ENjHktxbU"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gny0ew",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Content_Ad_4153",
            "discussion_type": null,
            "num_comments": 27,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gny0ew/built_this_over_the_weekend_netflix_subtitle/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gny0ew/built_this_over_the_weekend_netflix_subtitle/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731235483.0,
            "num_crossposts": 1,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "[https://github.com/Ghosty-Tongue/iHeartRadio-Recorder](https://github.com/Ghosty-Tongue/iHeartRadio-Recorder)\n\n  \nIt makes use of the iHeart API :D",
            "author_fullname": "t2_11uwz1xr1c",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "I made this while I was bored - It's a iHeartRadio Station Recorder in Python",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Resource"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "resource",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gnvyi6",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.78,
            "author_flair_background_color": "#cc8b00",
            "subreddit_type": "public",
            "ups": 13,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": "791617e0-537b-11ee-afbf-4e8ba8ae3d55",
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Resource",
            "can_mod_post": false,
            "score": 13,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [
                {
                    "e": "text",
                    "t": "pip needs updating"
                }
            ],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731226438.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "richtext",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/Ghosty-Tongue/iHeartRadio-Recorder\"&gt;https://github.com/Ghosty-Tongue/iHeartRadio-Recorder&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It makes use of the iHeart API :D&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/dVAhu5EY2atFWJ3JmGLS9_Jf9jHy3SjRVgggxGmt8uY.jpg?auto=webp&amp;s=044a4cbc0ad0dff61b31a6592a70c6fcd972c35a",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/dVAhu5EY2atFWJ3JmGLS9_Jf9jHy3SjRVgggxGmt8uY.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=c8a68244a8e1f8207edf61609573d93a02d0ccdd",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/dVAhu5EY2atFWJ3JmGLS9_Jf9jHy3SjRVgggxGmt8uY.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=e05b2f03e1f9176ee3d5fbd8fefc4d9a74a42f61",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/dVAhu5EY2atFWJ3JmGLS9_Jf9jHy3SjRVgggxGmt8uY.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=7cb2c9375fda986122d6098b749bd540412f19fc",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/dVAhu5EY2atFWJ3JmGLS9_Jf9jHy3SjRVgggxGmt8uY.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=a926bb5381e7c681306b0f74f5637b8c0d411e56",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/dVAhu5EY2atFWJ3JmGLS9_Jf9jHy3SjRVgggxGmt8uY.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=bc2b2281bc27238022ffff845f51c2e1805efd77",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/dVAhu5EY2atFWJ3JmGLS9_Jf9jHy3SjRVgggxGmt8uY.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=52b80cf165f54d39a6f073f0b561d6567c6ef70c",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "h1pnqnYcT7ZR9Sj5Ljggq2SEjNGfp3Rc0_w30cZPAXE"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": "pip needs updating",
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ddbd37",
            "id": "1gnvyi6",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "SonicLeaksTwitter",
            "discussion_type": null,
            "num_comments": 6,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": "dark",
            "permalink": "/r/Python/comments/1gnvyi6/i_made_this_while_i_was_bored_its_a_iheartradio/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gnvyi6/i_made_this_while_i_was_bored_its_a_iheartradio/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731226438.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# Weekly Thread: What's Everyone Working On This Week? 🛠️\n\nHello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!\n\n## How it Works:\n\n1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.\n2. **Discuss**: Get feedback, find collaborators, or just chat about your project.\n3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.\n\n## Guidelines:\n\n* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.\n* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.\n\n## Example Shares:\n\n1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!\n2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.\n3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!\n\nLet's build and grow together! Share your journey and learn from others. Happy coding! 🌟",
            "author_fullname": "t2_6l4z3",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Sunday Daily Thread: What's everyone working on this week?",
            "link_flair_richtext": [
                {
                    "a": ":pythonLogo:",
                    "e": "emoji",
                    "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                },
                {
                    "e": "text",
                    "t": " Daily Thread"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "daily-thread",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gnnmv7",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.85,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 13,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": ":pythonLogo: Daily Thread",
            "can_mod_post": false,
            "score": 13,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": true,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731196812.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: What&amp;#39;s Everyone Working On This Week? 🛠️&lt;/h1&gt;\n\n&lt;p&gt;Hello &lt;a href=\"/r/Python\"&gt;/r/Python&lt;/a&gt;! It&amp;#39;s time to share what you&amp;#39;ve been working on! Whether it&amp;#39;s a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you&amp;#39;re up to!&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Show &amp;amp; Tell&lt;/strong&gt;: Share your current projects, completed works, or future ideas.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Discuss&lt;/strong&gt;: Get feedback, find collaborators, or just chat about your project.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Inspire&lt;/strong&gt;: Your project might inspire someone else, just as you might get inspired here.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Feel free to include as many details as you&amp;#39;d like. Code snippets, screenshots, and links are all welcome.&lt;/li&gt;\n&lt;li&gt;Whether it&amp;#39;s your job, your hobby, or your passion project, all Python-related work is welcome here.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Shares:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Machine Learning Model&lt;/strong&gt;: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Web Scraping&lt;/strong&gt;: Built a script to scrape and analyze news articles. It&amp;#39;s helped me understand media bias better.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Automation&lt;/strong&gt;: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Let&amp;#39;s build and grow together! Share your journey and learn from others. Happy coding! 🌟&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": "moderator",
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#00a6a5",
            "id": "1gnnmv7",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "AutoModerator",
            "discussion_type": null,
            "num_comments": 9,
            "send_replies": false,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gnnmv7/sunday_daily_thread_whats_everyone_working_on/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gnnmv7/sunday_daily_thread_whats_everyone_working_on/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731196812.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "My first attempt at a python package: [screenman](https://pypi.org/project/screenman/).\n\n# What My Project Does\n\nI was missing a tool that could match screen layout configurations to the connected screens so I decided to write one.\n\nWith screenman, I can easily switch between different screen layouts depending on the screens I have connected with a keyboard shortcut.\n\n# Target Audience\n\nAnyone that moves between different, fixed screen setups and wants to easily switch between them.\n\n# Comparison\n\nYou can of course do this with xrandr and a shell script, but I wanted something that I can map to a single keybinding.\n\n\n\nAny feedback is welcome!\n\n\n\nGitHub repo: https://github.com/Jimmy2027/screenman\n\n",
            "author_fullname": "t2_gs5nviq",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Introducing screenman, a tool to setup the screen layout depending on the connected screens",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gngim6",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.88,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 12,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 12,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731176938.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;My first attempt at a python package: &lt;a href=\"https://pypi.org/project/screenman/\"&gt;screenman&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;I was missing a tool that could match screen layout configurations to the connected screens so I decided to write one.&lt;/p&gt;\n\n&lt;p&gt;With screenman, I can easily switch between different screen layouts depending on the screens I have connected with a keyboard shortcut.&lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;Anyone that moves between different, fixed screen setups and wants to easily switch between them.&lt;/p&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;You can of course do this with xrandr and a shell script, but I wanted something that I can map to a single keybinding.&lt;/p&gt;\n\n&lt;p&gt;Any feedback is welcome!&lt;/p&gt;\n\n&lt;p&gt;GitHub repo: &lt;a href=\"https://github.com/Jimmy2027/screenman\"&gt;https://github.com/Jimmy2027/screenman&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/MoP6enMQ2Q6o4o23d5xCmvlBtpeCXWiqxc63UVCX5Rk.jpg?auto=webp&amp;s=85f19a22cbd85fa784cdb417359d8ff7cda9e394",
                            "width": 300,
                            "height": 300
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/MoP6enMQ2Q6o4o23d5xCmvlBtpeCXWiqxc63UVCX5Rk.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=46fa55dd1b1e587ab93bcbbdc6cb2de37b810bf3",
                                "width": 108,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/MoP6enMQ2Q6o4o23d5xCmvlBtpeCXWiqxc63UVCX5Rk.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=cfd7f76ac4c13cdc287edd9856ef0430dbc862a5",
                                "width": 216,
                                "height": 216
                            }
                        ],
                        "variants": {},
                        "id": "IUHM4ctLZQorzkPuYJ4IkGSag8BtaIqZoyqL1L53KuM"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gngim6",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Doodah249",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gngim6/introducing_screenman_a_tool_to_setup_the_screen/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gngim6/introducing_screenman_a_tool_to_setup_the_screen/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731176938.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# What My Project Does\n\nBeats the dinosaur game with AI\n\n# Target Audience\n\nNot meant for any real life usage. Mainly just a side project, and hopefully a nice resource for someone trying to do something similar.\n\n# Comparison\n\nPerforms quite poorly when compared to other libraries out there like TensorFlow. \n\n# Other Details\n\nMade with python from scratch(no ML libraries) to beat the dinosaur game. More details on my blog: [https://matthew-bird.com/blogs/Dino-Game-ML.html](https://matthew-bird.com/blogs/Dino-Game-ML.html)\n\nGitHub Repo: [https://github.com/mbird1258/Dino-Game](https://github.com/mbird1258/Dino-Game)",
            "author_fullname": "t2_nk3tadkr",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Beating the Dino Game with ML",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gnakqp",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.88,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 12,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 12,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731160403.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;Beats the dinosaur game with AI&lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;Not meant for any real life usage. Mainly just a side project, and hopefully a nice resource for someone trying to do something similar.&lt;/p&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;Performs quite poorly when compared to other libraries out there like TensorFlow. &lt;/p&gt;\n\n&lt;h1&gt;Other Details&lt;/h1&gt;\n\n&lt;p&gt;Made with python from scratch(no ML libraries) to beat the dinosaur game. More details on my blog: &lt;a href=\"https://matthew-bird.com/blogs/Dino-Game-ML.html\"&gt;https://matthew-bird.com/blogs/Dino-Game-ML.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;GitHub Repo: &lt;a href=\"https://github.com/mbird1258/Dino-Game\"&gt;https://github.com/mbird1258/Dino-Game&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gnakqp",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Mbird1258",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gnakqp/beating_the_dino_game_with_ml/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gnakqp/beating_the_dino_game_with_ml/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731160403.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# What My Project Does\n\nA basic program I made to turn music into sheet music(almost). Works by recreating the Fourier transform of the music by adding together the Fourier transforms of instrument samples and comparing the envelope of the instruments to the note being played. More details on my blog: [matthew-bird.com/blogs/Audio-Decomposition.html](http://matthew-bird.com/blogs/Audio-Decomposition.html)\n\n# Target Audience\n\nNot meant for any real life usage. Mainly just a side project, and hopefully a nice resource for someone trying to do something similar. Might also be useful for music transcription. \n\n# Comparison\n\nCompared to other methods out there, I think this project holds up pretty well. Most sites on the internet also seem to use AI instead of a blind source separation algorithm. \n\n# Other Details\n\nInstrument samples from University of Iowa Electronic Music Studios: [https://theremin.music.uiowa.edu/mis.html](https://theremin.music.uiowa.edu/mis.html)\n\nGitHub Repo: [https://github.com/mbird1258/Audio-Decomposition](https://github.com/mbird1258/Audio-Decomposition)",
            "author_fullname": "t2_nk3tadkr",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Separating music into notes and instruments (audio source separation)",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gnajj6",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.93,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 23,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 23,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731160296.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;A basic program I made to turn music into sheet music(almost). Works by recreating the Fourier transform of the music by adding together the Fourier transforms of instrument samples and comparing the envelope of the instruments to the note being played. More details on my blog: &lt;a href=\"http://matthew-bird.com/blogs/Audio-Decomposition.html\"&gt;matthew-bird.com/blogs/Audio-Decomposition.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;Not meant for any real life usage. Mainly just a side project, and hopefully a nice resource for someone trying to do something similar. Might also be useful for music transcription. &lt;/p&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;Compared to other methods out there, I think this project holds up pretty well. Most sites on the internet also seem to use AI instead of a blind source separation algorithm. &lt;/p&gt;\n\n&lt;h1&gt;Other Details&lt;/h1&gt;\n\n&lt;p&gt;Instrument samples from University of Iowa Electronic Music Studios: &lt;a href=\"https://theremin.music.uiowa.edu/mis.html\"&gt;https://theremin.music.uiowa.edu/mis.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;GitHub Repo: &lt;a href=\"https://github.com/mbird1258/Audio-Decomposition\"&gt;https://github.com/mbird1258/Audio-Decomposition&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gnajj6",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Mbird1258",
            "discussion_type": null,
            "num_comments": 8,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gnajj6/separating_music_into_notes_and_instruments_audio/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gnajj6/separating_music_into_notes_and_instruments_audio/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731160296.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# What My Project Does\n\nSmall open source project that performs basic localization using cameras I made as a fun project. Not the most accurate nor fast, but hopefully still a good proof of concept. \n\n# Target Audience\n\nNot meant for any real life usage. Mainly just a side project, and hopefully a nice resource for someone trying to do something similar. \n\n# Comparison\n\nThe feature matching in the project is slower than other methods like SIFT, SURF, and ORB, but seems relatively similar in terms of accuracy.\n\n# Other Details\n\nI used raspberry pi 0ws with socket to send images to my computer, where it calculates the relative positioning. Also makes use of ADXL345 accelerometers for rotational invariance. More details including the shopping list on my blog: [https://matthew-bird.com/blogs/Drone-Rel-Pos.html](https://matthew-bird.com/blogs/Drone-Rel-Pos.html)\n\nGitHub Repo: [https://github.com/mbird1258/Drone-relative-positioning](https://github.com/mbird1258/Drone-relative-positioning)",
            "author_fullname": "t2_nk3tadkr",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Open source drone localization",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gnagm8",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.92,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 11,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 11,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731160035.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;Small open source project that performs basic localization using cameras I made as a fun project. Not the most accurate nor fast, but hopefully still a good proof of concept. &lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;Not meant for any real life usage. Mainly just a side project, and hopefully a nice resource for someone trying to do something similar. &lt;/p&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;The feature matching in the project is slower than other methods like SIFT, SURF, and ORB, but seems relatively similar in terms of accuracy.&lt;/p&gt;\n\n&lt;h1&gt;Other Details&lt;/h1&gt;\n\n&lt;p&gt;I used raspberry pi 0ws with socket to send images to my computer, where it calculates the relative positioning. Also makes use of ADXL345 accelerometers for rotational invariance. More details including the shopping list on my blog: &lt;a href=\"https://matthew-bird.com/blogs/Drone-Rel-Pos.html\"&gt;https://matthew-bird.com/blogs/Drone-Rel-Pos.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;GitHub Repo: &lt;a href=\"https://github.com/mbird1258/Drone-relative-positioning\"&gt;https://github.com/mbird1258/Drone-relative-positioning&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gnagm8",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Mbird1258",
            "discussion_type": null,
            "num_comments": 1,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gnagm8/open_source_drone_localization/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gnagm8/open_source_drone_localization/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731160035.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hello, I built and packaged python from source code for my distro (cause the maintainers still don't have the latest version). The built and install was succeed  but I need to set PYTHONPATH in order to make some modules get detected. The PYTHONPATH is \"/usr/lib/python3.11/:/usr/lib64/python3.11/:/usr/lib/python3.11/site-packages/\" . How the PYTHONPATH isn't configured / setted automatically ? And is that normal ? thanks.",
            "author_fullname": "t2_4392fm7o",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Need to set PYTHONPATH in order to make modules get detected.",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Meta"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "meta",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gn61an",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.33,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Meta",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731142596.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello, I built and packaged python from source code for my distro (cause the maintainers still don&amp;#39;t have the latest version). The built and install was succeed  but I need to set PYTHONPATH in order to make some modules get detected. The PYTHONPATH is &amp;quot;/usr/lib/python3.11/:/usr/lib64/python3.11/:/usr/lib/python3.11/site-packages/&amp;quot; . How the PYTHONPATH isn&amp;#39;t configured / setted automatically ? And is that normal ? thanks.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "1a0ad668-4115-11ea-b5c6-0ee3885b83fb",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#373c3f",
            "id": "1gn61an",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "tiny_humble_guy",
            "discussion_type": null,
            "num_comments": 13,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gn61an/need_to_set_pythonpath_in_order_to_make_modules/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gn61an/need_to_set_pythonpath_in_order_to_make_modules/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731142596.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hi everyone! We're very proud to just have released a major update of our Agent-Based Modeling library: [Mesa 3.0](https://github.com/projectmesa/mesa/releases/tag/v3.0.0). It's our biggest release yet, with some really cool improvements to make agent-based modeling more intuitive, flexible and powerful.\n\n## What's Agent-Based Modeling?\n\nEver wondered how bird flocks organize themselves? Or how traffic jams form? Agent-based modeling (ABM) lets you simulate these complex systems by defining simple rules for individual \"agents\" (birds, cars, people, etc.) and then watching how they interact. Instead of writing equations to describe the whole system, you model each agent's behavior and let patterns emerge naturally through their interactions. It's particularly powerful for studying systems where individual decisions and interactions drive collective behavior.\n\n## What's Mesa?\n\nMesa is Python's leading framework for agent-based modeling, providing a comprehensive toolkit for creating, analyzing, and visualizing agent-based models. It combines Python's scientific stack (NumPy, pandas, Matplotlib) with specialized tools for handling spatial relationships, agent scheduling, and data collection. Whether you're studying epidemic spread, market dynamics, or ecological systems, Mesa provides the building blocks to create sophisticated simulations while keeping your code clean and maintainable.\n\n## What's New in 3.0?\n\nThe headline feature is the new agent management system, which brings pandas-like functionality to agent handling:\n\n```python\n# Find wealthy agents\nwealthy_agents = model.agents.select(lambda a: a.wealth &gt; 1000)\n\n# Group and analyze agents by state\ngrouped = model.agents.groupby(\"state\")\nstate_stats = grouped.agg({\n    \"count\": len,\n    \"avg_age\": (\"age\", np.mean),\n    \"total_wealth\": (\"wealth\", sum)\n})\n\n# Conditional activation of agents\nmodel.agents.select(lambda a: a.energy &gt; 0).do(\"move\")\n```\n\nPreviously to let Agents do stuff you were limited by 5 schedulers, which activated Agents in a certain order or pattern. Now with the AgentSet, you're free to do whatever you want!\n\n```python\n# Different activation patterns using AgentSet\nmodel.agents.shuffle_do(\"step\")  # Random activation (previously RandomActivation)\nmodel.agents.do(\"step\")          # Simultaneous activation\nmodel.agents.select(lambda a: a.energy &gt; 0).do(\"move\")  # Conditional activation\nmodel.agents.groupby(\"type\").do(\"update\")  # Activate by groups\nmodel.agents.select(lambda a: a.wealth &gt; 1000).shuffle_do(\"trade\")  # Complex patterns\n```\n\nOther major improvements include:\n- SolaraViz: A modern visualization system with real-time updates, interactive controls, and support for both grid-based and network models\n- Enhanced data collection with type-specific metrics (collect different data from predators vs prey!)\n- Experimental features like cell space with integrated property layers, Voronoi grids, and event-scheduling capabilities\n- Streamlined API that eliminates common boilerplate (no more manual agent ID assignment!)\n- Improved performance and reduced complexity across core operations\n\nWant to try it out? Just run:\n```bash\npip install --upgrade mesa\n```\n\nCheck out the [migration guide](https://mesa.readthedocs.io/latest/migration_guide.html) if you're upgrading existing models, or dive into the [tutorials](https://mesa.readthedocs.io/latest/tutorials/intro_tutorial.html) if you're new to Mesa. Whether you're researching social phenomena, optimizing logistics, or teaching complexity science, Mesa 3.0 provides a powerful and intuitive platform for agent-based modeling! 🚀",
            "author_fullname": "t2_14okit",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Mesa 3.0: A major update to Python's Agent-Based Modeling library 🎉",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "News"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "news",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gn5q8z",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.95,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 163,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "News",
            "can_mod_post": false,
            "score": 163,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731141207.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi everyone! We&amp;#39;re very proud to just have released a major update of our Agent-Based Modeling library: &lt;a href=\"https://github.com/projectmesa/mesa/releases/tag/v3.0.0\"&gt;Mesa 3.0&lt;/a&gt;. It&amp;#39;s our biggest release yet, with some really cool improvements to make agent-based modeling more intuitive, flexible and powerful.&lt;/p&gt;\n\n&lt;h2&gt;What&amp;#39;s Agent-Based Modeling?&lt;/h2&gt;\n\n&lt;p&gt;Ever wondered how bird flocks organize themselves? Or how traffic jams form? Agent-based modeling (ABM) lets you simulate these complex systems by defining simple rules for individual &amp;quot;agents&amp;quot; (birds, cars, people, etc.) and then watching how they interact. Instead of writing equations to describe the whole system, you model each agent&amp;#39;s behavior and let patterns emerge naturally through their interactions. It&amp;#39;s particularly powerful for studying systems where individual decisions and interactions drive collective behavior.&lt;/p&gt;\n\n&lt;h2&gt;What&amp;#39;s Mesa?&lt;/h2&gt;\n\n&lt;p&gt;Mesa is Python&amp;#39;s leading framework for agent-based modeling, providing a comprehensive toolkit for creating, analyzing, and visualizing agent-based models. It combines Python&amp;#39;s scientific stack (NumPy, pandas, Matplotlib) with specialized tools for handling spatial relationships, agent scheduling, and data collection. Whether you&amp;#39;re studying epidemic spread, market dynamics, or ecological systems, Mesa provides the building blocks to create sophisticated simulations while keeping your code clean and maintainable.&lt;/p&gt;\n\n&lt;h2&gt;What&amp;#39;s New in 3.0?&lt;/h2&gt;\n\n&lt;p&gt;The headline feature is the new agent management system, which brings pandas-like functionality to agent handling:&lt;/p&gt;\n\n&lt;p&gt;```python&lt;/p&gt;\n\n&lt;h1&gt;Find wealthy agents&lt;/h1&gt;\n\n&lt;p&gt;wealthy_agents = model.agents.select(lambda a: a.wealth &amp;gt; 1000)&lt;/p&gt;\n\n&lt;h1&gt;Group and analyze agents by state&lt;/h1&gt;\n\n&lt;p&gt;grouped = model.agents.groupby(&amp;quot;state&amp;quot;)\nstate_stats = grouped.agg({\n    &amp;quot;count&amp;quot;: len,\n    &amp;quot;avg_age&amp;quot;: (&amp;quot;age&amp;quot;, np.mean),\n    &amp;quot;total_wealth&amp;quot;: (&amp;quot;wealth&amp;quot;, sum)\n})&lt;/p&gt;\n\n&lt;h1&gt;Conditional activation of agents&lt;/h1&gt;\n\n&lt;p&gt;model.agents.select(lambda a: a.energy &amp;gt; 0).do(&amp;quot;move&amp;quot;)\n```&lt;/p&gt;\n\n&lt;p&gt;Previously to let Agents do stuff you were limited by 5 schedulers, which activated Agents in a certain order or pattern. Now with the AgentSet, you&amp;#39;re free to do whatever you want!&lt;/p&gt;\n\n&lt;p&gt;```python&lt;/p&gt;\n\n&lt;h1&gt;Different activation patterns using AgentSet&lt;/h1&gt;\n\n&lt;p&gt;model.agents.shuffle_do(&amp;quot;step&amp;quot;)  # Random activation (previously RandomActivation)\nmodel.agents.do(&amp;quot;step&amp;quot;)          # Simultaneous activation\nmodel.agents.select(lambda a: a.energy &amp;gt; 0).do(&amp;quot;move&amp;quot;)  # Conditional activation\nmodel.agents.groupby(&amp;quot;type&amp;quot;).do(&amp;quot;update&amp;quot;)  # Activate by groups\nmodel.agents.select(lambda a: a.wealth &amp;gt; 1000).shuffle_do(&amp;quot;trade&amp;quot;)  # Complex patterns\n```&lt;/p&gt;\n\n&lt;p&gt;Other major improvements include:\n- SolaraViz: A modern visualization system with real-time updates, interactive controls, and support for both grid-based and network models\n- Enhanced data collection with type-specific metrics (collect different data from predators vs prey!)\n- Experimental features like cell space with integrated property layers, Voronoi grids, and event-scheduling capabilities\n- Streamlined API that eliminates common boilerplate (no more manual agent ID assignment!)\n- Improved performance and reduced complexity across core operations&lt;/p&gt;\n\n&lt;p&gt;Want to try it out? Just run:\n&lt;code&gt;bash\npip install --upgrade mesa\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Check out the &lt;a href=\"https://mesa.readthedocs.io/latest/migration_guide.html\"&gt;migration guide&lt;/a&gt; if you&amp;#39;re upgrading existing models, or dive into the &lt;a href=\"https://mesa.readthedocs.io/latest/tutorials/intro_tutorial.html\"&gt;tutorials&lt;/a&gt; if you&amp;#39;re new to Mesa. Whether you&amp;#39;re researching social phenomena, optimizing logistics, or teaching complexity science, Mesa 3.0 provides a powerful and intuitive platform for agent-based modeling! 🚀&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/AbvRpvWJMju4udWU03Uxy_-4akpEl1RQU8LvSQuVsMg.jpg?auto=webp&amp;s=828fba328c52768c39adbf1e1b52b5c9d3d4f755",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/AbvRpvWJMju4udWU03Uxy_-4akpEl1RQU8LvSQuVsMg.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=1e642c77aa5017f374a21ae83dd2fe59cfed4d53",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/AbvRpvWJMju4udWU03Uxy_-4akpEl1RQU8LvSQuVsMg.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=85fc8fe3e4a3f343d80034c661ac4ca7c9299a9b",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/AbvRpvWJMju4udWU03Uxy_-4akpEl1RQU8LvSQuVsMg.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=62635f6400b5a2794e90813bd50b035b331b0287",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/AbvRpvWJMju4udWU03Uxy_-4akpEl1RQU8LvSQuVsMg.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=df95f5faeb5b45b23a35921a93bb314980567eba",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/AbvRpvWJMju4udWU03Uxy_-4akpEl1RQU8LvSQuVsMg.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=74ef341020de5ae2cddcbc7c13ef3c61bd67b280",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/AbvRpvWJMju4udWU03Uxy_-4akpEl1RQU8LvSQuVsMg.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=cd8e5d772e70a8e9418693a9c59507c1001c8113",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "0IQgnQz763IQxaigyv9n7BoXw38XjITXzcmsm4jlkuY"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#7193ff",
            "id": "1gn5q8z",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Balance-",
            "discussion_type": null,
            "num_comments": 23,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gn5q8z/mesa_30_a_major_update_to_pythons_agentbased/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gn5q8z/mesa_30_a_major_update_to_pythons_agentbased/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731141207.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "[Ididi](https://github.com/raceychan/ididi) is a pythonic dependency injection lib, with ergonomic apis, without boilplate code, works out of the box.\n\n# What My Project Does\n\nit builds a dependency graph based on your type hints, and inject those dependencies into corresponding classes/functions.\n\nIn the base case, all you need to do is to make a call to `instance = ididi.solve(class)` and you are done.\n\n# Quick Start\n\nHere’s a quick example of how idid works:\n\n    import ididi\n    \n    class Config:\n        def __init__(self, env: str = \"prod\"):\n            self.env = env\n    \n    class Database:\n        def __init__(self, config: Config):\n            self.config = config\n    \n    class UserRepository:\n        def __init__(self, db: Database):\n            self.db = db\n    \n    class UserService:\n        def __init__(self, repo: UserRepository):\n            self.repo = repo\n    \n    assert isinstance(ididi.solve(UserService), UserService)\n\n# Target Audience\n\nBasically everyone who write non-trivial projects that requires external dependencies.\n\nThe reason being that, once your project requires external dependencies like databases, http request client, it gets difficult to test without dependency injection.\n\n# Why another DI library?\n\nHalf of these DI libraries are service locator, and the other half require a lot of boilerplate code.\n\nThere are also a lot of exotic terms like `Container`,`Provide`, `Singleton` that create a cognitive load. I would argue that most of these terms and underlying concepts can be solved by a factory function.\n\nIdidi aims to be intuitive, ergonomic, and simple. You should be able to use it without modifying your existing code. No inheritance, no weird type annotations, you can get your dependencies injected with one line of code.\n\n# Comparison\n\n[python-dependency-injector](https://github.com/ets-labs/python-dependency-injector)\n\nboilerplate code, and weird terms like `Provide`, `Container`, `Singleton`, it also requires you to write your code in certain way.\n\nHere is how you would use python-dependency-injector: some code are skipped for brevity.\n\n    from dependency_injector import containers, providers\n    from dependency_injector.wiring import Provide, inject\n    \n    @inject\n    def main(service: Service = Provide[Container.service]) -&gt; None:\n        ...\n    \n    main()\n\nuse ididi for the same example:\n\n    import ididi\n    \n    @ididi.entry\n    def main(service: Service) -&gt; None:\n        ...\n    \n    main() # you might use just ididi.entry(main)() as well if a decorator is not your thing\n\n[injector](https://github.com/python-injector/injector)\n\nsimilar reason as above, it is just way too complicated than it needs to be. some code are skipped for brevity.\n\n    &gt;&gt;&gt; class RequestHandler:\n    ...   @inject\n    ...   def __init__(self, db: sqlite3.Connection):\n    ...     self._db = db\n    ...\n    ...   def get(self):\n    ...     cursor = self._db.cursor()\n    ...     cursor.execute('SELECT key, value FROM data ORDER by key')\n    ...     return cursor.fetchall()\n    \n    &gt;&gt;&gt; class DatabaseModule(Module):\n    ...   @singleton\n    ...   @provider\n    ...   def provide_sqlite_connection(self, configuration: Configuration) -&gt; sqlite3.Connection:\n    ...     conn = sqlite3.connect(configuration.connection_string)\n    ...     return conn\n    &gt;&gt;&gt; injector = Injector([configure_for_testing, DatabaseModule()])\n    &gt;&gt;&gt; handler = injector.get(RequestHandler)\n\nuse ididi for the same example:\n\n    from ididi import DependencyGraph\n    dg = DependencyGraph()\n    \n    @dg.node\n    def conn_facotry(configuration: Configuration) -&gt; sqlite3.Connection:\n        ...\n    \n    handler = dg.resolve(RequestHandler)\n\n# Production level example\n\nFor advanced usage with non-trivial examples, you might check out my multi-tenent llm platform project that heavily relies on ididi for dependency injection here\n\n[GITHUB-askgpt](https://github.com/raceychan/askgpt).\n\n# What is Dependency Injection\n\nIf a class require other classes as its attributes, these attributes are regarded as `dependencies` of the class, and the class requiers them is called a `dependent`.\n\nDependency injection means dynamically constructing the instances of these dependency classes and then pass them to the dependent class.\n\nExample: You want to send emails to user\n\n    class EmailSender: \n        def send_email(email_address: str, content: str) -&gt; None:\n            \"This is a generic base case that send ordinary email\"\n    \n    \n    class NotificationService: \n        def __init__(self, email_sender: EmailSender): \n            self._email_sender = email_sender\n    \n        def notify_user(user_email):\n            self._email_sender.send_mail(user_email, \"Hello!\")\n\nHere NotificationService is the dependent class, where EmailSender is the dependency.\n\nHaving relationship between classes like this is called Dependency Injection. This lower coupling between classes, and indirectly help you increase cohesion. Without it, your classes might look like\n\n    class NotificationService: \n        def __init__(self): \n            self._email_sender = EmailSender()\n\nThis make it harder to test, extend and modify. For example\n\n    class GmailSender(EmailSender):\n        def send_email(email_address: str, content: str) -&gt; None:\n            \"This is a special case that send gmail, where you might have special business logic\"\n    \n\nYou can't change the type of email\\_sender in NotificationService. but with depedency in jection, you can control the behavior of the `notify_user` method in NotificationService at runtime.\n\nIdidi helps your to automate the process of dependency injection with idid.solve(NotificationService).\n\n    # so instead of \n    notification_service = NotificationService(email_sender=EmailSender())\n    \n    # you can do with ididi:\n    \n    notification_service = ididi.solve(NotificationService)\n\nThe difference gets more obvious as the number of dependencies, and the number of dependencies to each dependency of NotificationService grows.\n\nI posted this yesterday, but somehow got deleted, probably because i mentioned a fake email address when trying to explain to people what dependency injeciton is.\n\nIf you have any question about ididi, or dependency injection, or python, let me know and I will be happy to answer.",
            "author_fullname": "t2_bsej6oep",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Ididi, dependency injection, in a single line of code",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gn5erp",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.81,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 28,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 28,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1731159835.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731139819.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/raceychan/ididi\"&gt;Ididi&lt;/a&gt; is a pythonic dependency injection lib, with ergonomic apis, without boilplate code, works out of the box.&lt;/p&gt;\n\n&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;it builds a dependency graph based on your type hints, and inject those dependencies into corresponding classes/functions.&lt;/p&gt;\n\n&lt;p&gt;In the base case, all you need to do is to make a call to &lt;code&gt;instance = ididi.solve(class)&lt;/code&gt; and you are done.&lt;/p&gt;\n\n&lt;h1&gt;Quick Start&lt;/h1&gt;\n\n&lt;p&gt;Here’s a quick example of how idid works:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import ididi\n\nclass Config:\n    def __init__(self, env: str = &amp;quot;prod&amp;quot;):\n        self.env = env\n\nclass Database:\n    def __init__(self, config: Config):\n        self.config = config\n\nclass UserRepository:\n    def __init__(self, db: Database):\n        self.db = db\n\nclass UserService:\n    def __init__(self, repo: UserRepository):\n        self.repo = repo\n\nassert isinstance(ididi.solve(UserService), UserService)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;Basically everyone who write non-trivial projects that requires external dependencies.&lt;/p&gt;\n\n&lt;p&gt;The reason being that, once your project requires external dependencies like databases, http request client, it gets difficult to test without dependency injection.&lt;/p&gt;\n\n&lt;h1&gt;Why another DI library?&lt;/h1&gt;\n\n&lt;p&gt;Half of these DI libraries are service locator, and the other half require a lot of boilerplate code.&lt;/p&gt;\n\n&lt;p&gt;There are also a lot of exotic terms like &lt;code&gt;Container&lt;/code&gt;,&lt;code&gt;Provide&lt;/code&gt;, &lt;code&gt;Singleton&lt;/code&gt; that create a cognitive load. I would argue that most of these terms and underlying concepts can be solved by a factory function.&lt;/p&gt;\n\n&lt;p&gt;Ididi aims to be intuitive, ergonomic, and simple. You should be able to use it without modifying your existing code. No inheritance, no weird type annotations, you can get your dependencies injected with one line of code.&lt;/p&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/ets-labs/python-dependency-injector\"&gt;python-dependency-injector&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;boilerplate code, and weird terms like &lt;code&gt;Provide&lt;/code&gt;, &lt;code&gt;Container&lt;/code&gt;, &lt;code&gt;Singleton&lt;/code&gt;, it also requires you to write your code in certain way.&lt;/p&gt;\n\n&lt;p&gt;Here is how you would use python-dependency-injector: some code are skipped for brevity.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from dependency_injector import containers, providers\nfrom dependency_injector.wiring import Provide, inject\n\n@inject\ndef main(service: Service = Provide[Container.service]) -&amp;gt; None:\n    ...\n\nmain()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;use ididi for the same example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import ididi\n\n@ididi.entry\ndef main(service: Service) -&amp;gt; None:\n    ...\n\nmain() # you might use just ididi.entry(main)() as well if a decorator is not your thing\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/python-injector/injector\"&gt;injector&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;similar reason as above, it is just way too complicated than it needs to be. some code are skipped for brevity.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; class RequestHandler:\n...   @inject\n...   def __init__(self, db: sqlite3.Connection):\n...     self._db = db\n...\n...   def get(self):\n...     cursor = self._db.cursor()\n...     cursor.execute(&amp;#39;SELECT key, value FROM data ORDER by key&amp;#39;)\n...     return cursor.fetchall()\n\n&amp;gt;&amp;gt;&amp;gt; class DatabaseModule(Module):\n...   @singleton\n...   @provider\n...   def provide_sqlite_connection(self, configuration: Configuration) -&amp;gt; sqlite3.Connection:\n...     conn = sqlite3.connect(configuration.connection_string)\n...     return conn\n&amp;gt;&amp;gt;&amp;gt; injector = Injector([configure_for_testing, DatabaseModule()])\n&amp;gt;&amp;gt;&amp;gt; handler = injector.get(RequestHandler)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;use ididi for the same example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from ididi import DependencyGraph\ndg = DependencyGraph()\n\n@dg.node\ndef conn_facotry(configuration: Configuration) -&amp;gt; sqlite3.Connection:\n    ...\n\nhandler = dg.resolve(RequestHandler)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Production level example&lt;/h1&gt;\n\n&lt;p&gt;For advanced usage with non-trivial examples, you might check out my multi-tenent llm platform project that heavily relies on ididi for dependency injection here&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/raceychan/askgpt\"&gt;GITHUB-askgpt&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h1&gt;What is Dependency Injection&lt;/h1&gt;\n\n&lt;p&gt;If a class require other classes as its attributes, these attributes are regarded as &lt;code&gt;dependencies&lt;/code&gt; of the class, and the class requiers them is called a &lt;code&gt;dependent&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Dependency injection means dynamically constructing the instances of these dependency classes and then pass them to the dependent class.&lt;/p&gt;\n\n&lt;p&gt;Example: You want to send emails to user&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class EmailSender: \n    def send_email(email_address: str, content: str) -&amp;gt; None:\n        &amp;quot;This is a generic base case that send ordinary email&amp;quot;\n\n\nclass NotificationService: \n    def __init__(self, email_sender: EmailSender): \n        self._email_sender = email_sender\n\n    def notify_user(user_email):\n        self._email_sender.send_mail(user_email, &amp;quot;Hello!&amp;quot;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here NotificationService is the dependent class, where EmailSender is the dependency.&lt;/p&gt;\n\n&lt;p&gt;Having relationship between classes like this is called Dependency Injection. This lower coupling between classes, and indirectly help you increase cohesion. Without it, your classes might look like&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class NotificationService: \n    def __init__(self): \n        self._email_sender = EmailSender()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This make it harder to test, extend and modify. For example&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class GmailSender(EmailSender):\n    def send_email(email_address: str, content: str) -&amp;gt; None:\n        &amp;quot;This is a special case that send gmail, where you might have special business logic&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can&amp;#39;t change the type of email_sender in NotificationService. but with depedency in jection, you can control the behavior of the &lt;code&gt;notify_user&lt;/code&gt; method in NotificationService at runtime.&lt;/p&gt;\n\n&lt;p&gt;Ididi helps your to automate the process of dependency injection with idid.solve(NotificationService).&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# so instead of \nnotification_service = NotificationService(email_sender=EmailSender())\n\n# you can do with ididi:\n\nnotification_service = ididi.solve(NotificationService)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The difference gets more obvious as the number of dependencies, and the number of dependencies to each dependency of NotificationService grows.&lt;/p&gt;\n\n&lt;p&gt;I posted this yesterday, but somehow got deleted, probably because i mentioned a fake email address when trying to explain to people what dependency injeciton is.&lt;/p&gt;\n\n&lt;p&gt;If you have any question about ididi, or dependency injection, or python, let me know and I will be happy to answer.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/y2IT4j6IxEcaBuQAPB4HxgbJU-2zG_5ykteiF_fKgTY.jpg?auto=webp&amp;s=ac58a2f27919f1805daeb6419257fd23455194f6",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/y2IT4j6IxEcaBuQAPB4HxgbJU-2zG_5ykteiF_fKgTY.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=9bd1ea6af18fe23e8d3bbdfdef2236d9aad57cf1",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/y2IT4j6IxEcaBuQAPB4HxgbJU-2zG_5ykteiF_fKgTY.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=57f3e2f34d09e2e29376cb1014d8aa7f31f8f2c8",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/y2IT4j6IxEcaBuQAPB4HxgbJU-2zG_5ykteiF_fKgTY.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=7a10eb1e43842926cc177204ecec8ec082826961",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/y2IT4j6IxEcaBuQAPB4HxgbJU-2zG_5ykteiF_fKgTY.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=c8df9dd21ee35bc869f2beadaed934f8b65155ad",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/y2IT4j6IxEcaBuQAPB4HxgbJU-2zG_5ykteiF_fKgTY.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=ae3eb107b4c9701a24b4eb7fce3f1f115cc63fdb",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/y2IT4j6IxEcaBuQAPB4HxgbJU-2zG_5ykteiF_fKgTY.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=491f9dbd909b61c695082259b8d4b6c1a9506dab",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "OFfyrchhrvBoj6ijEjX_4w3bbDR0D27w-AFUmeh_1rw"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gn5erp",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "AstronomerTerrible49",
            "discussion_type": null,
            "num_comments": 27,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gn5erp/ididi_dependency_injection_in_a_single_line_of/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gn5erp/ididi_dependency_injection_in_a_single_line_of/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731139819.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "\n## What My Project Does  \nDiscogs Rec is a recommender system designed to enhance the Discogs digging experience by allowing users to input URLs of releases that they were interested in and receive the top N recommendations back, in order to aid in discovering new music that they might not have discovered on their own. It utilizes Spotify's [Annoy](https://github.com/spotify/annoy) library and is trained on data from the Discogs data dumps, as well as additional data such as user wants, haves, and pricing collected via webscraping. At the moment it only supports recommendations for electronic music (hopefully will add hip-hop soon) listed on Discogs. This was a personal project I worked on in my spare time, so by no means is it perfect.\n\nAt the moment, the application isn't hosted anywhere as this was a side project. That being said, I have provided everything necessary you will need to run it on your local machine.\n\n## Target Audience  \nVinyl junkies like myself, always on the hunt for new music!\n\nLink to repo: [https://github.com/justinpakzad/discogs-rec](https://github.com/justinpakzad/discogs-rec)",
            "author_fullname": "t2_gn3n4dlxc",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Discogs Based Vinyl Recommender System",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gmxu1i",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.62,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 3,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 3,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731112884.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h2&gt;What My Project Does&lt;/h2&gt;\n\n&lt;p&gt;Discogs Rec is a recommender system designed to enhance the Discogs digging experience by allowing users to input URLs of releases that they were interested in and receive the top N recommendations back, in order to aid in discovering new music that they might not have discovered on their own. It utilizes Spotify&amp;#39;s &lt;a href=\"https://github.com/spotify/annoy\"&gt;Annoy&lt;/a&gt; library and is trained on data from the Discogs data dumps, as well as additional data such as user wants, haves, and pricing collected via webscraping. At the moment it only supports recommendations for electronic music (hopefully will add hip-hop soon) listed on Discogs. This was a personal project I worked on in my spare time, so by no means is it perfect.&lt;/p&gt;\n\n&lt;p&gt;At the moment, the application isn&amp;#39;t hosted anywhere as this was a side project. That being said, I have provided everything necessary you will need to run it on your local machine.&lt;/p&gt;\n\n&lt;h2&gt;Target Audience&lt;/h2&gt;\n\n&lt;p&gt;Vinyl junkies like myself, always on the hunt for new music!&lt;/p&gt;\n\n&lt;p&gt;Link to repo: &lt;a href=\"https://github.com/justinpakzad/discogs-rec\"&gt;https://github.com/justinpakzad/discogs-rec&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/xMdzBhH6FEUwRrLTT4zClr5FK84Jt5fFzCdnjO58dho.jpg?auto=webp&amp;s=40bd3677d71d3949be5a056da833eebee4820bb6",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/xMdzBhH6FEUwRrLTT4zClr5FK84Jt5fFzCdnjO58dho.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=f49b82fb0cdd3b90dab1760097a88655b7fd95fc",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/xMdzBhH6FEUwRrLTT4zClr5FK84Jt5fFzCdnjO58dho.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=ab3d95b8761363d7d4a1de8c02a604637b793087",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/xMdzBhH6FEUwRrLTT4zClr5FK84Jt5fFzCdnjO58dho.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=a28a113a783884829c5a93310634fa08ca3400e2",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/xMdzBhH6FEUwRrLTT4zClr5FK84Jt5fFzCdnjO58dho.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=a80457bf069903a1f553764e026bf2ba6fd100a5",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/xMdzBhH6FEUwRrLTT4zClr5FK84Jt5fFzCdnjO58dho.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=adb84da1dbf23111eef46f7da82990021eb4d992",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/xMdzBhH6FEUwRrLTT4zClr5FK84Jt5fFzCdnjO58dho.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=878452c9824ec2a585903bcfd28391694d886c47",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "w3lSpIUQWBk_syAx4CB8_E-SAUYiMmcPQ1Rg3Dw-D14"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gmxu1i",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Resident-Loss8774",
            "discussion_type": null,
            "num_comments": 2,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gmxu1i/discogs_based_vinyl_recommender_system/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gmxu1i/discogs_based_vinyl_recommender_system/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731112884.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# Weekly Thread: Resource Request and Sharing 📚\n\nStumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!\n\n## How it Works:\n\n1. **Request**: Can't find a resource on a particular topic? Ask here!\n2. **Share**: Found something useful? Share it with the community.\n3. **Review**: Give or get opinions on Python resources you've used.\n\n## Guidelines:\n\n* Please include the type of resource (e.g., book, video, article) and the topic.\n* Always be respectful when reviewing someone else's shared resource.\n\n## Example Shares:\n\n1. **Book**: [\"Fluent Python\"](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \\- Great for understanding Pythonic idioms.\n2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \\- Excellent overview of Python's built-in data structures.\n3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \\- A deep dive into decorators.\n\n## Example Requests:\n\n1. **Looking for**: Video tutorials on web scraping with Python.\n2. **Need**: Book recommendations for Python machine learning.\n\nShare the knowledge, enrich the community. Happy learning! 🌟",
            "author_fullname": "t2_6l4z3",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread",
            "link_flair_richtext": [
                {
                    "a": ":pythonLogo:",
                    "e": "emoji",
                    "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                },
                {
                    "e": "text",
                    "t": " Daily Thread"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "daily-thread",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gmwz92",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.71,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 4,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": ":pythonLogo: Daily Thread",
            "can_mod_post": false,
            "score": 4,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": true,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731110420.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: Resource Request and Sharing 📚&lt;/h1&gt;\n\n&lt;p&gt;Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Request&lt;/strong&gt;: Can&amp;#39;t find a resource on a particular topic? Ask here!&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Share&lt;/strong&gt;: Found something useful? Share it with the community.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Review&lt;/strong&gt;: Give or get opinions on Python resources you&amp;#39;ve used.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Please include the type of resource (e.g., book, video, article) and the topic.&lt;/li&gt;\n&lt;li&gt;Always be respectful when reviewing someone else&amp;#39;s shared resource.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Shares:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Book&lt;/strong&gt;: &lt;a href=\"https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008\"&gt;&amp;quot;Fluent Python&amp;quot;&lt;/a&gt; - Great for understanding Pythonic idioms.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Video&lt;/strong&gt;: &lt;a href=\"https://www.youtube.com/watch?v=pkYVOmU3MgA\"&gt;Python Data Structures&lt;/a&gt; - Excellent overview of Python&amp;#39;s built-in data structures.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Article&lt;/strong&gt;: &lt;a href=\"https://realpython.com/primer-on-python-decorators/\"&gt;Understanding Python Decorators&lt;/a&gt; - A deep dive into decorators.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Example Requests:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Looking for&lt;/strong&gt;: Video tutorials on web scraping with Python.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Need&lt;/strong&gt;: Book recommendations for Python machine learning.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Share the knowledge, enrich the community. Happy learning! 🌟&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#00a6a5",
            "id": "1gmwz92",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "AutoModerator",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": false,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gmwz92/saturday_daily_thread_resource_request_and/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gmwz92/saturday_daily_thread_resource_request_and/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731110420.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Links: [GitHub](https://github.com/phantasmlabs/phantasm) | [PyPI](https://pypi.org/project/phantasmpy/)\n\n**What My Project Does**\n\nHi everyone!\n\nIn the past month or so, I've been building Phantasm. Phantasm offers toolkits to add a human approval layer to monitor LLM agent's workflow in real-time. This allows deployed LLM agent to seek human approvers before executing a certain function.\n\nAn example use case for Phantasm:  \nLet's say, I built an LLM agent that can automatically draft and send email. As an approver, I could make sure that the email content and recipient are correct before the agent actually send the email.\n\nThis allows you to build and deploy LLM agent faster as you can monitor their action on the fly.\n\n**Target Audience**\n\nWe are still early in development but we have some team we work with to rapidly improve this project to enterprise standard.\n\nThe perfect audience for this project would be a small team building an LLM agent.\n\n**Comparison**\n\n* Fully open-source with a custom server and dashboard that you can self-host.\n* Comes with a Python SDK for you integrate the approval workflow to your LLM agent.\n* Load balancing approval requests to multiple approvers to accomodate growing teams.\n\nIf you think this will be helpful for you, feel free to check it out! If you have any feedback or suggestions, I'll be happy to hear about it.\n\n* GitHub: [https://github.com/phantasmlabs/phantasm](https://github.com/phantasmlabs/phantasm)\n* Python SDK: [https://pypi.org/project/phantasmpy/](https://pypi.org/project/phantasmpy/)",
            "author_fullname": "t2_3hevsvo4",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Human Approval Layer to Monitor LLM Agent in Production | Phantasm",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gmvfav",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.93,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 48,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 48,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731106091.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Links: &lt;a href=\"https://github.com/phantasmlabs/phantasm\"&gt;GitHub&lt;/a&gt; | &lt;a href=\"https://pypi.org/project/phantasmpy/\"&gt;PyPI&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Hi everyone!&lt;/p&gt;\n\n&lt;p&gt;In the past month or so, I&amp;#39;ve been building Phantasm. Phantasm offers toolkits to add a human approval layer to monitor LLM agent&amp;#39;s workflow in real-time. This allows deployed LLM agent to seek human approvers before executing a certain function.&lt;/p&gt;\n\n&lt;p&gt;An example use case for Phantasm:&lt;br/&gt;\nLet&amp;#39;s say, I built an LLM agent that can automatically draft and send email. As an approver, I could make sure that the email content and recipient are correct before the agent actually send the email.&lt;/p&gt;\n\n&lt;p&gt;This allows you to build and deploy LLM agent faster as you can monitor their action on the fly.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;We are still early in development but we have some team we work with to rapidly improve this project to enterprise standard.&lt;/p&gt;\n\n&lt;p&gt;The perfect audience for this project would be a small team building an LLM agent.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Fully open-source with a custom server and dashboard that you can self-host.&lt;/li&gt;\n&lt;li&gt;Comes with a Python SDK for you integrate the approval workflow to your LLM agent.&lt;/li&gt;\n&lt;li&gt;Load balancing approval requests to multiple approvers to accomodate growing teams.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;If you think this will be helpful for you, feel free to check it out! If you have any feedback or suggestions, I&amp;#39;ll be happy to hear about it.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;GitHub: &lt;a href=\"https://github.com/phantasmlabs/phantasm\"&gt;https://github.com/phantasmlabs/phantasm&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Python SDK: &lt;a href=\"https://pypi.org/project/phantasmpy/\"&gt;https://pypi.org/project/phantasmpy/&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/ZtKHRTp64s7FRTm1qB-covdwgTAL1zy1aCtd8VzHU-c.jpg?auto=webp&amp;s=1ee7f6fb4d735f50a2e6801a33e5f66bd664d50e",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/ZtKHRTp64s7FRTm1qB-covdwgTAL1zy1aCtd8VzHU-c.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=38f55d5c14c7172910fb1812f7d32e3ca3fa1252",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/ZtKHRTp64s7FRTm1qB-covdwgTAL1zy1aCtd8VzHU-c.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=e8ce915216937e2a4bb5a576122f9b97c3237d1f",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/ZtKHRTp64s7FRTm1qB-covdwgTAL1zy1aCtd8VzHU-c.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=a151310993888671786e6ff8b3a12ce83a24f832",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/ZtKHRTp64s7FRTm1qB-covdwgTAL1zy1aCtd8VzHU-c.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=000b35e88968357867a39b9ed4a4bb845dc6dcce",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/ZtKHRTp64s7FRTm1qB-covdwgTAL1zy1aCtd8VzHU-c.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=448cb7d6ca26452f1c4eff9cb9e9fea5b5f82bc0",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/ZtKHRTp64s7FRTm1qB-covdwgTAL1zy1aCtd8VzHU-c.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=3c8617dd5d602bd52f169000f5b75edfd53eb2c5",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "0pysbvz2TkkoS3ElQZwjTQNiBG4AF_nhcJ_uuHZ-E4E"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gmvfav",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "edwinkys",
            "discussion_type": null,
            "num_comments": 8,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gmvfav/human_approval_layer_to_monitor_llm_agent_in/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gmvfav/human_approval_layer_to_monitor_llm_agent_in/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731106091.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "E aí pessoal, venho divulgar por aqui meu canal de matemática, onde faço animações utilizando python, quem curte matemática e afins vai gostar bastante! Esse é o primeiro vídeo: [https://youtu.be/txq9wK8iOEA](https://youtu.be/txq9wK8iOEA)\n\nTem insta também: @ matematizando7",
            "author_fullname": "t2_1b1umaenfv",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Divulgação de canal",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "News"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "news",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gmp4wk",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.18,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "News",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731089756.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;E aí pessoal, venho divulgar por aqui meu canal de matemática, onde faço animações utilizando python, quem curte matemática e afins vai gostar bastante! Esse é o primeiro vídeo: &lt;a href=\"https://youtu.be/txq9wK8iOEA\"&gt;https://youtu.be/txq9wK8iOEA&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Tem insta também: @ matematizando7&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/8wRoMHisD2TtivwmO3zbbvmftfJ60tvcYxhlV3ythxY.jpg?auto=webp&amp;s=c8e1200205bafaa03fc763bb9618b81bdc2c8b62",
                            "width": 480,
                            "height": 360
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/8wRoMHisD2TtivwmO3zbbvmftfJ60tvcYxhlV3ythxY.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=25432dee4bfeb30cea67db4af02083a0296f1013",
                                "width": 108,
                                "height": 81
                            },
                            {
                                "url": "https://external-preview.redd.it/8wRoMHisD2TtivwmO3zbbvmftfJ60tvcYxhlV3ythxY.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=76aa800c7b0f1c1996d6fafa649b8d5a40cee7c5",
                                "width": 216,
                                "height": 162
                            },
                            {
                                "url": "https://external-preview.redd.it/8wRoMHisD2TtivwmO3zbbvmftfJ60tvcYxhlV3ythxY.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=b1d7e9996c841da70d240815b35bdea2e5b6a479",
                                "width": 320,
                                "height": 240
                            }
                        ],
                        "variants": {},
                        "id": "bgV6muo53BgRMXZJLfqDiMbMPCTaKMBGPi4Yx-7epXw"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#7193ff",
            "id": "1gmp4wk",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Specialist_Spare8017",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gmp4wk/divulgação_de_canal/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gmp4wk/divulgação_de_canal/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731089756.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "**Target Audience**:\n\nAudio playback in Python is pretty niche, but is a really fun an interesting way for newer programmers to integrate exciting feature feedback into their projects, but is also a good choice for seasoned projects to consider, if it meets the feature requirements of their existing solutions.\n\n**What It Does**:\n\n* **Non-blocking Audio Playback**: Unlike traditional audio libraries that may block your program’s main thread, **Rpaudio** runs in a non-blocking manner. This means it works seamlessly with Python’s async runtimes, allowing you to handle audio in the background without interrupting other tasks.\n* **Simple and Intuitive API**: I wanted to make sure that using **Rpaudio** is as simple as possible. With just a few lines of code, you can easily load, play, pause, and resume audio. For more complicated needs, it also provides abstractions such as AudioChannel's, which act as a queue manager, and can apply different effects such as fades or speed changes to any AudioSink object played from its queue, and can even apply the effects dynamically, over time.\n* **Lightweight and Efficient**: Built with Rust, **Rpaudio** brings the performance benefits of a compiled language to Python. This ensures safe and efficient thread handling and memory management.\n* **Cross-Platform**: **Rpaudio** is designed to work smoothly on Windows, macOS, and Linux. \n\nI built this because I wanted a way to use Rust’s power in Python projects without having to deal with the usual awkwardness that come with Python’s GIL. It’s especially useful if you’re working on projects that need to handle audio in async applications.\n\n**Why I Think It’s Useful**:\n\nDuring my work with Python and audio, I found that many libraries were either too cumbersome or didn’t play well with async applications. Libraries like PyAudio often require dealing with complicated dependencies, and others don’t handle concurrency well, leading to blocking calls that mess with async code. **Rpaudio** was born out of the need for a lightweight, easy-to-use solution that works well with Python’s async ecosystem and offers simple, efficient audio control.\n\n**Comparison**:\n\n[Pyaudio and other popular libraries](https://pypi.org/project/PyAudio/) like it, dont seem to support async functionality natively, which is one of the ways I normally like to interact with audio since it's naturally just kind of a blocking thing to do. Audio libraries are often more complex than necessary, requiring additional dependencies and setup that just isn’t needed if you’re working on a simple audio player or sound management tool. Additionally, they don’t always work well with async Python applications because they rely on blocking calls or the overhead of larger libraries..\n\n**I’d Love Your Feedback**:\n\nIm not a professional developer, so any feedback is well appriciated. \n\nCode, docs and other info available in the repo:\n\n[https://github.com/sockheadrps/rpaudio](https://github.com/sockheadrps/rpaudio)\n\nOr if youd like a short, video-form glimpse, I uploaded a short video explaining the uses and API a bit.\n\n[https://www.youtube.com/watch?v=DP7iUC5EHHQ](https://www.youtube.com/watch?v=DP7iUC5EHHQ)",
            "author_fullname": "t2_y6yin",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Rpaudio: A Lightweight, Non-Blocking Python Audio Library",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gml0rh",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.86,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 29,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 29,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731079392.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;Audio playback in Python is pretty niche, but is a really fun an interesting way for newer programmers to integrate exciting feature feedback into their projects, but is also a good choice for seasoned projects to consider, if it meets the feature requirements of their existing solutions.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What It Does&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Non-blocking Audio Playback&lt;/strong&gt;: Unlike traditional audio libraries that may block your program’s main thread, &lt;strong&gt;Rpaudio&lt;/strong&gt; runs in a non-blocking manner. This means it works seamlessly with Python’s async runtimes, allowing you to handle audio in the background without interrupting other tasks.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Simple and Intuitive API&lt;/strong&gt;: I wanted to make sure that using &lt;strong&gt;Rpaudio&lt;/strong&gt; is as simple as possible. With just a few lines of code, you can easily load, play, pause, and resume audio. For more complicated needs, it also provides abstractions such as AudioChannel&amp;#39;s, which act as a queue manager, and can apply different effects such as fades or speed changes to any AudioSink object played from its queue, and can even apply the effects dynamically, over time.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Lightweight and Efficient&lt;/strong&gt;: Built with Rust, &lt;strong&gt;Rpaudio&lt;/strong&gt; brings the performance benefits of a compiled language to Python. This ensures safe and efficient thread handling and memory management.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Cross-Platform&lt;/strong&gt;: &lt;strong&gt;Rpaudio&lt;/strong&gt; is designed to work smoothly on Windows, macOS, and Linux. &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I built this because I wanted a way to use Rust’s power in Python projects without having to deal with the usual awkwardness that come with Python’s GIL. It’s especially useful if you’re working on projects that need to handle audio in async applications.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Why I Think It’s Useful&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;During my work with Python and audio, I found that many libraries were either too cumbersome or didn’t play well with async applications. Libraries like PyAudio often require dealing with complicated dependencies, and others don’t handle concurrency well, leading to blocking calls that mess with async code. &lt;strong&gt;Rpaudio&lt;/strong&gt; was born out of the need for a lightweight, easy-to-use solution that works well with Python’s async ecosystem and offers simple, efficient audio control.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://pypi.org/project/PyAudio/\"&gt;Pyaudio and other popular libraries&lt;/a&gt; like it, dont seem to support async functionality natively, which is one of the ways I normally like to interact with audio since it&amp;#39;s naturally just kind of a blocking thing to do. Audio libraries are often more complex than necessary, requiring additional dependencies and setup that just isn’t needed if you’re working on a simple audio player or sound management tool. Additionally, they don’t always work well with async Python applications because they rely on blocking calls or the overhead of larger libraries..&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;I’d Love Your Feedback&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;Im not a professional developer, so any feedback is well appriciated. &lt;/p&gt;\n\n&lt;p&gt;Code, docs and other info available in the repo:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/sockheadrps/rpaudio\"&gt;https://github.com/sockheadrps/rpaudio&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Or if youd like a short, video-form glimpse, I uploaded a short video explaining the uses and API a bit.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=DP7iUC5EHHQ\"&gt;https://www.youtube.com/watch?v=DP7iUC5EHHQ&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/MoP6enMQ2Q6o4o23d5xCmvlBtpeCXWiqxc63UVCX5Rk.jpg?auto=webp&amp;s=85f19a22cbd85fa784cdb417359d8ff7cda9e394",
                            "width": 300,
                            "height": 300
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/MoP6enMQ2Q6o4o23d5xCmvlBtpeCXWiqxc63UVCX5Rk.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=46fa55dd1b1e587ab93bcbbdc6cb2de37b810bf3",
                                "width": 108,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/MoP6enMQ2Q6o4o23d5xCmvlBtpeCXWiqxc63UVCX5Rk.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=cfd7f76ac4c13cdc287edd9856ef0430dbc862a5",
                                "width": 216,
                                "height": 216
                            }
                        ],
                        "variants": {},
                        "id": "IUHM4ctLZQorzkPuYJ4IkGSag8BtaIqZoyqL1L53KuM"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gml0rh",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "SpaceBucketFu",
            "discussion_type": null,
            "num_comments": 9,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gml0rh/rpaudio_a_lightweight_nonblocking_python_audio/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gml0rh/rpaudio_a_lightweight_nonblocking_python_audio/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731079392.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "The app is open source 👉 [https://github.com/neonwatty/meme\\_search](https://github.com/neonwatty/meme_search)\n\n# What My Project Does\n\nThe open source engine indexes your memes by their visual content and text, making them easily searchable. Drag and drop recovered memes into any messager.\n\nAddittional features rolling out with the new \"pro\" version include:\n\n1. **Auto-Generate Meme Descriptions:**  Target specific memes for auto-description generation (instead of applying to your entire directory).\n2. **Manual Meme Description Editing:**  Edit or add descriptions manually for better search results, no need to wait for auto-generation if you don't want to.\n3. **Tags:**  Create, edit, and assign tags to memes for better organization and search filtering.\n4. **Faster Vector Search:**  Powered by Postgres and pgvector, enjoy faster keyword and vector searches with streamlined database transactions.\n5. **Keyword Search:**  Pro adds traditional keyword search in addition to semantic/vector search.\n6. **Directory Paths:**  Organize your memes across multiple subdirectories—no need to store everything in one folder.\n7. **New Organizational Tools:**  Filter by tags, directory paths, and description embeddings, plus toggle between keyword and vector search for more control.\n\n# Target Audience\n\nThis is a toy project. Open source and made for fun.\n\n# Comparison\n\n* immich: great open source image organizer\n* other local photo apps: some allow for indexing but not quite at the level of a vlm yet",
            "author_fullname": "t2_tg0l4eu1",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "A search engine for all your memes (v2.0 updates)",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gmkv55",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.84,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 32,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 32,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1731079912.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731078988.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The app is open source 👉 &lt;a href=\"https://github.com/neonwatty/meme_search\"&gt;https://github.com/neonwatty/meme_search&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;The open source engine indexes your memes by their visual content and text, making them easily searchable. Drag and drop recovered memes into any messager.&lt;/p&gt;\n\n&lt;p&gt;Addittional features rolling out with the new &amp;quot;pro&amp;quot; version include:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Auto-Generate Meme Descriptions:&lt;/strong&gt;  Target specific memes for auto-description generation (instead of applying to your entire directory).&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Manual Meme Description Editing:&lt;/strong&gt;  Edit or add descriptions manually for better search results, no need to wait for auto-generation if you don&amp;#39;t want to.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Tags:&lt;/strong&gt;  Create, edit, and assign tags to memes for better organization and search filtering.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Faster Vector Search:&lt;/strong&gt;  Powered by Postgres and pgvector, enjoy faster keyword and vector searches with streamlined database transactions.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Keyword Search:&lt;/strong&gt;  Pro adds traditional keyword search in addition to semantic/vector search.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Directory Paths:&lt;/strong&gt;  Organize your memes across multiple subdirectories—no need to store everything in one folder.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;New Organizational Tools:&lt;/strong&gt;  Filter by tags, directory paths, and description embeddings, plus toggle between keyword and vector search for more control.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;This is a toy project. Open source and made for fun.&lt;/p&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;immich: great open source image organizer&lt;/li&gt;\n&lt;li&gt;other local photo apps: some allow for indexing but not quite at the level of a vlm yet&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/E4XF02wzZxFHHbI-j43lnhBygEj-Q3pyzvhN3VBDULI.jpg?auto=webp&amp;s=ed6601bddd01a9df4f084cefe30a192ba4eba615",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/E4XF02wzZxFHHbI-j43lnhBygEj-Q3pyzvhN3VBDULI.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=c496a89c58915c74490655eaf4caae38916e5815",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/E4XF02wzZxFHHbI-j43lnhBygEj-Q3pyzvhN3VBDULI.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2390e87338b3d3c898e692d3ee92fe5a76db6c44",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/E4XF02wzZxFHHbI-j43lnhBygEj-Q3pyzvhN3VBDULI.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=3ab105b1a39d60f93315a06ce0a204f281c834c7",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/E4XF02wzZxFHHbI-j43lnhBygEj-Q3pyzvhN3VBDULI.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=0c82005c451eeb196404dabeca7790c0d896ec36",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/E4XF02wzZxFHHbI-j43lnhBygEj-Q3pyzvhN3VBDULI.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=4c258f93ba00310cc7a1cc900bdfe5d142ed1e18",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/E4XF02wzZxFHHbI-j43lnhBygEj-Q3pyzvhN3VBDULI.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=fcdc132551eb98fb0e032469894d576558de9d9d",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "pIgt8l1-vwAkbZTJzUF3v2dEYcdcOSqi5nM7PH-iLxs"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gmkv55",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "neonwatty",
            "discussion_type": null,
            "num_comments": 2,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gmkv55/a_search_engine_for_all_your_memes_v20_updates/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gmkv55/a_search_engine_for_all_your_memes_v20_updates/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731078988.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "[Sygil-Dev/whoosh-reloaded: Whoosh is a fast, featureful full-text indexing and searching library implemented in pure Python.](https://github.com/Sygil-Dev/whoosh-reloaded)\n\n[Whoosh 3.0.0 documentation — Whoosh-Reloaded 3.0.0 documentation](https://whoosh-reloaded.readthedocs.io/en/latest/)",
            "author_fullname": "t2_1geaiiof",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "I finally found a currently-maintained version of Whoosh, a text search library",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gm8ovf",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.87,
            "author_flair_background_color": "transparent",
            "subreddit_type": "public",
            "ups": 37,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": "4cc838b8-3159-11e1-83e4-12313d18ad57",
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 37,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [
                {
                    "e": "text",
                    "t": "pip install girlfriend"
                }
            ],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731034741.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "richtext",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/Sygil-Dev/whoosh-reloaded\"&gt;Sygil-Dev/whoosh-reloaded: Whoosh is a fast, featureful full-text indexing and searching library implemented in pure Python.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://whoosh-reloaded.readthedocs.io/en/latest/\"&gt;Whoosh 3.0.0 documentation — Whoosh-Reloaded 3.0.0 documentation&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/vMYBS9o-LJzjGhBmhp7Yutt2c2w_vcX3Ro82aNX-S8Y.jpg?auto=webp&amp;s=2b6bd6a38f120326b051af350af04357e21e04d9",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/vMYBS9o-LJzjGhBmhp7Yutt2c2w_vcX3Ro82aNX-S8Y.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=27b67029b18a8bc8048d30e381ef5f50f781ef31",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/vMYBS9o-LJzjGhBmhp7Yutt2c2w_vcX3Ro82aNX-S8Y.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=4fa7f8d43e7e53986e4d2859646d65c7f11b0ddc",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/vMYBS9o-LJzjGhBmhp7Yutt2c2w_vcX3Ro82aNX-S8Y.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=b70e70983347d72345a8c4750f50116a851a85ac",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/vMYBS9o-LJzjGhBmhp7Yutt2c2w_vcX3Ro82aNX-S8Y.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=b44c6940ca1c7ac1731cea31c4eb0ca0bb2ff6b2",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/vMYBS9o-LJzjGhBmhp7Yutt2c2w_vcX3Ro82aNX-S8Y.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=2ab3e8ae483d37f76287e06a8ccce7f2b17e2aa2",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/vMYBS9o-LJzjGhBmhp7Yutt2c2w_vcX3Ro82aNX-S8Y.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=ec758756a5afda608344ff35bb13cbd1b0947da6",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "NAI3z4lHjOkuzZO9TvyprWGIoe-QFcB3m9lN0uLzgbc"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": "pip install girlfriend",
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gm8ovf",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "KingsmanVince",
            "discussion_type": null,
            "num_comments": 10,
            "send_replies": false,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": "dark",
            "permalink": "/r/Python/comments/1gm8ovf/i_finally_found_a_currentlymaintained_version_of/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gm8ovf/i_finally_found_a_currentlymaintained_version_of/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731034741.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Oracle forms builder alternate\n\nHi All,\n   My employer recently upgraded from Oracle 11g to 19c..there was a reporting module that was built out of Oracle 6i and now with the upgrade the reporting module is breaking as there is no compatible version of Oracle forms builder with 19c.\n\nSo we have been asked to find alternates.I am thinking of suggesting Django with html as the requirement mainly focuses on generating excel docs by querying the Oracle tables.they need an UI component just to trigger the Excel generation process.\n\nNow am from completely java background and have very minimal knowledge in Django.But I did start leaning python and found the file operations are much more clean and minimal code in python when compared to java and hence thinking of suggesting python with Django for a quick turnaround.\n\nIs this good suggestion or Is there anything else out there that am completely missing for this scenario?\n\nTech stack preferred is java,springboot,angular,python and Django or flask\n\nP.S it has to be open source.When I say open source I mean it should be free of cost\n\nThanks In advance",
            "author_fullname": "t2_kp3b2cuob",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Oracle forms builder alternate",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gm6hp1",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.68,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 4,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 4,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1731029510.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731028028.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Oracle forms builder alternate&lt;/p&gt;\n\n&lt;p&gt;Hi All,\n   My employer recently upgraded from Oracle 11g to 19c..there was a reporting module that was built out of Oracle 6i and now with the upgrade the reporting module is breaking as there is no compatible version of Oracle forms builder with 19c.&lt;/p&gt;\n\n&lt;p&gt;So we have been asked to find alternates.I am thinking of suggesting Django with html as the requirement mainly focuses on generating excel docs by querying the Oracle tables.they need an UI component just to trigger the Excel generation process.&lt;/p&gt;\n\n&lt;p&gt;Now am from completely java background and have very minimal knowledge in Django.But I did start leaning python and found the file operations are much more clean and minimal code in python when compared to java and hence thinking of suggesting python with Django for a quick turnaround.&lt;/p&gt;\n\n&lt;p&gt;Is this good suggestion or Is there anything else out there that am completely missing for this scenario?&lt;/p&gt;\n\n&lt;p&gt;Tech stack preferred is java,springboot,angular,python and Django or flask&lt;/p&gt;\n\n&lt;p&gt;P.S it has to be open source.When I say open source I mean it should be free of cost&lt;/p&gt;\n\n&lt;p&gt;Thanks In advance&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gm6hp1",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "prash1988",
            "discussion_type": null,
            "num_comments": 9,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gm6hp1/oracle_forms_builder_alternate/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gm6hp1/oracle_forms_builder_alternate/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731028028.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hey folks;\n\nI've recently been putting in some work on my dependency injection library (... I know, not another one...).\n\nLet me introduce: PyJudo  \n\n[https://github.com/NixonInnes/pyjudo](https://github.com/NixonInnes/pyjudo)  \n\n\nTL;DR: It's a pretty basic service container implementation, primarily inspired by Microsoft's .NET DI ServiceCollection. \n\n**What My Project Does**  \nPyJudo is a library to support the Dependency Injection pattern. It facilitates the registration of services, resolves dependencies, and manages the lifecycle of services throughout your application. \n\n**Target Audience**  \nThe library is still in a beta state, but most of the features have been developed to a state which they can be used.  \nPyJudo use case is typically in large codebases where there are several interdependent service implementations. It helps decouple service creation from logic, and provides a mechanism to replace / mock services, to allow easier isolation and testing.\n\n**Comparison**  \nThere are several other dependency injection libraries out there, the biggest ones being *python-dependency-injector* and *returns*.  \nPyJudo aims to have a more straight-forward interface, and styles itself on the Microsoft .NET DependencyInjection library.\n\n**Basics**  \nDefine service interfaces, typically in the form of an abstract class, and implementations:\n\n```python\n# Interfaces\nclass IFooService(ABC): ...\n\nclass IBarService(ABC): ...\n\n# Implementations\nclass FooService(IFooService): ...\n\nclass BarService(IBarService):\n    def __init__(self, foo: IFooService): ...\n```\n\nCreate a `ServiceCollection` and register the services:\n\n```python\nservices = ServiceCollection()\n\n(services\n    .register(IFoo, Foo)\n    .register(IBar, Bar)\n)\n```\n\nResolve services (and their dependencies) from the container:\n\n```python\nbar = services[IFoo]()\n```\n\n**Features**\n - Transient, scoped and singleton service lifetimes\n &gt; `services.register(IFoo, Foo, ServiceLife.SINGLETON)`\n - Context managed scopes\n &gt; `with services.create_scope() as scope:`\n - Nested (stacked) scopes\n - Disposable services\n &gt; Services registered with `dispose()` methods, will be \"disposed\" when leaving scopes\n - (WIP, see dev branch) Dependencies as Factories\n &gt; Instead of injecting dependencies, inject a factory for lazy instanciation using `Factory[IFoo]` syntax\n\n---\n\n\nI'm still in the process of fleshing out some of the fluffy bits, and beefing up the documentation; but would appreciate any feedback.  \n\nIf you're interested, but totally new to dependency injection in the form of interfaces and implementations; then I've been writing some documentation to help get to grips with the library and the concepts:  \n[https://github.com/NixonInnes/pyjudo/tree/dev/examples](https://github.com/NixonInnes/pyjudo/tree/dev/examples)",
            "author_fullname": "t2_8c15k",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "PyJudo - Another dependency injection library...",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gm6bdf",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.81,
            "author_flair_background_color": "transparent",
            "subreddit_type": "public",
            "ups": 11,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": "67d01c9c-537b-11ee-b0d0-7225f76af176",
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 11,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [
                {
                    "e": "text",
                    "t": "Pythonista"
                }
            ],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731027499.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "richtext",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey folks;&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve recently been putting in some work on my dependency injection library (... I know, not another one...).&lt;/p&gt;\n\n&lt;p&gt;Let me introduce: PyJudo  &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/NixonInnes/pyjudo\"&gt;https://github.com/NixonInnes/pyjudo&lt;/a&gt;  &lt;/p&gt;\n\n&lt;p&gt;TL;DR: It&amp;#39;s a pretty basic service container implementation, primarily inspired by Microsoft&amp;#39;s .NET DI ServiceCollection. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;br/&gt;\nPyJudo is a library to support the Dependency Injection pattern. It facilitates the registration of services, resolves dependencies, and manages the lifecycle of services throughout your application. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;br/&gt;\nThe library is still in a beta state, but most of the features have been developed to a state which they can be used.&lt;br/&gt;\nPyJudo use case is typically in large codebases where there are several interdependent service implementations. It helps decouple service creation from logic, and provides a mechanism to replace / mock services, to allow easier isolation and testing.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;br/&gt;\nThere are several other dependency injection libraries out there, the biggest ones being &lt;em&gt;python-dependency-injector&lt;/em&gt; and &lt;em&gt;returns&lt;/em&gt;.&lt;br/&gt;\nPyJudo aims to have a more straight-forward interface, and styles itself on the Microsoft .NET DependencyInjection library.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Basics&lt;/strong&gt;&lt;br/&gt;\nDefine service interfaces, typically in the form of an abstract class, and implementations:&lt;/p&gt;\n\n&lt;p&gt;```python&lt;/p&gt;\n\n&lt;h1&gt;Interfaces&lt;/h1&gt;\n\n&lt;p&gt;class IFooService(ABC): ...&lt;/p&gt;\n\n&lt;p&gt;class IBarService(ABC): ...&lt;/p&gt;\n\n&lt;h1&gt;Implementations&lt;/h1&gt;\n\n&lt;p&gt;class FooService(IFooService): ...&lt;/p&gt;\n\n&lt;p&gt;class BarService(IBarService):\n    def &lt;strong&gt;init&lt;/strong&gt;(self, foo: IFooService): ...\n```&lt;/p&gt;\n\n&lt;p&gt;Create a &lt;code&gt;ServiceCollection&lt;/code&gt; and register the services:&lt;/p&gt;\n\n&lt;p&gt;```python\nservices = ServiceCollection()&lt;/p&gt;\n\n&lt;p&gt;(services\n    .register(IFoo, Foo)\n    .register(IBar, Bar)\n)\n```&lt;/p&gt;\n\n&lt;p&gt;Resolve services (and their dependencies) from the container:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;python\nbar = services[IFoo]()\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;\n - Transient, scoped and singleton service lifetimes&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;&lt;code&gt;services.register(IFoo, Foo, ServiceLife.SINGLETON)&lt;/code&gt;\n - Context managed scopes\n&lt;code&gt;with services.create_scope() as scope:&lt;/code&gt;\n - Nested (stacked) scopes\n - Disposable services\nServices registered with &lt;code&gt;dispose()&lt;/code&gt; methods, will be &amp;quot;disposed&amp;quot; when leaving scopes\n - (WIP, see dev branch) Dependencies as Factories\nInstead of injecting dependencies, inject a factory for lazy instanciation using &lt;code&gt;Factory[IFoo]&lt;/code&gt; syntax&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;I&amp;#39;m still in the process of fleshing out some of the fluffy bits, and beefing up the documentation; but would appreciate any feedback.  &lt;/p&gt;\n\n&lt;p&gt;If you&amp;#39;re interested, but totally new to dependency injection in the form of interfaces and implementations; then I&amp;#39;ve been writing some documentation to help get to grips with the library and the concepts:&lt;br/&gt;\n&lt;a href=\"https://github.com/NixonInnes/pyjudo/tree/dev/examples\"&gt;https://github.com/NixonInnes/pyjudo/tree/dev/examples&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/NlGwPWdy8JRXHCyU-6rORogxlMn3ShmpZ4J07nnRBLA.jpg?auto=webp&amp;s=db28b95817cc3fa7f2ee7fa792efb7c799626202",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/NlGwPWdy8JRXHCyU-6rORogxlMn3ShmpZ4J07nnRBLA.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=2aecf9c80b7fbaa1fde9154c01d2ed605034168c",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/NlGwPWdy8JRXHCyU-6rORogxlMn3ShmpZ4J07nnRBLA.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=01d35bba69983a7898e85db21a86bcd7a36fafcd",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/NlGwPWdy8JRXHCyU-6rORogxlMn3ShmpZ4J07nnRBLA.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=79e0ec73a7ea0490ed5c67ab04adb1a5caf24143",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/NlGwPWdy8JRXHCyU-6rORogxlMn3ShmpZ4J07nnRBLA.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=20d2c4df198ebf8117c5d0d79435fa4c113e18da",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/NlGwPWdy8JRXHCyU-6rORogxlMn3ShmpZ4J07nnRBLA.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=5040b2a9ad60bee3de6998fb2583b635121e00cd",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/NlGwPWdy8JRXHCyU-6rORogxlMn3ShmpZ4J07nnRBLA.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=724601a4b51fdf84380579edec4abc5497f2b867",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "E7iIfa-1t6pIpp4SHixTcZXywYZBvH0oAztMrV8WxPc"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": "Pythonista",
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gm6bdf",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "NixonInnes",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": "dark",
            "permalink": "/r/Python/comments/1gm6bdf/pyjudo_another_dependency_injection_library/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gm6bdf/pyjudo_another_dependency_injection_library/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731027499.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# Weekly Thread: Meta Discussions and Free Talk Friday 🎙️\n\nWelcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!\n\n## How it Works:\n\n1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.\n2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.\n3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.\n\n## Guidelines:\n\n* All topics should be related to Python or the /r/python community.\n* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).\n\n## Example Topics:\n\n1. **New Python Release**: What do you think about the new features in Python 3.11?\n2. **Community Events**: Any Python meetups or webinars coming up?\n3. **Learning Resources**: Found a great Python tutorial? Share it here!\n4. **Job Market**: How has Python impacted your career?\n5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!\n6. **Community Ideas**: Something you'd like to see us do? tell us.\n\nLet's keep the conversation going. Happy discussing! 🌟",
            "author_fullname": "t2_6l4z3",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays",
            "link_flair_richtext": [
                {
                    "a": ":pythonLogo:",
                    "e": "emoji",
                    "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                },
                {
                    "e": "text",
                    "t": " Daily Thread"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "daily-thread",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gm53zx",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.72,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 3,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": ":pythonLogo: Daily Thread",
            "can_mod_post": false,
            "score": 3,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": true,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731024051.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: Meta Discussions and Free Talk Friday 🎙️&lt;/h1&gt;\n\n&lt;p&gt;Welcome to Free Talk Friday on &lt;a href=\"/r/Python\"&gt;/r/Python&lt;/a&gt;! This is the place to discuss the &lt;a href=\"/r/Python\"&gt;r/Python&lt;/a&gt; community (meta discussions), Python news, projects, or anything else Python-related!&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Open Mic&lt;/strong&gt;: Share your thoughts, questions, or anything you&amp;#39;d like related to Python or the community.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Community Pulse&lt;/strong&gt;: Discuss what you feel is working well or what could be improved in the &lt;a href=\"/r/python\"&gt;/r/python&lt;/a&gt; community.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;News &amp;amp; Updates&lt;/strong&gt;: Keep up-to-date with the latest in Python and share any news you find interesting.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;All topics should be related to Python or the &lt;a href=\"/r/python\"&gt;/r/python&lt;/a&gt; community.&lt;/li&gt;\n&lt;li&gt;Be respectful and follow Reddit&amp;#39;s &lt;a href=\"https://www.redditinc.com/policies/content-policy\"&gt;Code of Conduct&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Topics:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;New Python Release&lt;/strong&gt;: What do you think about the new features in Python 3.11?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Community Events&lt;/strong&gt;: Any Python meetups or webinars coming up?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Learning Resources&lt;/strong&gt;: Found a great Python tutorial? Share it here!&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Job Market&lt;/strong&gt;: How has Python impacted your career?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Hot Takes&lt;/strong&gt;: Got a controversial Python opinion? Let&amp;#39;s hear it!&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Community Ideas&lt;/strong&gt;: Something you&amp;#39;d like to see us do? tell us.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Let&amp;#39;s keep the conversation going. Happy discussing! 🌟&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#00a6a5",
            "id": "1gm53zx",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "AutoModerator",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gm53zx/friday_daily_thread_rpython_meta_and_freetalk/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gm53zx/friday_daily_thread_rpython_meta_and_freetalk/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731024051.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "### What my project does\n\nHacked this fun little terminal reader to weave through books with vim-like navigation and AI\n\nNavigate like you're in vim: `h`/`l` between chapters, `j`/`k` to scroll, `g`/`G` to jump around\n\n- `a`sk questions to the text - incl. references to sections, chapters, book &amp; its metadata\n- `s`ummarize current section\n- `t`oggle toc\n- `r`ead passage\n- `q`uit whenever\n\nAnd my favorite, press `&gt;` for an AI narrator that situates you in the current scene/chapter.\n\nShould work with any `.epub` file.\n\n### Target audience\n\nThis is side project aimed at other curious devs who want to go deep and broad with books. It's more of an experimental exploration of combining the simplicity of terminals, the complexity of AI, and the breadth, depth, and vast knowledge in books.\n\n### Comparison\n\nUnlike other terminal-based readers or standard ebook readers, weft brings in AI for a more interactive reading experience. weft focuses on navigation and interaction - you can ask questions to what you're reading, generate summaries, and even *summon* a narrator to contextualize the current scene (see `&gt;` above)\n\nThink of it as vim-nav + epub reading + AI reading companion, all in one terminal interface.\n\n**Code &amp; setup instructions**: https://github.com/dpunj/weft\n\n**Quick demo**: https://x.com/dpunjabi/status/1854361314040446995\n\nBuilt this as I wanted a more interactive way to \"move\" around books and go broad or deep in the text. And who knows, perhaps uncover insights hidden in some of these books.\n\n\nCurious to hear your thoughts &amp; feedback.",
            "author_fullname": "t2_4f19d",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "weft 🪢 - a vim-styled terminal reader that lets you chat with your books",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gm2mmx",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.79,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 12,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 12,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731017351.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h3&gt;What my project does&lt;/h3&gt;\n\n&lt;p&gt;Hacked this fun little terminal reader to weave through books with vim-like navigation and AI&lt;/p&gt;\n\n&lt;p&gt;Navigate like you&amp;#39;re in vim: &lt;code&gt;h&lt;/code&gt;/&lt;code&gt;l&lt;/code&gt; between chapters, &lt;code&gt;j&lt;/code&gt;/&lt;code&gt;k&lt;/code&gt; to scroll, &lt;code&gt;g&lt;/code&gt;/&lt;code&gt;G&lt;/code&gt; to jump around&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;a&lt;/code&gt;sk questions to the text - incl. references to sections, chapters, book &amp;amp; its metadata&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;s&lt;/code&gt;ummarize current section&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;t&lt;/code&gt;oggle toc&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;r&lt;/code&gt;ead passage&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;q&lt;/code&gt;uit whenever&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;And my favorite, press &lt;code&gt;&amp;gt;&lt;/code&gt; for an AI narrator that situates you in the current scene/chapter.&lt;/p&gt;\n\n&lt;p&gt;Should work with any &lt;code&gt;.epub&lt;/code&gt; file.&lt;/p&gt;\n\n&lt;h3&gt;Target audience&lt;/h3&gt;\n\n&lt;p&gt;This is side project aimed at other curious devs who want to go deep and broad with books. It&amp;#39;s more of an experimental exploration of combining the simplicity of terminals, the complexity of AI, and the breadth, depth, and vast knowledge in books.&lt;/p&gt;\n\n&lt;h3&gt;Comparison&lt;/h3&gt;\n\n&lt;p&gt;Unlike other terminal-based readers or standard ebook readers, weft brings in AI for a more interactive reading experience. weft focuses on navigation and interaction - you can ask questions to what you&amp;#39;re reading, generate summaries, and even &lt;em&gt;summon&lt;/em&gt; a narrator to contextualize the current scene (see &lt;code&gt;&amp;gt;&lt;/code&gt; above)&lt;/p&gt;\n\n&lt;p&gt;Think of it as vim-nav + epub reading + AI reading companion, all in one terminal interface.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Code &amp;amp; setup instructions&lt;/strong&gt;: &lt;a href=\"https://github.com/dpunj/weft\"&gt;https://github.com/dpunj/weft&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Quick demo&lt;/strong&gt;: &lt;a href=\"https://x.com/dpunjabi/status/1854361314040446995\"&gt;https://x.com/dpunjabi/status/1854361314040446995&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Built this as I wanted a more interactive way to &amp;quot;move&amp;quot; around books and go broad or deep in the text. And who knows, perhaps uncover insights hidden in some of these books.&lt;/p&gt;\n\n&lt;p&gt;Curious to hear your thoughts &amp;amp; feedback.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/ZbGKlH7bwEgkbDNqFK5bU97xVqFzf9CZS2XaHVVipOw.jpg?auto=webp&amp;s=3d8370a4224e6f2bd36f859e63bbfdf84e6f2647",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/ZbGKlH7bwEgkbDNqFK5bU97xVqFzf9CZS2XaHVVipOw.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=1d4ffcb6aaa62685e361379054f99975713d849e",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/ZbGKlH7bwEgkbDNqFK5bU97xVqFzf9CZS2XaHVVipOw.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2c74a48b7425bd9a9e2ef482ca7ba4af2b52bae0",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/ZbGKlH7bwEgkbDNqFK5bU97xVqFzf9CZS2XaHVVipOw.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=e01f5918e854bc17ef7b21d04d820b9cb521769f",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/ZbGKlH7bwEgkbDNqFK5bU97xVqFzf9CZS2XaHVVipOw.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=c5c61a7894eb9d95f57b2b2a0237355b494744c1",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/ZbGKlH7bwEgkbDNqFK5bU97xVqFzf9CZS2XaHVVipOw.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=767429b6eb8cec5e52d6ffea41a4fc39462a65a8",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/ZbGKlH7bwEgkbDNqFK5bU97xVqFzf9CZS2XaHVVipOw.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=9cf62ed36f96a08742a80c38a3710dcf3e821c12",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "HS4U6iBqsXJSl61p4c_rB--dHOKs2ie7fifZ7745xG0"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gm2mmx",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "dvx24",
            "discussion_type": null,
            "num_comments": 6,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gm2mmx/weft_a_vimstyled_terminal_reader_that_lets_you/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gm2mmx/weft_a_vimstyled_terminal_reader_that_lets_you/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731017351.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "**Project**\n\n[https://github.com/martynas-subonis/model-serving](https://github.com/martynas-subonis/model-serving)\n\nExtensive write-up available [here](https://martynassubonis.substack.com/p/optimize-for-speed-and-savings-high).\n\n**What My Project Does**\n\nThis project uses ONNX-Runtime with various optimizations (implementations both in Python and Rust) to benchmark performance improvements compared to naive PyTorch implementations.\n\n**Target Audience**  \n  \nML engineers, serving models in production.\n\n**Comparison**\n\nThis project benchmarks basic PyTorch serving against ONNX Runtime in both Python and Rust, showcasing notable performance gains. Rust’s Actix-Web with ONNX Runtime handles 328.94 requests/sec, compared to Python ONNX at 255.53 and PyTorch at 35.62, with Rust's startup time of 0.348s being 4x faster than Python ONNX and 12x faster than PyTorch. Rust’s Docker image is also 48.3 MB—6x smaller than Python ONNX and 13x smaller than PyTorch. These numbers highlight the efficiency boost achievable by switching frameworks and languages in model-serving setups.",
            "author_fullname": "t2_17h8mq",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "9x model serving performance without changing hardware",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gm0flj",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.79,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 11,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 11,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731011798.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Project&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/martynas-subonis/model-serving\"&gt;https://github.com/martynas-subonis/model-serving&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Extensive write-up available &lt;a href=\"https://martynassubonis.substack.com/p/optimize-for-speed-and-savings-high\"&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This project uses ONNX-Runtime with various optimizations (implementations both in Python and Rust) to benchmark performance improvements compared to naive PyTorch implementations.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;  &lt;/p&gt;\n\n&lt;p&gt;ML engineers, serving models in production.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This project benchmarks basic PyTorch serving against ONNX Runtime in both Python and Rust, showcasing notable performance gains. Rust’s Actix-Web with ONNX Runtime handles 328.94 requests/sec, compared to Python ONNX at 255.53 and PyTorch at 35.62, with Rust&amp;#39;s startup time of 0.348s being 4x faster than Python ONNX and 12x faster than PyTorch. Rust’s Docker image is also 48.3 MB—6x smaller than Python ONNX and 13x smaller than PyTorch. These numbers highlight the efficiency boost achievable by switching frameworks and languages in model-serving setups.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/abFTVqx22Bqythf_1pm6MZYIM-_UHkbV9TTjOfiJccM.jpg?auto=webp&amp;s=66c884e0fd64d87787d0f68caaeb69592cb1595b",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/abFTVqx22Bqythf_1pm6MZYIM-_UHkbV9TTjOfiJccM.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=8e30a97807626c1b09962e2399978e4d73f337a3",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/abFTVqx22Bqythf_1pm6MZYIM-_UHkbV9TTjOfiJccM.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=13b73d7bccb7295106c7775c8535dc57ce0f6488",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/abFTVqx22Bqythf_1pm6MZYIM-_UHkbV9TTjOfiJccM.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=33ed5ebc27d7b34e0768dc72a004ff927aca5dd2",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/abFTVqx22Bqythf_1pm6MZYIM-_UHkbV9TTjOfiJccM.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=71a46dfc761da24a57409cf790ae96531efead59",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/abFTVqx22Bqythf_1pm6MZYIM-_UHkbV9TTjOfiJccM.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=ad839ff7a2513586dcd6d0804b1ea3bc94e6848e",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/abFTVqx22Bqythf_1pm6MZYIM-_UHkbV9TTjOfiJccM.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=655141836f65ecdea2fd8fe64ae0d330095ed81d",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "V9nYCzHVFrRXtFwQKh-eUhKbVGJ_7VSRP-5ZxJvGbtM"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gm0flj",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Martynoas",
            "discussion_type": null,
            "num_comments": 8,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gm0flj/9x_model_serving_performance_without_changing/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gm0flj/9x_model_serving_performance_without_changing/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731011798.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# What My Project Does\n\nTLDR: Affinity is a pythonic dialect of Data Definition Language (DDL). Affinity does not replace any dataframe library, but can be used with any one you like. [https://github.com/liquidcarbon/affinity](https://github.com/liquidcarbon/affinity)\n\nAffinity makes it easy to create well-annotated datasets from vector data. What your data means should always travel together with the data.\n\n```\nimport affinity as af\nclass SensorData(af.Dataset):\n    \"\"\"Experimental data from Top Secret Sensor Tech.\"\"\"\n    t = af.VectorF32(\"elapsed time (sec)\")\n    channel = af.VectorI8(\"channel number (left to right)\")\n    voltage = af.VectorF64(\"something we measured (mV)\")\n    is_laser_on = af.VectorBool(\"are the lights on?\")\n    exp_id = af.ScalarI32(\"FK to experiment\")\n    LOCATION = af.Location(folder=\"s3://mybucket/affinity\", file=\"raw.parquet\", partition_by=[\"channel\"])\n\ndata = SensorData()          # ✅ empty dataset\ndata = SensorData(**fields)  # ✅ build manually\ndata = SensorData.build(...) # ✅ build from another object (dataframes, DuckDB)\ndata.df # .pl / .arrow       # ✅ view as dataframe (Pandas/Polars/Arrow)\ndata.metadata                # ✅ annotations (data dict with column and dataset comments)\ndata.origin                  # ✅ creation metadata, some data provenance\ndata.sql(...)                # ✅ run DuckDB SQL query on the dataset\ndata.to_parquet(...)         # ✅ data.metadata -&gt; Parquet metadata\ndata.partition()             # ✅ get formatted paths and partitioned datasets\ndata.model_dump()            # ✅ dataset as dict, like in pydantic\ndata.flatten()               # ✅ flatten nested datasets\n```\n\n# Target Audience\n\nAnyone who builds datasets and databases.\n\nI build datasets (life sciences, healthcare) for a living, and for a few years I wished I could do two simple things when declaring dataclasses:  \n\\- data type for vectors  \n\\- what the data means, which should ideally travel together with the data\n\nMy use cases that affinity serves:  \n\\- raw experimental data (microscopy, omics) lands into storage as it becomes available  \n\\- each new chunk is processed into several datasets that land into OLAP warehouses like Athena or BigQuery  \n\\- documenting frequent schema changes as experimentation and data processing evolve  \n\\- very important to always know what the fields mean (units of measure, origin of calculated fields) - please share tales of this going terribly wrong\n\n# Comparison\n\nI haven't found any good existing packages that would do this.  Though pydantic is great for transactional data, where attributes are typically scalars, it doesn't translate well to vectors and OLAP use cases.\n\nInstead of verbose type hints with default values, affinity uses descriptor pattern to achieve something similar. The classes are declared with instantiated vectors, which are replaced upon instantiation by whatever array you want to use (defaults to pd.Series).\n\nMore in README. [https://github.com/liquidcarbon/affinity](https://github.com/liquidcarbon/affinity)\n\nCurious to get feedback and feature requests.",
            "author_fullname": "t2_1938hlheek",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Affinity - pythonic DDL for well-documented datasets\n",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1glxvkg",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.88,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 12,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 12,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1731035290.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731005369.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;TLDR: Affinity is a pythonic dialect of Data Definition Language (DDL). Affinity does not replace any dataframe library, but can be used with any one you like. &lt;a href=\"https://github.com/liquidcarbon/affinity\"&gt;https://github.com/liquidcarbon/affinity&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Affinity makes it easy to create well-annotated datasets from vector data. What your data means should always travel together with the data.&lt;/p&gt;\n\n&lt;p&gt;```\nimport affinity as af\nclass SensorData(af.Dataset):\n    &amp;quot;&amp;quot;&amp;quot;Experimental data from Top Secret Sensor Tech.&amp;quot;&amp;quot;&amp;quot;\n    t = af.VectorF32(&amp;quot;elapsed time (sec)&amp;quot;)\n    channel = af.VectorI8(&amp;quot;channel number (left to right)&amp;quot;)\n    voltage = af.VectorF64(&amp;quot;something we measured (mV)&amp;quot;)\n    is_laser_on = af.VectorBool(&amp;quot;are the lights on?&amp;quot;)\n    exp_id = af.ScalarI32(&amp;quot;FK to experiment&amp;quot;)\n    LOCATION = af.Location(folder=&amp;quot;s3://mybucket/affinity&amp;quot;, file=&amp;quot;raw.parquet&amp;quot;, partition_by=[&amp;quot;channel&amp;quot;])&lt;/p&gt;\n\n&lt;p&gt;data = SensorData()          # ✅ empty dataset\ndata = SensorData(**fields)  # ✅ build manually\ndata = SensorData.build(...) # ✅ build from another object (dataframes, DuckDB)\ndata.df # .pl / .arrow       # ✅ view as dataframe (Pandas/Polars/Arrow)\ndata.metadata                # ✅ annotations (data dict with column and dataset comments)\ndata.origin                  # ✅ creation metadata, some data provenance\ndata.sql(...)                # ✅ run DuckDB SQL query on the dataset\ndata.to_parquet(...)         # ✅ data.metadata -&amp;gt; Parquet metadata\ndata.partition()             # ✅ get formatted paths and partitioned datasets\ndata.model_dump()            # ✅ dataset as dict, like in pydantic\ndata.flatten()               # ✅ flatten nested datasets\n```&lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;Anyone who builds datasets and databases.&lt;/p&gt;\n\n&lt;p&gt;I build datasets (life sciences, healthcare) for a living, and for a few years I wished I could do two simple things when declaring dataclasses:&lt;br/&gt;\n- data type for vectors&lt;br/&gt;\n- what the data means, which should ideally travel together with the data&lt;/p&gt;\n\n&lt;p&gt;My use cases that affinity serves:&lt;br/&gt;\n- raw experimental data (microscopy, omics) lands into storage as it becomes available&lt;br/&gt;\n- each new chunk is processed into several datasets that land into OLAP warehouses like Athena or BigQuery&lt;br/&gt;\n- documenting frequent schema changes as experimentation and data processing evolve&lt;br/&gt;\n- very important to always know what the fields mean (units of measure, origin of calculated fields) - please share tales of this going terribly wrong&lt;/p&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;I haven&amp;#39;t found any good existing packages that would do this.  Though pydantic is great for transactional data, where attributes are typically scalars, it doesn&amp;#39;t translate well to vectors and OLAP use cases.&lt;/p&gt;\n\n&lt;p&gt;Instead of verbose type hints with default values, affinity uses descriptor pattern to achieve something similar. The classes are declared with instantiated vectors, which are replaced upon instantiation by whatever array you want to use (defaults to pd.Series).&lt;/p&gt;\n\n&lt;p&gt;More in README. &lt;a href=\"https://github.com/liquidcarbon/affinity\"&gt;https://github.com/liquidcarbon/affinity&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Curious to get feedback and feature requests.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/DvahG7azLxeWrNmoQhJoCpDnXOEtfYQyzOWk1TuDRYw.jpg?auto=webp&amp;s=8bb0d9f19f10c80d49f5881f58396d8f4128afe9",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/DvahG7azLxeWrNmoQhJoCpDnXOEtfYQyzOWk1TuDRYw.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=3b3796682a91d684b2e829edc3a907dc84394636",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/DvahG7azLxeWrNmoQhJoCpDnXOEtfYQyzOWk1TuDRYw.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=0c4790f125935b1fc21c63d4ba343462a89818cb",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/DvahG7azLxeWrNmoQhJoCpDnXOEtfYQyzOWk1TuDRYw.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=587cf489642cbf196242cea8ffc9ef0fd4d4e6e0",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/DvahG7azLxeWrNmoQhJoCpDnXOEtfYQyzOWk1TuDRYw.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=51b21b64d1c11ce49e72b6b1fe84b31dee0f17ad",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/DvahG7azLxeWrNmoQhJoCpDnXOEtfYQyzOWk1TuDRYw.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=6a4f2a5e21027e0ad66597a02f6c2d9dac5a4bb2",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/DvahG7azLxeWrNmoQhJoCpDnXOEtfYQyzOWk1TuDRYw.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=75ab81300791c16b5e3172d176e5594ee060f5a7",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "znxRiQ6WhYSoPgI6ZxFKkQsEVZDu30-UihoL4LPuzyc"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1glxvkg",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "LiqC",
            "discussion_type": null,
            "num_comments": 2,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1glxvkg/affinity_pythonic_ddl_for_welldocumented_datasets/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1glxvkg/affinity_pythonic_ddl_for_welldocumented_datasets/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731005369.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "A bit of background - loads of people joined my Python course for beta testing via this community, and shared lots of valuable feedback, which I’ve been able to incorporate.\n\nI’m thrilled to share that since then, the course has started bringing in a small but meaningful amount of income.\n\nThis is a big milestone for me, especially as it was my first course. I’m now moving forward with my next course, this time focused on simulation in Python.\n\nSo, as a thank you to this community, I have just generated 1000 free vouchers for the course: [https://www.udemy.com/course/python-for-engineers-scientists-and-analysts/?couponCode=5DAYFREEBIE](https://www.udemy.com/course/python-for-engineers-scientists-and-analysts/?couponCode=5DAYFREEBIE)\n\nThis is the most which I am allowed to generate, and Udemy rules mean they will expire in 5 days. Sharing with this community is a real win-win, since you guys get something that you hopefully find helpful, and I get more people enrolling in the course, which helps the algorithms in Udemy promote my course in the future (meaning I'm more likely to be able to actually make a living lol).\n\nSo please take a voucher if the course might be of value to you. You don't need to do the course right away as you will have lifetime access, so you could do it at a later date, or just dip in and out to different sections when you find it helpful.\n\nIt’s designed for those with an existing technical background, such as engineers and scientists, with a focus on data, statistics, and modelling. The primary libraries included are numpy, pandas, and seaborn.\n\n**Edit update: Wow what an uptake, great to see so many people keen to jump onboard. All the vouchers have been used up now. I hope this has proved helpful for those who have enrolled onto the course.**",
            "author_fullname": "t2_7alzrfpm",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Thank you again r/Python - I'm opening up my Python course for those who missed it before ",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Tutorial"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "tutorial",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1glxbrj",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.87,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 214,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Tutorial",
            "can_mod_post": false,
            "score": 214,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1731287612.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1731004003.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;A bit of background - loads of people joined my Python course for beta testing via this community, and shared lots of valuable feedback, which I’ve been able to incorporate.&lt;/p&gt;\n\n&lt;p&gt;I’m thrilled to share that since then, the course has started bringing in a small but meaningful amount of income.&lt;/p&gt;\n\n&lt;p&gt;This is a big milestone for me, especially as it was my first course. I’m now moving forward with my next course, this time focused on simulation in Python.&lt;/p&gt;\n\n&lt;p&gt;So, as a thank you to this community, I have just generated 1000 free vouchers for the course: &lt;a href=\"https://www.udemy.com/course/python-for-engineers-scientists-and-analysts/?couponCode=5DAYFREEBIE\"&gt;https://www.udemy.com/course/python-for-engineers-scientists-and-analysts/?couponCode=5DAYFREEBIE&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This is the most which I am allowed to generate, and Udemy rules mean they will expire in 5 days. Sharing with this community is a real win-win, since you guys get something that you hopefully find helpful, and I get more people enrolling in the course, which helps the algorithms in Udemy promote my course in the future (meaning I&amp;#39;m more likely to be able to actually make a living lol).&lt;/p&gt;\n\n&lt;p&gt;So please take a voucher if the course might be of value to you. You don&amp;#39;t need to do the course right away as you will have lifetime access, so you could do it at a later date, or just dip in and out to different sections when you find it helpful.&lt;/p&gt;\n\n&lt;p&gt;It’s designed for those with an existing technical background, such as engineers and scientists, with a focus on data, statistics, and modelling. The primary libraries included are numpy, pandas, and seaborn.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit update: Wow what an uptake, great to see so many people keen to jump onboard. All the vouchers have been used up now. I hope this has proved helpful for those who have enrolled onto the course.&lt;/strong&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#dadada",
            "id": "1glxbrj",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "bobo-the-merciful",
            "discussion_type": null,
            "num_comments": 105,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1glxbrj/thank_you_again_rpython_im_opening_up_my_python/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1glxbrj/thank_you_again_rpython_im_opening_up_my_python/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1731004003.0,
            "num_crossposts": 1,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "In this article, we’ll cover how to deploy a Django project on a Linux server using **uWSGI** and **Nginx**, ensuring your application runs efficiently in a production environment.\n\n[https://www.thedevspace.io/community/django-deploy](https://www.thedevspace.io/community/django-deploy)\n\n1. **Set Up the Server**: Ensure your Linux server has Python, Django, and necessary tools installed.\n2. **Configure uWSGI**: Install and configure uWSGI to act as the application server.\n3. **Set Up Nginx**: Configure Nginx as a reverse proxy to forward requests to uWSGI.\n4. **Link uWSGI and Django**: Create uWSGI configuration files to connect with your Django app.\n\nFollowing these steps will help you achieve a secure and smooth deployment for your Django application.",
            "author_fullname": "t2_nmscq636",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "🚀 Deploying a Django Project Manually on a Linux Server with uWSGI and Nginx",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Tutorial"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "tutorial",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gluq8u",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.7,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 5,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Tutorial",
            "can_mod_post": false,
            "score": 5,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730997536.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;In this article, we’ll cover how to deploy a Django project on a Linux server using &lt;strong&gt;uWSGI&lt;/strong&gt; and &lt;strong&gt;Nginx&lt;/strong&gt;, ensuring your application runs efficiently in a production environment.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.thedevspace.io/community/django-deploy\"&gt;https://www.thedevspace.io/community/django-deploy&lt;/a&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Set Up the Server&lt;/strong&gt;: Ensure your Linux server has Python, Django, and necessary tools installed.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Configure uWSGI&lt;/strong&gt;: Install and configure uWSGI to act as the application server.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Set Up Nginx&lt;/strong&gt;: Configure Nginx as a reverse proxy to forward requests to uWSGI.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Link uWSGI and Django&lt;/strong&gt;: Create uWSGI configuration files to connect with your Django app.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Following these steps will help you achieve a secure and smooth deployment for your Django application.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/ZnPQ3YFKgraGQj9xMHvX4fHScH1TqfuO5QZrDTXyJDc.jpg?auto=webp&amp;s=215385177cd0584a97edc61d68fde7f14c0e57bb",
                            "width": 1200,
                            "height": 630
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/ZnPQ3YFKgraGQj9xMHvX4fHScH1TqfuO5QZrDTXyJDc.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=5e50eafcb50e86f78b0ea6e2820b41e7ac920aeb",
                                "width": 108,
                                "height": 56
                            },
                            {
                                "url": "https://external-preview.redd.it/ZnPQ3YFKgraGQj9xMHvX4fHScH1TqfuO5QZrDTXyJDc.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=e8458f43794368cbe0cba32e282f4d2d59b51c21",
                                "width": 216,
                                "height": 113
                            },
                            {
                                "url": "https://external-preview.redd.it/ZnPQ3YFKgraGQj9xMHvX4fHScH1TqfuO5QZrDTXyJDc.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=4d7c7bc66c2547ade36b16a90497a38d69fa780f",
                                "width": 320,
                                "height": 168
                            },
                            {
                                "url": "https://external-preview.redd.it/ZnPQ3YFKgraGQj9xMHvX4fHScH1TqfuO5QZrDTXyJDc.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=b0516c6980f33156d48366d2b8b9277da4531a63",
                                "width": 640,
                                "height": 336
                            },
                            {
                                "url": "https://external-preview.redd.it/ZnPQ3YFKgraGQj9xMHvX4fHScH1TqfuO5QZrDTXyJDc.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=4b77c61f622017d65c665600845ff109b58a3ea7",
                                "width": 960,
                                "height": 504
                            },
                            {
                                "url": "https://external-preview.redd.it/ZnPQ3YFKgraGQj9xMHvX4fHScH1TqfuO5QZrDTXyJDc.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=52b8fcdc4982ed7ef29ebaa27f8c2d4c125e9598",
                                "width": 1080,
                                "height": 567
                            }
                        ],
                        "variants": {},
                        "id": "lr8LHov_Vs-tqYCQIv56h3kXrFGPnJNgAROn_XQuohc"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#dadada",
            "id": "1gluq8u",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Pleasant_Effort_6829",
            "discussion_type": null,
            "num_comments": 4,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gluq8u/deploying_a_django_project_manually_on_a_linux/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gluq8u/deploying_a_django_project_manually_on_a_linux/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730997536.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hi!\n\nFirst time I used sphinx I thought it dark magic, because it took all my mess of folders and modules and created a readable documentation about it (provided I wrote my own docstrings).\n\nSo I wrote  a script for me to run Sphinx anywhere and document any project asap. I've reached a wall, though.\n\nMy Sphinx config looks like this:\n\n    import os\n    import sys\n    from pathlib import Path\n    \n    sys.path.insert(0, os.path.abspath('path-from-script-imput'))\n    sys.path.insert(0, os.path.abspath('path-from-script-imput-2'))  # User's provided path goes here\n    sys.path.insert(0, os.path.abspath('../'))\n    sys.path.insert(0, str(Path('..', 'src').resolve()))\n    \n    autodoc_mock_imports = ['odoo', 'odoo.addons']\n    \n    project = 'Teste'\n    copyright = '2024, Test'\n    author = 'Test'\n    extensions = [\n        'sphinx.ext.autodoc',\n        'sphinx.ext.napoleon',\n        'sphinx.ext.viewcode',\n        'sphinx.ext.intersphinx',\n        'sphinx.ext.autosummary',\n    ]\n    \n    viewcode_line_numbers = True\n    templates_path = ['_templates']\n    exclude_patterns = ['**/__init__.py', '**/__manifest__.py']\n    \n    autodoc_default_options = {\n        'members': True,\n        'undoc-members': True,\n        'private-members': True,\n        'special-members': '__init__',\n        'inherited-members': True,\n        'show-inheritance': True\n    }\n    \n    language = 'pt'\n    html_theme = 'sphinx_rtd_theme'\n    html_static_path = ['_static']\n\nand my index.rst looks like this\n\n    .. Teste documentation master file\n    Welcome to the Teste documentation!\n    ===================================\n    .. toctree::\n       :maxdepth: 2\n       :caption: Contents:\n    \n       modules\n\nAnd my problem is: I can only document folders considered modules (\\_\\_init\\_\\_.py inside of them) But I wanted Sphinx to be able to access subfolders, since there are models inside of it too that I cannot access through my script. Is htere anything I can do that is not copy and paste an init file to every subfolder that nests other modules?\n\n  \n",
            "author_fullname": "t2_w9jsu1z0",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Question about using Sphinx to document python modules (Odoo)",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Help"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "help",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gltw17",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.67,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 1,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Help",
            "can_mod_post": false,
            "score": 1,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730995418.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi!&lt;/p&gt;\n\n&lt;p&gt;First time I used sphinx I thought it dark magic, because it took all my mess of folders and modules and created a readable documentation about it (provided I wrote my own docstrings).&lt;/p&gt;\n\n&lt;p&gt;So I wrote  a script for me to run Sphinx anywhere and document any project asap. I&amp;#39;ve reached a wall, though.&lt;/p&gt;\n\n&lt;p&gt;My Sphinx config looks like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import os\nimport sys\nfrom pathlib import Path\n\nsys.path.insert(0, os.path.abspath(&amp;#39;path-from-script-imput&amp;#39;))\nsys.path.insert(0, os.path.abspath(&amp;#39;path-from-script-imput-2&amp;#39;))  # User&amp;#39;s provided path goes here\nsys.path.insert(0, os.path.abspath(&amp;#39;../&amp;#39;))\nsys.path.insert(0, str(Path(&amp;#39;..&amp;#39;, &amp;#39;src&amp;#39;).resolve()))\n\nautodoc_mock_imports = [&amp;#39;odoo&amp;#39;, &amp;#39;odoo.addons&amp;#39;]\n\nproject = &amp;#39;Teste&amp;#39;\ncopyright = &amp;#39;2024, Test&amp;#39;\nauthor = &amp;#39;Test&amp;#39;\nextensions = [\n    &amp;#39;sphinx.ext.autodoc&amp;#39;,\n    &amp;#39;sphinx.ext.napoleon&amp;#39;,\n    &amp;#39;sphinx.ext.viewcode&amp;#39;,\n    &amp;#39;sphinx.ext.intersphinx&amp;#39;,\n    &amp;#39;sphinx.ext.autosummary&amp;#39;,\n]\n\nviewcode_line_numbers = True\ntemplates_path = [&amp;#39;_templates&amp;#39;]\nexclude_patterns = [&amp;#39;**/__init__.py&amp;#39;, &amp;#39;**/__manifest__.py&amp;#39;]\n\nautodoc_default_options = {\n    &amp;#39;members&amp;#39;: True,\n    &amp;#39;undoc-members&amp;#39;: True,\n    &amp;#39;private-members&amp;#39;: True,\n    &amp;#39;special-members&amp;#39;: &amp;#39;__init__&amp;#39;,\n    &amp;#39;inherited-members&amp;#39;: True,\n    &amp;#39;show-inheritance&amp;#39;: True\n}\n\nlanguage = &amp;#39;pt&amp;#39;\nhtml_theme = &amp;#39;sphinx_rtd_theme&amp;#39;\nhtml_static_path = [&amp;#39;_static&amp;#39;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and my index.rst looks like this&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;.. Teste documentation master file\nWelcome to the Teste documentation!\n===================================\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   modules\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And my problem is: I can only document folders considered modules (__init__.py inside of them) But I wanted Sphinx to be able to access subfolders, since there are models inside of it too that I cannot access through my script. Is htere anything I can do that is not copy and paste an init file to every subfolder that nests other modules?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "c685ca8a-4113-11ea-a273-0e02380d75d9",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "",
            "id": "1gltw17",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "ivory_dev",
            "discussion_type": null,
            "num_comments": 1,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gltw17/question_about_using_sphinx_to_document_python/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gltw17/question_about_using_sphinx_to_document_python/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730995418.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "In the given code, why if statement is added two time?\n\nWhy removing the 2nd if doesn't give the required output?\n\nwhy print(sum) at last, is indented?\n\n  \nx=list(map(int,input(\"Enter a number: \")))\n\ny=list(map(int,input(\"Enter a number: \")))\n\nflag = 0\n\nsum = 0\n\nif len(x)==len(y):\n\n   for i in range(len(x)):\n\nsum = sum+x\\[i\\]\\*y\\[i\\]\n\nflag=1\n\nelse:\n\nprint(\"not valid operation\")\n\nif flag!=0:\n\n   print(sum)",
            "author_fullname": "t2_1chbeghzy8",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Doubt about indentation.",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gltqnj",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.33,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730995056.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;In the given code, why if statement is added two time?&lt;/p&gt;\n\n&lt;p&gt;Why removing the 2nd if doesn&amp;#39;t give the required output?&lt;/p&gt;\n\n&lt;p&gt;why print(sum) at last, is indented?&lt;/p&gt;\n\n&lt;p&gt;x=list(map(int,input(&amp;quot;Enter a number: &amp;quot;)))&lt;/p&gt;\n\n&lt;p&gt;y=list(map(int,input(&amp;quot;Enter a number: &amp;quot;)))&lt;/p&gt;\n\n&lt;p&gt;flag = 0&lt;/p&gt;\n\n&lt;p&gt;sum = 0&lt;/p&gt;\n\n&lt;p&gt;if len(x)==len(y):&lt;/p&gt;\n\n&lt;p&gt;for i in range(len(x)):&lt;/p&gt;\n\n&lt;p&gt;sum = sum+x[i]*y[i]&lt;/p&gt;\n\n&lt;p&gt;flag=1&lt;/p&gt;\n\n&lt;p&gt;else:&lt;/p&gt;\n\n&lt;p&gt;print(&amp;quot;not valid operation&amp;quot;)&lt;/p&gt;\n\n&lt;p&gt;if flag!=0:&lt;/p&gt;\n\n&lt;p&gt;print(sum)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gltqnj",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Alarmed_Option6096",
            "discussion_type": null,
            "num_comments": 4,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gltqnj/doubt_about_indentation/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gltqnj/doubt_about_indentation/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730995056.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "One of the challenges with AI readiness for enterprise and private data is controlling permissions. The following article and repository show how to implement fine-grained authorization filtering as a Langflow component.\n\nThe project uses AstraDB as the vector DB and [Permit.io](http://Permit.io) (a Python-based product and OSS for fine-grained authorization) to utilize ingestion and filtering.\n\nArticle: [https://www.permit.io/blog/building-ai-applications-with-enterprise-grade-security-using-fga-and-rag](https://www.permit.io/blog/building-ai-applications-with-enterprise-grade-security-using-fga-and-rag)\n\nProject: [https://github.com/permitio/permit-langflow](https://github.com/permitio/permit-langflow)",
            "author_fullname": "t2_ij9mevpn",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Enterprise-Grade Security for LLM with Langflow and Fine-Grained Authorization",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Tutorial"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "tutorial",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1glsz3s",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.8,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 12,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Tutorial",
            "can_mod_post": false,
            "score": 12,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730993113.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;One of the challenges with AI readiness for enterprise and private data is controlling permissions. The following article and repository show how to implement fine-grained authorization filtering as a Langflow component.&lt;/p&gt;\n\n&lt;p&gt;The project uses AstraDB as the vector DB and &lt;a href=\"http://Permit.io\"&gt;Permit.io&lt;/a&gt; (a Python-based product and OSS for fine-grained authorization) to utilize ingestion and filtering.&lt;/p&gt;\n\n&lt;p&gt;Article: &lt;a href=\"https://www.permit.io/blog/building-ai-applications-with-enterprise-grade-security-using-fga-and-rag\"&gt;https://www.permit.io/blog/building-ai-applications-with-enterprise-grade-security-using-fga-and-rag&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Project: &lt;a href=\"https://github.com/permitio/permit-langflow\"&gt;https://github.com/permitio/permit-langflow&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/81RVKn3pn9-nQPcjvY22_Cj7Efk3zy3p7SfeZF39_KQ.jpg?auto=webp&amp;s=a0e5118254d183f4e3f09614360ab8237c51ab8e",
                            "width": 1200,
                            "height": 630
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/81RVKn3pn9-nQPcjvY22_Cj7Efk3zy3p7SfeZF39_KQ.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=e0be765c715e77f1cb0b65932666adc133875b6a",
                                "width": 108,
                                "height": 56
                            },
                            {
                                "url": "https://external-preview.redd.it/81RVKn3pn9-nQPcjvY22_Cj7Efk3zy3p7SfeZF39_KQ.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=66f310f6c3213f251c5999cb0ba76528c7e3a772",
                                "width": 216,
                                "height": 113
                            },
                            {
                                "url": "https://external-preview.redd.it/81RVKn3pn9-nQPcjvY22_Cj7Efk3zy3p7SfeZF39_KQ.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=79fc75d88f6fad3314aaeb5b532f75d1691cd2d2",
                                "width": 320,
                                "height": 168
                            },
                            {
                                "url": "https://external-preview.redd.it/81RVKn3pn9-nQPcjvY22_Cj7Efk3zy3p7SfeZF39_KQ.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=a08b156eff71cd40af6feb19809d2ffc23f45e67",
                                "width": 640,
                                "height": 336
                            },
                            {
                                "url": "https://external-preview.redd.it/81RVKn3pn9-nQPcjvY22_Cj7Efk3zy3p7SfeZF39_KQ.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=6c2c9f885f2c173abd79cf699e82e61016a4581e",
                                "width": 960,
                                "height": 504
                            },
                            {
                                "url": "https://external-preview.redd.it/81RVKn3pn9-nQPcjvY22_Cj7Efk3zy3p7SfeZF39_KQ.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=dd4857d043d701dafd387b221246826cdfc7d673",
                                "width": 1080,
                                "height": 567
                            }
                        ],
                        "variants": {},
                        "id": "fuoxFltu1LbRap4GNUMIdQw9J5kNG__yrkwqqOv-y9E"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#dadada",
            "id": "1glsz3s",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Permit_io",
            "discussion_type": null,
            "num_comments": 2,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1glsz3s/enterprisegrade_security_for_llm_with_langflow/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1glsz3s/enterprisegrade_security_for_llm_with_langflow/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730993113.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hey everyone,\n\nI’ve been working on productionizing Retrieval-Augmented Generation (RAG) applications, especially when dealing with data sources that frequently change (like files being added, updated, or deleted by multiple team members).  \n  \nFor Python devs who aren’t deep into Gen AI, RAG is a common way to extend Gen AI models by connecting them to external data sources for info beyond their training data. Building a quick pilot is often straightforward, but the real challenge comes in making it production-ready.\n\nHowever, spending time tweaking application scripts is a hassle. For example, if you have swap a model or change the type of index.\n\nTo tackle this, we’ve created an open-source repository that provides YAML templates to simplify RAG deployment without the need to modify code each time. You can check it out here: [llm-app GitHub Repo](https://github.com/pathwaycom/llm-app).\n\nHere’s how it helps:\n\n* **Swap components easily**, like switching data sources from local files to SharePoint or Google Drive, changing models, or swapping indexes from a vector index to a hybrid index.\n* **Change parameters in RAG pipelines via readable YAML files.**\n* **Keep configurations clean and organized**, making it easier to manage and update.\n\nFor more details, there’s also a [blog post](https://pathway.com/blog/llm-yaml-templates) and a [detailed guide](https://pathway.com/developers/user-guide/llm-xpack/yaml-templates) that explain how to customize the templates.\n\nThis approach has significantly streamlined my workflow. As a developer, do you find this useful?  \nWould love to hear your feedback, experiences or any tips you might have!",
            "author_fullname": "t2_11kkqkf962",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Easily Customize LLM Pipelines with YAML templates.",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Resource"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "resource",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1glq4jd",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.81,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 20,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Resource",
            "can_mod_post": false,
            "score": 20,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730985207.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey everyone,&lt;/p&gt;\n\n&lt;p&gt;I’ve been working on productionizing Retrieval-Augmented Generation (RAG) applications, especially when dealing with data sources that frequently change (like files being added, updated, or deleted by multiple team members).  &lt;/p&gt;\n\n&lt;p&gt;For Python devs who aren’t deep into Gen AI, RAG is a common way to extend Gen AI models by connecting them to external data sources for info beyond their training data. Building a quick pilot is often straightforward, but the real challenge comes in making it production-ready.&lt;/p&gt;\n\n&lt;p&gt;However, spending time tweaking application scripts is a hassle. For example, if you have swap a model or change the type of index.&lt;/p&gt;\n\n&lt;p&gt;To tackle this, we’ve created an open-source repository that provides YAML templates to simplify RAG deployment without the need to modify code each time. You can check it out here: &lt;a href=\"https://github.com/pathwaycom/llm-app\"&gt;llm-app GitHub Repo&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Here’s how it helps:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Swap components easily&lt;/strong&gt;, like switching data sources from local files to SharePoint or Google Drive, changing models, or swapping indexes from a vector index to a hybrid index.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Change parameters in RAG pipelines via readable YAML files.&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Keep configurations clean and organized&lt;/strong&gt;, making it easier to manage and update.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;For more details, there’s also a &lt;a href=\"https://pathway.com/blog/llm-yaml-templates\"&gt;blog post&lt;/a&gt; and a &lt;a href=\"https://pathway.com/developers/user-guide/llm-xpack/yaml-templates\"&gt;detailed guide&lt;/a&gt; that explain how to customize the templates.&lt;/p&gt;\n\n&lt;p&gt;This approach has significantly streamlined my workflow. As a developer, do you find this useful?&lt;br/&gt;\nWould love to hear your feedback, experiences or any tips you might have!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/U1U2aB3ODzus9yAlfJRrSiM-9gSm7OEa3aDsvG_Vdr0.jpg?auto=webp&amp;s=d4de95c37cac9c864c9f3645e3fe3802d038009d",
                            "width": 1280,
                            "height": 640
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/U1U2aB3ODzus9yAlfJRrSiM-9gSm7OEa3aDsvG_Vdr0.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=fc02cc78af7bcfdac36b368d416c34b5a4d46ec8",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/U1U2aB3ODzus9yAlfJRrSiM-9gSm7OEa3aDsvG_Vdr0.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=0919222e42422bd2c1cf7ca99c98b0be7e57b814",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/U1U2aB3ODzus9yAlfJRrSiM-9gSm7OEa3aDsvG_Vdr0.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=8f7b14f035c774a91d83bedd305c1e2c9ff1e418",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/U1U2aB3ODzus9yAlfJRrSiM-9gSm7OEa3aDsvG_Vdr0.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=6944bae85b11278d42131d102fee5c0a17815711",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/U1U2aB3ODzus9yAlfJRrSiM-9gSm7OEa3aDsvG_Vdr0.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=b89c97d837bfe1467ffb0dd2e6c7da389beefe06",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/U1U2aB3ODzus9yAlfJRrSiM-9gSm7OEa3aDsvG_Vdr0.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=866717cd83b8f2f9c8e12a25ff1c1967d524fe58",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "N8WN-ExsSUTzyiWIGTnSs7CNP288ljkqb4vDsXgv5cE"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ddbd37",
            "id": "1glq4jd",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Typical-Scene-5794",
            "discussion_type": null,
            "num_comments": 4,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1glq4jd/easily_customize_llm_pipelines_with_yaml_templates/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1glq4jd/easily_customize_llm_pipelines_with_yaml_templates/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730985207.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I never thought simply running a task every hour would turn out to be an issue.\n\nContext: I have a Flask API deployed to a Windows machine using IIS w/ wfastcgi and I want the program to also run a process every hour.\n\nI know I can just use Task scheduler through windows to run my Python program every hour, but I spent all this time merging my coworker’s project into my Flask api project and really wanted only a single app to manage.\n\nI thought at the start of the program it could be executed, but I realized I had multiple workers and so multiple instances would start, which is not okay for the task.\n\nSo I created an api endpoint to initiate the job, and figured it could run a thread asynchronously where this asynchronous thread would run a “while True:” loop where the thread would sleep for an hour in between executions… but when I ran the program it would never restart after an hour, and from the logs it is clear the thread is just stopping - poof! \n\nSo I figure what about 15 minutes?? Still stops.\n\nWhat about 1 minute? Success! \n\nSo I get the clever idea to make the program wait only for a minute, but 60 times so it would wake itself up in between going to sleep, as I figured some OS process was identifying an idle thread and terminating it. So I try it, but still no luck. So I did the same thing but logged something to REALLY make sure the thread was never flagged as idle. No dice. So I tried getting it to sleep for a single second, but 3600 times, to no avail.\n\nSo I had only been using ChatGPT and remembered Stack Overflow exists so saw a port stating to use apscheduler. I did a test to have it execute every minute and it worked! So I set it up to run every hour - and it did NOT work! \n\nI was creating and starting the scheduler outside the scope of the Flask route, and I had a logger saying “starting scheduler” and during the hour I noticed it was running this logger multiple times, which means that basically that variable was being recreated and so that’s why the hour-long job was destroyed, because evidently when running the app in IIS and not in my IDE it appears to be recycling the processes, reinstantiating my global variables.\n\nSo now I still am stubborn and don’t want to separate out this project, so think I’m gonna set up Task Scheduler to execute a bash script that will call the api endpoint each hour. This sucks because my program relied on a global variable to know if it was the first, second, third, etc time running the job in a day, with different behavior each time, and so now I’m gonna have to manage that state using something else… I think I’m gonna write to an internal file to manage state… but I am lazy I guess and didn’t want to have to refactor the project - I just wanted to run a job every hour!!\n\nAm I an idiot?? I was able to run on an interval when running through the ide locally, so the silver lining is I learned a lot about how Python programs are ran when deployed in this way. Maybe I should deploy this through something else? We wanted to use IIS since all our .NET programs are routed through there, so wfastcgi seemed like a good option.\n\nI never thought running a process every hour or keeping a thread alive would be a challenge like this. I use async/parallel processes all the time but never needed one to wait for an hour before…",
            "author_fullname": "t2_hgmoknadd",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Keeping a thread alive",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1glpfj5",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.76,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 11,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 11,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730983032.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I never thought simply running a task every hour would turn out to be an issue.&lt;/p&gt;\n\n&lt;p&gt;Context: I have a Flask API deployed to a Windows machine using IIS w/ wfastcgi and I want the program to also run a process every hour.&lt;/p&gt;\n\n&lt;p&gt;I know I can just use Task scheduler through windows to run my Python program every hour, but I spent all this time merging my coworker’s project into my Flask api project and really wanted only a single app to manage.&lt;/p&gt;\n\n&lt;p&gt;I thought at the start of the program it could be executed, but I realized I had multiple workers and so multiple instances would start, which is not okay for the task.&lt;/p&gt;\n\n&lt;p&gt;So I created an api endpoint to initiate the job, and figured it could run a thread asynchronously where this asynchronous thread would run a “while True:” loop where the thread would sleep for an hour in between executions… but when I ran the program it would never restart after an hour, and from the logs it is clear the thread is just stopping - poof! &lt;/p&gt;\n\n&lt;p&gt;So I figure what about 15 minutes?? Still stops.&lt;/p&gt;\n\n&lt;p&gt;What about 1 minute? Success! &lt;/p&gt;\n\n&lt;p&gt;So I get the clever idea to make the program wait only for a minute, but 60 times so it would wake itself up in between going to sleep, as I figured some OS process was identifying an idle thread and terminating it. So I try it, but still no luck. So I did the same thing but logged something to REALLY make sure the thread was never flagged as idle. No dice. So I tried getting it to sleep for a single second, but 3600 times, to no avail.&lt;/p&gt;\n\n&lt;p&gt;So I had only been using ChatGPT and remembered Stack Overflow exists so saw a port stating to use apscheduler. I did a test to have it execute every minute and it worked! So I set it up to run every hour - and it did NOT work! &lt;/p&gt;\n\n&lt;p&gt;I was creating and starting the scheduler outside the scope of the Flask route, and I had a logger saying “starting scheduler” and during the hour I noticed it was running this logger multiple times, which means that basically that variable was being recreated and so that’s why the hour-long job was destroyed, because evidently when running the app in IIS and not in my IDE it appears to be recycling the processes, reinstantiating my global variables.&lt;/p&gt;\n\n&lt;p&gt;So now I still am stubborn and don’t want to separate out this project, so think I’m gonna set up Task Scheduler to execute a bash script that will call the api endpoint each hour. This sucks because my program relied on a global variable to know if it was the first, second, third, etc time running the job in a day, with different behavior each time, and so now I’m gonna have to manage that state using something else… I think I’m gonna write to an internal file to manage state… but I am lazy I guess and didn’t want to have to refactor the project - I just wanted to run a job every hour!!&lt;/p&gt;\n\n&lt;p&gt;Am I an idiot?? I was able to run on an interval when running through the ide locally, so the silver lining is I learned a lot about how Python programs are ran when deployed in this way. Maybe I should deploy this through something else? We wanted to use IIS since all our .NET programs are routed through there, so wfastcgi seemed like a good option.&lt;/p&gt;\n\n&lt;p&gt;I never thought running a process every hour or keeping a thread alive would be a challenge like this. I use async/parallel processes all the time but never needed one to wait for an hour before…&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1glpfj5",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Dangerous-Throat-316",
            "discussion_type": null,
            "num_comments": 19,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1glpfj5/keeping_a_thread_alive/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1glpfj5/keeping_a_thread_alive/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730983032.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I am writting q code to add data validation on certain coloumns of a sheet in a workbook. The data validation is successfully applied using formula1 but the issue am having is that it doesnt show the dropdown when i open the excel file. The reason is that in cell drop down is not checked in the datavalidation popup window. \n\nIn python code i have set showDropdown=True",
            "author_fullname": "t2_19dgcgzz2k",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "openpyxl data validation not applying in cell dropdown even when showdropdown is set true.",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1glnyjc",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.5,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730977561.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am writting q code to add data validation on certain coloumns of a sheet in a workbook. The data validation is successfully applied using formula1 but the issue am having is that it doesnt show the dropdown when i open the excel file. The reason is that in cell drop down is not checked in the datavalidation popup window. &lt;/p&gt;\n\n&lt;p&gt;In python code i have set showDropdown=True&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1glnyjc",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "hunkmonster",
            "discussion_type": null,
            "num_comments": 3,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1glnyjc/openpyxl_data_validation_not_applying_in_cell/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1glnyjc/openpyxl_data_validation_not_applying_in_cell/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730977561.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "[https://www.codemancers.com/blog/2024-09-17-rag/?utm\\_source=social+media&amp;utm\\_medium=reddit](https://www.codemancers.com/blog/2024-09-17-rag/?utm_source=social+media&amp;utm_medium=reddit)",
            "author_fullname": "t2_unofo9zj4",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Understanding Retrieval-Augmented Generation (RAG) with OpenAI",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gljss4",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.4,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730959138.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://www.codemancers.com/blog/2024-09-17-rag/?utm_source=social+media&amp;amp;utm_medium=reddit\"&gt;https://www.codemancers.com/blog/2024-09-17-rag/?utm_source=social+media&amp;amp;utm_medium=reddit&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gljss4",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "codemancers",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gljss4/understanding_retrievalaugmented_generation_rag/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gljss4/understanding_retrievalaugmented_generation_rag/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730959138.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "**What My Project Does ?**\n\nWhispr is a CLI tool to safely inject secrets from your favorite secret vault (Ex: AWS Secrets Manager, Azure Key Vault etc.) into your app's environment. You can run a local web server or application with secrets (DB credentials etc.) pulled from a secure vault only when needed. It avoids storing secrets in \\`.env\\` files for local software development.\n\n**Project link**: [https://github.com/narenaryan/whispr](https://github.com/narenaryan/whispr)\n\nWhispr is written completely in Python (100%)\n\n**Target Audience:** Developers &amp; Engineers\n\n**Comparison**: Whispr can be compared to client SDKs of various cloud providers, but with extra powers of injection into app environment or standard input.",
            "author_fullname": "t2_fe2is",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Whispr: A multi-vault secret injection tool completely written in Python",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gljize",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.89,
            "author_flair_background_color": "",
            "subreddit_type": "public",
            "ups": 19,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 19,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": "",
            "author_flair_richtext": [
                {
                    "e": "text",
                    "t": "neo"
                }
            ],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730958080.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "richtext",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;What My Project Does ?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Whispr is a CLI tool to safely inject secrets from your favorite secret vault (Ex: AWS Secrets Manager, Azure Key Vault etc.) into your app&amp;#39;s environment. You can run a local web server or application with secrets (DB credentials etc.) pulled from a secure vault only when needed. It avoids storing secrets in `.env` files for local software development.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Project link&lt;/strong&gt;: &lt;a href=\"https://github.com/narenaryan/whispr\"&gt;https://github.com/narenaryan/whispr&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Whispr is written completely in Python (100%)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience:&lt;/strong&gt; Developers &amp;amp; Engineers&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;: Whispr can be compared to client SDKs of various cloud providers, but with extra powers of injection into app environment or standard input.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/3-QktDNxcnCOvmGocdOZaxbO8o8yydKMHuloQ45-t8g.jpg?auto=webp&amp;s=8ac66c39153e35e87d007214b1796be50482c16d",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/3-QktDNxcnCOvmGocdOZaxbO8o8yydKMHuloQ45-t8g.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=511d03be148e7ec3cae64b4bce81f681275d2e31",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/3-QktDNxcnCOvmGocdOZaxbO8o8yydKMHuloQ45-t8g.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=eef0f8e6af108d9120252db92dfd090d45d5ded0",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/3-QktDNxcnCOvmGocdOZaxbO8o8yydKMHuloQ45-t8g.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=72625b6c87d74eaf143dde4ac5944eaf32fa0048",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/3-QktDNxcnCOvmGocdOZaxbO8o8yydKMHuloQ45-t8g.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=4dd16e9a544aa71047116f87cd72dacb0f79df4d",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/3-QktDNxcnCOvmGocdOZaxbO8o8yydKMHuloQ45-t8g.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=7ede733accff14d263175f1e6f3b0726e5ec5212",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/3-QktDNxcnCOvmGocdOZaxbO8o8yydKMHuloQ45-t8g.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=077f16372061cb3df760538e6736ffe12f811cba",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "GwDQauByHyU-ZkMgwTlmWXhFf7PEsPeN29Vw0qa0W4s"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": "neo",
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gljize",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "narenarya",
            "discussion_type": null,
            "num_comments": 3,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": "dark",
            "permalink": "/r/Python/comments/1gljize/whispr_a_multivault_secret_injection_tool/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gljize/whispr_a_multivault_secret_injection_tool/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730958080.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "**What My Project Does**\n\nI've been working on a new Python library that does peer-to-peer connections. A good description of the library is that it makes it easier for two computers to establish a direct TCP connection without the need for proxies. The software can establish connections over the Internet, within your LAN, or even on the same machine. The software includes a number of techniques to make this possible such as:\n\n* TCP Direct connect\n* TCP Reverse connect\n* TCP hole punching\n* UPnP port forwarding (IPv4)\n* UPnP pin holes (IPv6)\n\n**Target Audience**\n\nThe intended audience for this is developers interested in building peer-to-peer software. But in fact, there's many common scenarios that you might not associate with a traditional 'p2p' setup. For example -- the software can improve connectivity to game servers -- alleviating some of the headaches of trying to reach self-hosted servers. Currently, the software is in beta and may have some bugs. But I've found it fairly stable in practice.\n\n**Comparison**\n\nYou may have heard of similar libraries for P2P projects like Libp2p. These rely heavily on relays and aren't optimized for direct connections. Even solutions by major companies like Valve tend to fallback unnecessarily to using relay servers. So this is my solution. Open source and free.\n\n[https://github.com/robertsdotpm/p2pd](https://github.com/robertsdotpm/p2pd)",
            "author_fullname": "t2_om3cn",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "New release of P2PD: peer-to-peer direct connection library",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gktc0y",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.81,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 3,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 3,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730879564.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve been working on a new Python library that does peer-to-peer connections. A good description of the library is that it makes it easier for two computers to establish a direct TCP connection without the need for proxies. The software can establish connections over the Internet, within your LAN, or even on the same machine. The software includes a number of techniques to make this possible such as:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;TCP Direct connect&lt;/li&gt;\n&lt;li&gt;TCP Reverse connect&lt;/li&gt;\n&lt;li&gt;TCP hole punching&lt;/li&gt;\n&lt;li&gt;UPnP port forwarding (IPv4)&lt;/li&gt;\n&lt;li&gt;UPnP pin holes (IPv6)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The intended audience for this is developers interested in building peer-to-peer software. But in fact, there&amp;#39;s many common scenarios that you might not associate with a traditional &amp;#39;p2p&amp;#39; setup. For example -- the software can improve connectivity to game servers -- alleviating some of the headaches of trying to reach self-hosted servers. Currently, the software is in beta and may have some bugs. But I&amp;#39;ve found it fairly stable in practice.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;You may have heard of similar libraries for P2P projects like Libp2p. These rely heavily on relays and aren&amp;#39;t optimized for direct connections. Even solutions by major companies like Valve tend to fallback unnecessarily to using relay servers. So this is my solution. Open source and free.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/robertsdotpm/p2pd\"&gt;https://github.com/robertsdotpm/p2pd&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/WWos_bUAwGV89ZXP-iWeMFzarn91rtlyOA9rvRLK_GA.jpg?auto=webp&amp;s=e247d57351b7fa7ff93df269b956048904861cbd",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/WWos_bUAwGV89ZXP-iWeMFzarn91rtlyOA9rvRLK_GA.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=fdac391ef3095ad046f1ab4d31ebd43b73446122",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/WWos_bUAwGV89ZXP-iWeMFzarn91rtlyOA9rvRLK_GA.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=47a4dfc0616d325ad3d86bb0a437dbe455e232d1",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/WWos_bUAwGV89ZXP-iWeMFzarn91rtlyOA9rvRLK_GA.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=4fc222209482753ce49dbacd47c50980c2a3adf4",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/WWos_bUAwGV89ZXP-iWeMFzarn91rtlyOA9rvRLK_GA.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=bcbb681d522e1f50eb797430f3b75709a67b8f8b",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/WWos_bUAwGV89ZXP-iWeMFzarn91rtlyOA9rvRLK_GA.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=bd7c9af5525612de80bdc727b2e7ebc9e654f614",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/WWos_bUAwGV89ZXP-iWeMFzarn91rtlyOA9rvRLK_GA.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=69c56ca7fcc9de495cab7900782c31eed2a03047",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "ZSx1dmQdpgJXXArYRi6ZL1CCvDED6-A2Wt41ckiPzGE"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gktc0y",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "coinbend",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gktc0y/new_release_of_p2pd_peertopeer_direct_connection/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gktc0y/new_release_of_p2pd_peertopeer_direct_connection/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730879564.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "**Problem**  \nI recently started working with `htmx` using Python as a server-side. I discovered that when using templating (jinja2), the developer experience is ... quite poor. There is no completion, no type hints. Understandably so, as the template does not have enough information to provide such functionalities.\n\n  \nBut even if that information was present, there is no tooling to provide the functionalities I would like to have (LSP completion, go to type definition, ...).\n\n**Potential Solution**\n\nSo I thought I could maybe make that. Here's the idea:\n\n* add type informations somewhere (maybe at the top)\n   * add import lines for typing symbols\n   * mapping context variables to their types\n* translate the template python source to a valid python file\n* map user actions on the real source to the virtual file\n* send the user LSP requests to a real Python LSP (e.g. pyright, pylance, ...)\n   * receive request from the client (user editor)\n   * map the requests to the virtual domain (different lines/columns)\n* receive response from the real Python LSP\n   * map the response to the real code domain (user file)\n   * send response to the client (user editor)\n\n**Example**\n\nSource code in the user editor\n\n    {#\n    from domain.user import User\n    user: User\n    #}\n    &lt;p&gt; {{ user.name }}&lt;/p&gt;\n\nTranslated python code\n\n    from domain.user import User\n    def make_user() -&gt; User: ...\n    user = make_user()\n    user.name\n\n  \nThanks for reading this far! I think I have two questions to the community\n\n* Does this sound doable?\n* If you write HTML templating yourself, would you find this useful?\n   * And maybe did I miss an obvious tool that improves the developer experience?",
            "author_fullname": "t2_2dlscq69",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Providing LSP capabilities in HTML templating (jinja2)",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1glbjvr",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.7,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 5,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 5,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730933402.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;&lt;br/&gt;\nI recently started working with &lt;code&gt;htmx&lt;/code&gt; using Python as a server-side. I discovered that when using templating (jinja2), the developer experience is ... quite poor. There is no completion, no type hints. Understandably so, as the template does not have enough information to provide such functionalities.&lt;/p&gt;\n\n&lt;p&gt;But even if that information was present, there is no tooling to provide the functionalities I would like to have (LSP completion, go to type definition, ...).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Potential Solution&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;So I thought I could maybe make that. Here&amp;#39;s the idea:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;add type informations somewhere (maybe at the top)\n\n&lt;ul&gt;\n&lt;li&gt;add import lines for typing symbols&lt;/li&gt;\n&lt;li&gt;mapping context variables to their types&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;translate the template python source to a valid python file&lt;/li&gt;\n&lt;li&gt;map user actions on the real source to the virtual file&lt;/li&gt;\n&lt;li&gt;send the user LSP requests to a real Python LSP (e.g. pyright, pylance, ...)\n\n&lt;ul&gt;\n&lt;li&gt;receive request from the client (user editor)&lt;/li&gt;\n&lt;li&gt;map the requests to the virtual domain (different lines/columns)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;receive response from the real Python LSP\n\n&lt;ul&gt;\n&lt;li&gt;map the response to the real code domain (user file)&lt;/li&gt;\n&lt;li&gt;send response to the client (user editor)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Source code in the user editor&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{#\nfrom domain.user import User\nuser: User\n#}\n&amp;lt;p&amp;gt; {{ user.name }}&amp;lt;/p&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Translated python code&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from domain.user import User\ndef make_user() -&amp;gt; User: ...\nuser = make_user()\nuser.name\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Thanks for reading this far! I think I have two questions to the community&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Does this sound doable?&lt;/li&gt;\n&lt;li&gt;If you write HTML templating yourself, would you find this useful?\n\n&lt;ul&gt;\n&lt;li&gt;And maybe did I miss an obvious tool that improves the developer experience?&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1glbjvr",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "slassr",
            "discussion_type": null,
            "num_comments": 4,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1glbjvr/providing_lsp_capabilities_in_html_templating/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1glbjvr/providing_lsp_capabilities_in_html_templating/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730933402.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "See the full article. Performance comparisons to Digital Ocean too. If you've been considering one the new Hetzner US data centers, I think this will be worth your while.\n\n[https://talkpython.fm/blog/posts/we-have-moved-to-hetzner/](https://talkpython.fm/blog/posts/we-have-moved-to-hetzner/)",
            "author_fullname": "t2_12bu0d",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Talk Python has moved to Hetzner",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "News"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "news",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1glixwh",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.94,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 119,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "News",
            "can_mod_post": false,
            "score": 119,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1730956248.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730955913.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;See the full article. Performance comparisons to Digital Ocean too. If you&amp;#39;ve been considering one the new Hetzner US data centers, I think this will be worth your while.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://talkpython.fm/blog/posts/we-have-moved-to-hetzner/\"&gt;https://talkpython.fm/blog/posts/we-have-moved-to-hetzner/&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/app2SRqFUZmIAZP4STwchMQMi_ImfU15_w5I0NKHKc4.jpg?auto=webp&amp;s=33d4a9a21105f1e7d2956a814b8ccd8fe75c2c03",
                            "width": 2088,
                            "height": 810
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/app2SRqFUZmIAZP4STwchMQMi_ImfU15_w5I0NKHKc4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=ed4b2ea589c5267842d0701a455a0b9f0bf50d9e",
                                "width": 108,
                                "height": 41
                            },
                            {
                                "url": "https://external-preview.redd.it/app2SRqFUZmIAZP4STwchMQMi_ImfU15_w5I0NKHKc4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=0333b6942cc021c047224e5dd356f17f50e5814a",
                                "width": 216,
                                "height": 83
                            },
                            {
                                "url": "https://external-preview.redd.it/app2SRqFUZmIAZP4STwchMQMi_ImfU15_w5I0NKHKc4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=3cd30679c9f7410bec4c9f8aeb56c5b3fbba9ffb",
                                "width": 320,
                                "height": 124
                            },
                            {
                                "url": "https://external-preview.redd.it/app2SRqFUZmIAZP4STwchMQMi_ImfU15_w5I0NKHKc4.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=65e420ce21b01bdabe2596fcbbd6a2725aa71640",
                                "width": 640,
                                "height": 248
                            },
                            {
                                "url": "https://external-preview.redd.it/app2SRqFUZmIAZP4STwchMQMi_ImfU15_w5I0NKHKc4.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=7b39232918890f81b7a8f45254fc6964373a19f5",
                                "width": 960,
                                "height": 372
                            },
                            {
                                "url": "https://external-preview.redd.it/app2SRqFUZmIAZP4STwchMQMi_ImfU15_w5I0NKHKc4.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=e858cddf756cdf1d24c02e8cee305fb93453d385",
                                "width": 1080,
                                "height": 418
                            }
                        ],
                        "variants": {},
                        "id": "Crb5DY3F08kdo7saPH3UfRmTkR4wvjU4Dv_lIfVAkCQ"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#7193ff",
            "id": "1glixwh",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "mikeckennedy",
            "discussion_type": null,
            "num_comments": 30,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1glixwh/talk_python_has_moved_to_hetzner/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1glixwh/talk_python_has_moved_to_hetzner/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730955913.0,
            "num_crossposts": 1,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "A Python script to connect to a Metasploitable machine using SSH and FTP protocols. This tool allows users to execute commands interactively over SSH and manage files via FTP.\n\n[Remote\\_Access](https://youtu.be/Aivo5OCZnU4?si=QYLIGTUy2F1TYqe9)",
            "author_fullname": "t2_9lhnpdzt",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "A Python script to gain remote access to Metasploitable.",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Tutorial"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "tutorial",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1glgg9x",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.75,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 8,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Tutorial",
            "can_mod_post": false,
            "score": 8,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730947493.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;A Python script to connect to a Metasploitable machine using SSH and FTP protocols. This tool allows users to execute commands interactively over SSH and manage files via FTP.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://youtu.be/Aivo5OCZnU4?si=QYLIGTUy2F1TYqe9\"&gt;Remote_Access&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/qBtQF9Opv61nyEDSDyyD3p4YDiUH_IpzR7y9B5_SFhk.jpg?auto=webp&amp;s=792b9bd2f4cd9637622a74716751dee921f7c8b7",
                            "width": 480,
                            "height": 360
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/qBtQF9Opv61nyEDSDyyD3p4YDiUH_IpzR7y9B5_SFhk.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=daca9461f57b960dffc9163414e702c3dbdb9c9d",
                                "width": 108,
                                "height": 81
                            },
                            {
                                "url": "https://external-preview.redd.it/qBtQF9Opv61nyEDSDyyD3p4YDiUH_IpzR7y9B5_SFhk.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=6b494455c788e5d1741a00e29beae03cc5b0c7c1",
                                "width": 216,
                                "height": 162
                            },
                            {
                                "url": "https://external-preview.redd.it/qBtQF9Opv61nyEDSDyyD3p4YDiUH_IpzR7y9B5_SFhk.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=8e106d14c1ca8e57a5050bb0bf777704e180b4b4",
                                "width": 320,
                                "height": 240
                            }
                        ],
                        "variants": {},
                        "id": "flDPqcC6SH514FwGOeHyBeYRQFB4j_tyiWbUjFre6po"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#dadada",
            "id": "1glgg9x",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Naviya_lka",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1glgg9x/a_python_script_to_gain_remote_access_to/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1glgg9x/a_python_script_to_gain_remote_access_to/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730947493.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "When ever I try to run this file it closes instantly. I’ve tried reinstalling multiple times, and I’ve tried searching YouTube videos of how to install and run .py files and none have worked. What can I do?",
            "author_fullname": "t2_s4ju6hkh",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "First time trying to run a python script.",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Tutorial"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "tutorial",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1glf1je",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.31,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Tutorial",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730943169.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;When ever I try to run this file it closes instantly. I’ve tried reinstalling multiple times, and I’ve tried searching YouTube videos of how to install and run .py files and none have worked. What can I do?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#dadada",
            "id": "1glf1je",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Guilty-Magazine5674",
            "discussion_type": null,
            "num_comments": 16,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1glf1je/first_time_trying_to_run_a_python_script/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1glf1je/first_time_trying_to_run_a_python_script/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730943169.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# Weekly Thread: Professional Use, Jobs, and Education 🏢\n\nWelcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.\n\n---\n\n## How it Works:\n\n1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.\n2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.\n3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.\n\n---\n\n## Guidelines:\n\n- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.\n- Keep discussions relevant to Python in the professional and educational context.\n  \n---\n\n## Example Topics:\n\n1. **Career Paths**: What kinds of roles are out there for Python developers?\n2. **Certifications**: Are Python certifications worth it?\n3. **Course Recommendations**: Any good advanced Python courses to recommend?\n4. **Workplace Tools**: What Python libraries are indispensable in your professional work?\n5. **Interview Tips**: What types of Python questions are commonly asked in interviews?\n\n---\n\nLet's help each other grow in our careers and education. Happy discussing! 🌟",
            "author_fullname": "t2_6l4z3",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!",
            "link_flair_richtext": [
                {
                    "a": ":pythonLogo:",
                    "e": "emoji",
                    "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                },
                {
                    "e": "text",
                    "t": " Daily Thread"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "daily-thread",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gld3ic",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.63,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 2,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": ":pythonLogo: Daily Thread",
            "can_mod_post": false,
            "score": 2,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": true,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730937611.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: Professional Use, Jobs, and Education 🏢&lt;/h1&gt;\n\n&lt;p&gt;Welcome to this week&amp;#39;s discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is &lt;strong&gt;not for recruitment&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Career Talk&lt;/strong&gt;: Discuss using Python in your job, or the job market for Python roles.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Education Q&amp;amp;A&lt;/strong&gt;: Ask or answer questions about Python courses, certifications, and educational resources.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Workplace Chat&lt;/strong&gt;: Share your experiences, challenges, or success stories about using Python professionally.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;hr/&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This thread is &lt;strong&gt;not for recruitment&lt;/strong&gt;. For job postings, please see &lt;a href=\"/r/PythonJobs\"&gt;r/PythonJobs&lt;/a&gt; or the recruitment thread in the sidebar.&lt;/li&gt;\n&lt;li&gt;Keep discussions relevant to Python in the professional and educational context.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr/&gt;\n\n&lt;h2&gt;Example Topics:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Career Paths&lt;/strong&gt;: What kinds of roles are out there for Python developers?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Certifications&lt;/strong&gt;: Are Python certifications worth it?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Course Recommendations&lt;/strong&gt;: Any good advanced Python courses to recommend?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Workplace Tools&lt;/strong&gt;: What Python libraries are indispensable in your professional work?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Interview Tips&lt;/strong&gt;: What types of Python questions are commonly asked in interviews?&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;Let&amp;#39;s help each other grow in our careers and education. Happy discussing! 🌟&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": "moderator",
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#00a6a5",
            "id": "1gld3ic",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "AutoModerator",
            "discussion_type": null,
            "num_comments": 3,
            "send_replies": false,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gld3ic/thursday_daily_thread_python_careers_courses_and/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gld3ic/thursday_daily_thread_python_careers_courses_and/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730937611.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "**What My Project Does**\n\n[Meerkat](https://github.com/niqodea/meerkat) is a fully asynchronous Python library for monitoring data sources and tracking changes over time. Inspired by the constant watchfulness of meerkats, this tool helps you stay aware of shifts in your data—whether it’s new entries, updates, or deletions. Originally created to track job postings, it’s designed to handle any type of data source, making it versatile for various real-world applications.\n\nMeerkat’s CLI module provides an easy way to view changes in your data as text in the terminal, which is especially useful for quickly setting up simple visualizations. However, Meerkat isn’t limited to logging: it can be used to trigger any arbitrary actions in response to data changes, thanks to its action executor. This flexibility lets you define custom workflows, making it more than just a data logger.\n\nMeerkat comes with an example use case—tracking job postings—so you can get a quick start and see the library in action (though you will need to implement the job fetchers yourself).\n\n**Target Audience**\n\nMeerkat is ideal for developers who need efficient, lightweight tools for monitoring data sources. It’s well-suited to hobby projects, prototyping, or small-scale production applications where regular change detection is required.\n\n**Comparison**\n\nI’m not aware of a direct comparison, but if there are similar projects out there, please let me know—I’d love to add them to the README as related projects.\n\nLink: https://github.com/niqodea/meerkat",
            "author_fullname": "t2_p6erb",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Meerkat: Monitor data sources and track changes over time from the terminal",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1glbo1o",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.9,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 20,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 20,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1730934390.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730933716.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/niqodea/meerkat\"&gt;Meerkat&lt;/a&gt; is a fully asynchronous Python library for monitoring data sources and tracking changes over time. Inspired by the constant watchfulness of meerkats, this tool helps you stay aware of shifts in your data—whether it’s new entries, updates, or deletions. Originally created to track job postings, it’s designed to handle any type of data source, making it versatile for various real-world applications.&lt;/p&gt;\n\n&lt;p&gt;Meerkat’s CLI module provides an easy way to view changes in your data as text in the terminal, which is especially useful for quickly setting up simple visualizations. However, Meerkat isn’t limited to logging: it can be used to trigger any arbitrary actions in response to data changes, thanks to its action executor. This flexibility lets you define custom workflows, making it more than just a data logger.&lt;/p&gt;\n\n&lt;p&gt;Meerkat comes with an example use case—tracking job postings—so you can get a quick start and see the library in action (though you will need to implement the job fetchers yourself).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Meerkat is ideal for developers who need efficient, lightweight tools for monitoring data sources. It’s well-suited to hobby projects, prototyping, or small-scale production applications where regular change detection is required.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I’m not aware of a direct comparison, but if there are similar projects out there, please let me know—I’d love to add them to the README as related projects.&lt;/p&gt;\n\n&lt;p&gt;Link: &lt;a href=\"https://github.com/niqodea/meerkat\"&gt;https://github.com/niqodea/meerkat&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/jO36PClJZOQ8swG5e2rCPZcd2zi5V-aVUwfvrQgYZIE.jpg?auto=webp&amp;s=7a0388902131830f7d3f819cf61f80b33c791629",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/jO36PClJZOQ8swG5e2rCPZcd2zi5V-aVUwfvrQgYZIE.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=7e196dbd78681c0ed598f394d9486fea5896e41f",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/jO36PClJZOQ8swG5e2rCPZcd2zi5V-aVUwfvrQgYZIE.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=38088d23ff458c3be91ac5fc3c9efc8467870e84",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/jO36PClJZOQ8swG5e2rCPZcd2zi5V-aVUwfvrQgYZIE.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=96271910e1a88db6e9af0aea2eae5e256b95216e",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/jO36PClJZOQ8swG5e2rCPZcd2zi5V-aVUwfvrQgYZIE.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=4261ea834f7b7bf77ec4d03961e945f322d76ba6",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/jO36PClJZOQ8swG5e2rCPZcd2zi5V-aVUwfvrQgYZIE.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=276499190246198764e8090ae6911015e50761b7",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/jO36PClJZOQ8swG5e2rCPZcd2zi5V-aVUwfvrQgYZIE.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=ab4fbb1195123afe5685a23e66a3be3c6ce1e168",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "pqPKq1q0iPY13En9zHvAFotZOe__r0sGAxYxON1SYao"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1glbo1o",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Hiqo11",
            "discussion_type": null,
            "num_comments": 2,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1glbo1o/meerkat_monitor_data_sources_and_track_changes/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1glbo1o/meerkat_monitor_data_sources_and_track_changes/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730933716.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hello all. I am trying to help someone who is trying to install/configure Python to created Simplified TS files that will be submitted to the U.S. Food &amp; Drug Administration as part of a pharmaceutical submission.\n\nAre there people in this forum familiar with the installation/configuration listed in this document (https://www.fda.gov/media/132457/download) who might be able to lend a hand please?",
            "author_fullname": "t2_10ky1l",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Anyone have experience using Python for Simplified TS files for the FDA?",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Resource"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "resource",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gl8i3q",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.46,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Resource",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730925587.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello all. I am trying to help someone who is trying to install/configure Python to created Simplified TS files that will be submitted to the U.S. Food &amp;amp; Drug Administration as part of a pharmaceutical submission.&lt;/p&gt;\n\n&lt;p&gt;Are there people in this forum familiar with the installation/configuration listed in this document (&lt;a href=\"https://www.fda.gov/media/132457/download\"&gt;https://www.fda.gov/media/132457/download&lt;/a&gt;) who might be able to lend a hand please?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ddbd37",
            "id": "1gl8i3q",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "TheNewJasonBourne",
            "discussion_type": null,
            "num_comments": 3,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gl8i3q/anyone_have_experience_using_python_for/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gl8i3q/anyone_have_experience_using_python_for/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730925587.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Links: [Beta registration](https://autokitteh.com/beta-signup/), [website](http://www.autokitteh.com), [GitHub](https://github.com/autokitteh/autokitteh), [examples](https://github.com/autokitteh/kittehub)\n\n**What My Project Does**\n\n[AutoKitteh](http://www.autokitteh.com) is an automation platform specifically designed for Python developers. It's like \"**Zapier for developers**,\" enabling you to build limitless automations with just a few lines of code.\n\n**Key features**\n\n* Automate tasks using just basic Python code.\n* Execute **long-running, reliable workflows**. It ensures your processes are durable and can resume exactly where they left off—even after server restarts.\n* Easily connect to applications like Slack, Gmail, GitHub, and many more.\n* Define custom triggers for your workflows.\n* Deploy with a single click—no infrastructure required.\n* Manage and monitor your workflows.\n* Can be easily extended to connect any API\n\n**Target Audience**\n\nProfessional and citizen developers familiar with Python that build personal projects or enterprise solutions.\n\nAutoKitteh is designed for:\n\n* DevOps, IT and MLOps automation\n* Personal and office workflows\n\n**Comparison**\n\nAutoKitteh is an integration platform similar to Zapier, Make, and Workato. However, instead of focusing on no-code solutions, it offers a low-code interface that leverages the power of Python for developing business logic.\n\nAdditionally, it functions as a durable workflow engine like Temporal and Inngest, providing a transparent Python interface.\n\n**Usage**\n\nUse AutoKitteh as:\n\n\\-  Self-hosted, open-source - [GitHub](https://github.com/autokitteh/autokitteh)\n\n\\- SaaS (Free) - [Register to SaaS Beta](https://autokitteh.com/beta-signup/) \n\n\n\n\n\n",
            "author_fullname": "t2_jhxtkuywa",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Build Limitless Automations in Python (open for Beta users)",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gl3kcl",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.83,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 18,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 18,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730913235.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Links: &lt;a href=\"https://autokitteh.com/beta-signup/\"&gt;Beta registration&lt;/a&gt;, &lt;a href=\"http://www.autokitteh.com\"&gt;website&lt;/a&gt;, &lt;a href=\"https://github.com/autokitteh/autokitteh\"&gt;GitHub&lt;/a&gt;, &lt;a href=\"https://github.com/autokitteh/kittehub\"&gt;examples&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://www.autokitteh.com\"&gt;AutoKitteh&lt;/a&gt; is an automation platform specifically designed for Python developers. It&amp;#39;s like &amp;quot;&lt;strong&gt;Zapier for developers&lt;/strong&gt;,&amp;quot; enabling you to build limitless automations with just a few lines of code.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Key features&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Automate tasks using just basic Python code.&lt;/li&gt;\n&lt;li&gt;Execute &lt;strong&gt;long-running, reliable workflows&lt;/strong&gt;. It ensures your processes are durable and can resume exactly where they left off—even after server restarts.&lt;/li&gt;\n&lt;li&gt;Easily connect to applications like Slack, Gmail, GitHub, and many more.&lt;/li&gt;\n&lt;li&gt;Define custom triggers for your workflows.&lt;/li&gt;\n&lt;li&gt;Deploy with a single click—no infrastructure required.&lt;/li&gt;\n&lt;li&gt;Manage and monitor your workflows.&lt;/li&gt;\n&lt;li&gt;Can be easily extended to connect any API&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Professional and citizen developers familiar with Python that build personal projects or enterprise solutions.&lt;/p&gt;\n\n&lt;p&gt;AutoKitteh is designed for:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;DevOps, IT and MLOps automation&lt;/li&gt;\n&lt;li&gt;Personal and office workflows&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;AutoKitteh is an integration platform similar to Zapier, Make, and Workato. However, instead of focusing on no-code solutions, it offers a low-code interface that leverages the power of Python for developing business logic.&lt;/p&gt;\n\n&lt;p&gt;Additionally, it functions as a durable workflow engine like Temporal and Inngest, providing a transparent Python interface.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Use AutoKitteh as:&lt;/p&gt;\n\n&lt;p&gt;-  Self-hosted, open-source - &lt;a href=\"https://github.com/autokitteh/autokitteh\"&gt;GitHub&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;- SaaS (Free) - &lt;a href=\"https://autokitteh.com/beta-signup/\"&gt;Register to SaaS Beta&lt;/a&gt; &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gl3kcl",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "HaimZlatokrilov",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gl3kcl/build_limitless_automations_in_python_open_for/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gl3kcl/build_limitless_automations_in_python_open_for/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730913235.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# Code-Embedder\n\nLinks: [GitHub](https://github.com/kvankova/code-embedder), [GitHub Actions Marketplace](https://github.com/marketplace/actions/code-embedder)\n\n**What My Project Does**\n\n**Code Embedder** is a GitHub Action and a pre-commit hook that **automatically updates code snippets in your markdown (README) files**. It finds code blocks in your README that reference specific scripts, then replaces these blocks with the current content of those scripts. This keeps your documentation in sync with your code.\n\n✨ **Key features**\n\n* 🔄 **Automatic synchronization**: Keep your README code examples up-to-date without manual intervention.\n* 🛠️ **Easy setup**: Simply add the action to your GitHub workflow / pre-commit hook and format your README code blocks.\n* 📝 **Section support**: Update only specific sections of the script in the README.\n* 🧩 **Object support**: Update only specific objects (functions, classes) in the README. *The latest version v0.5.1 supports only 🐍 Python objects (other languages to be added soon).*\n\nFind more information in [GitHub](https://github.com/kvankova/code-embedder) 🎉\n\n**Target Audience**\n\nIt is a production-ready, tested Github Action and pre-commit hook that can be part of you CICD workflow to keep your READMEs up-to-date.\n\n**Comparison**\n\nIt is a light-weight package with primary purpose to keep your code examples in READMEs up-to-date. `MkDocs` is a full solution to creating documentation as a code, which also offers embedding external files. **Code-Embedder** **is** **a light-weight package** that can be used for projects with or without `MkDocs`. It offers additional functionality to sync not only full scripts, but also a section of a script or a Python function / class definition.",
            "author_fullname": "t2_z2fw55m4r",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Keep your code snippets in README up-to-date!",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gl1hla",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.94,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 115,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 115,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1731421722.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730907936.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Code-Embedder&lt;/h1&gt;\n\n&lt;p&gt;Links: &lt;a href=\"https://github.com/kvankova/code-embedder\"&gt;GitHub&lt;/a&gt;, &lt;a href=\"https://github.com/marketplace/actions/code-embedder\"&gt;GitHub Actions Marketplace&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Code Embedder&lt;/strong&gt; is a GitHub Action and a pre-commit hook that &lt;strong&gt;automatically updates code snippets in your markdown (README) files&lt;/strong&gt;. It finds code blocks in your README that reference specific scripts, then replaces these blocks with the current content of those scripts. This keeps your documentation in sync with your code.&lt;/p&gt;\n\n&lt;p&gt;✨ &lt;strong&gt;Key features&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;🔄 &lt;strong&gt;Automatic synchronization&lt;/strong&gt;: Keep your README code examples up-to-date without manual intervention.&lt;/li&gt;\n&lt;li&gt;🛠️ &lt;strong&gt;Easy setup&lt;/strong&gt;: Simply add the action to your GitHub workflow / pre-commit hook and format your README code blocks.&lt;/li&gt;\n&lt;li&gt;📝 &lt;strong&gt;Section support&lt;/strong&gt;: Update only specific sections of the script in the README.&lt;/li&gt;\n&lt;li&gt;🧩 &lt;strong&gt;Object support&lt;/strong&gt;: Update only specific objects (functions, classes) in the README. &lt;em&gt;The latest version v0.5.1 supports only 🐍 Python objects (other languages to be added soon).&lt;/em&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Find more information in &lt;a href=\"https://github.com/kvankova/code-embedder\"&gt;GitHub&lt;/a&gt; 🎉&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;It is a production-ready, tested Github Action and pre-commit hook that can be part of you CICD workflow to keep your READMEs up-to-date.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;It is a light-weight package with primary purpose to keep your code examples in READMEs up-to-date. &lt;code&gt;MkDocs&lt;/code&gt; is a full solution to creating documentation as a code, which also offers embedding external files. &lt;strong&gt;Code-Embedder&lt;/strong&gt; &lt;strong&gt;is&lt;/strong&gt; &lt;strong&gt;a light-weight package&lt;/strong&gt; that can be used for projects with or without &lt;code&gt;MkDocs&lt;/code&gt;. It offers additional functionality to sync not only full scripts, but also a section of a script or a Python function / class definition.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/zuq84lvi3sm4c-QyLc2hRZv0KWsX-mROoRt75H3Qiyo.jpg?auto=webp&amp;s=dd3e568663b5c0592f7adfefdfa72df06f4bd841",
                            "width": 1806,
                            "height": 824
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/zuq84lvi3sm4c-QyLc2hRZv0KWsX-mROoRt75H3Qiyo.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=6fb20baa2074d985d1e8a4a0230699a3fc3dc182",
                                "width": 108,
                                "height": 49
                            },
                            {
                                "url": "https://external-preview.redd.it/zuq84lvi3sm4c-QyLc2hRZv0KWsX-mROoRt75H3Qiyo.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=9d07abfe076c68ce75a78034fd28d3b463b5edb8",
                                "width": 216,
                                "height": 98
                            },
                            {
                                "url": "https://external-preview.redd.it/zuq84lvi3sm4c-QyLc2hRZv0KWsX-mROoRt75H3Qiyo.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=cbf90b414b5b37d935104875906426d3939cd856",
                                "width": 320,
                                "height": 146
                            },
                            {
                                "url": "https://external-preview.redd.it/zuq84lvi3sm4c-QyLc2hRZv0KWsX-mROoRt75H3Qiyo.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=64f5259195c57c6cd464a4a6b8af5b2f3f5b6b83",
                                "width": 640,
                                "height": 292
                            },
                            {
                                "url": "https://external-preview.redd.it/zuq84lvi3sm4c-QyLc2hRZv0KWsX-mROoRt75H3Qiyo.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=441d0891942e0951622f509cb95e9b2053a955cb",
                                "width": 960,
                                "height": 438
                            },
                            {
                                "url": "https://external-preview.redd.it/zuq84lvi3sm4c-QyLc2hRZv0KWsX-mROoRt75H3Qiyo.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=9bfa720eabf602c5bb9c19c05d595f5a73451bd3",
                                "width": 1080,
                                "height": 492
                            }
                        ],
                        "variants": {},
                        "id": "iYv0Lqix2NqV1P6ofeF9snFnqd0p4TcJR3GlibIo3SI"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gl1hla",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Better-Banana4069",
            "discussion_type": null,
            "num_comments": 20,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gl1hla/keep_your_code_snippets_in_readme_uptodate/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gl1hla/keep_your_code_snippets_in_readme_uptodate/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730907936.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I developed this extension for VSCode because I hated that Python didn't have curly braces, something that is annoying for many devs. I know it still has a lot of bugs and I know there are other types of alternatives, but it was the simplest thing I could think of to do.  \nLink: [https://marketplace.visualstudio.com/items?itemName=BrayanCeron.pycurlybraces](https://marketplace.visualstudio.com/items?itemName=BrayanCeron.pycurlybraces) ",
            "author_fullname": "t2_f23v5146q",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Curly braces in Python",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Resource"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "resource",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gl1d8y",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.26,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Resource",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730907626.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I developed this extension for VSCode because I hated that Python didn&amp;#39;t have curly braces, something that is annoying for many devs. I know it still has a lot of bugs and I know there are other types of alternatives, but it was the simplest thing I could think of to do.&lt;br/&gt;\nLink: &lt;a href=\"https://marketplace.visualstudio.com/items?itemName=BrayanCeron.pycurlybraces\"&gt;https://marketplace.visualstudio.com/items?itemName=BrayanCeron.pycurlybraces&lt;/a&gt; &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/L8H48aY2ogI2-6SmWTFrxwI7rCC6WvD3Q2b14rj-iQI.jpg?auto=webp&amp;s=507e3663356b5c2d024b0767644562494219fd7a",
                            "width": 1067,
                            "height": 1067
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/L8H48aY2ogI2-6SmWTFrxwI7rCC6WvD3Q2b14rj-iQI.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=1efb8c4ad563f60640b126a83b18dcc266a1ac35",
                                "width": 108,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/L8H48aY2ogI2-6SmWTFrxwI7rCC6WvD3Q2b14rj-iQI.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=597a5dbf74c84043617f3e35e043907f181f30e5",
                                "width": 216,
                                "height": 216
                            },
                            {
                                "url": "https://external-preview.redd.it/L8H48aY2ogI2-6SmWTFrxwI7rCC6WvD3Q2b14rj-iQI.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=fa507692aa8e300426e2661f4e43d95af85ea404",
                                "width": 320,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/L8H48aY2ogI2-6SmWTFrxwI7rCC6WvD3Q2b14rj-iQI.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=553f336bdb73c747f2982adad41d34bb08b685cd",
                                "width": 640,
                                "height": 640
                            },
                            {
                                "url": "https://external-preview.redd.it/L8H48aY2ogI2-6SmWTFrxwI7rCC6WvD3Q2b14rj-iQI.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=40f5569e2fa6c09ef121cf67f45d9e8d71246d3f",
                                "width": 960,
                                "height": 960
                            }
                        ],
                        "variants": {},
                        "id": "ivQWTPb0cUQjPW-sRMqrjiauRjFb4kwSbWKSDhmHxBo"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ddbd37",
            "id": "1gl1d8y",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "brayan0n",
            "discussion_type": null,
            "num_comments": 11,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gl1d8y/curly_braces_in_python/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gl1d8y/curly_braces_in_python/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730907626.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hi r/Python,\n\nI'd like to introduce [`scipy-stubs`](https://github.com/jorenham/scipy-stubs), a stub-only package providing type annotations for SciPy.\n\n# What My Project Does\n\n* Enables static type checking for SciPy-based projects\n* Improves IDE support (auto-completion, bug prevention)\n* Helps catch type-related errors early on\n* Lets you spend less time searching the docs\n* Easy to install: `pip install scipy-stubs`\n* Works out-of-the-box with any codebase -- no imports required\n* Fully compatible with mypy and pyright/pylance -- even in strict mode\n\nAnd even if you don't use type annotations at all, it will help your IDE understand your codebase better, resulting in better introspection and auto-completion.\n\n# Target Audience\n\nAnyone who uses SciPy will be able to benefit from `scipy-stubs`. \n\nYou can install `scipy-stubs` if you use `scipy &gt;= 1.10`, but I'd strongly recommend using the latest `scipy == 1.14.1` release.\n\n# Comparison\n\nIn [`microsoft/python-type-stubs`](https://github.com/microsoft/python-type-stubs) there used to be a scipy stub package, which was bundled with pylance. But it was very outdated and of low quality, so was recently removed in favor of `scipy-stubs` ([microsoft/python-type-stubs#320](https://github.com/microsoft/python-type-stubs/issues/320)).\n\nThere's also the [BarakKatzir/types-scipy-sparse](https://github.com/BarakKatzir/types-scipy-sparse/) stub package, that's specific to `scipy.sparse`. I recently spoken with the author on Zoom, and we decided to merge `types-scipy-sparse` into `scipy-stubs` ([jorenham/scipy-stubs#129](https://github.com/jorenham/scipy-stubs/issues/129)).\n\nSciPy itself has some sporadic type annotations and a couple of stub files. But by no means is that enough for proper type checking. In [scipy/scipy#21614](https://github.com/scipy/scipy/issues/21614) I explain in detail why I decided to develop `scipy-stubs` independently of `scipy` (for now).\n\n---\n\n- Source code: https://github.com/jorenham/scipy-stubs\n- PyPI: https://pypi.org/project/scipy-stubs/\n- SciPy thread: https://github.com/scipy/scipy/issues/21614",
            "author_fullname": "t2_nyz95bl",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "scipy-stubs: Type Hints for SciPy",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gkysrl",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.95,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 44,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 44,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1730914438.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730900614.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi &lt;a href=\"/r/Python\"&gt;r/Python&lt;/a&gt;,&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;d like to introduce &lt;a href=\"https://github.com/jorenham/scipy-stubs\"&gt;&lt;code&gt;scipy-stubs&lt;/code&gt;&lt;/a&gt;, a stub-only package providing type annotations for SciPy.&lt;/p&gt;\n\n&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Enables static type checking for SciPy-based projects&lt;/li&gt;\n&lt;li&gt;Improves IDE support (auto-completion, bug prevention)&lt;/li&gt;\n&lt;li&gt;Helps catch type-related errors early on&lt;/li&gt;\n&lt;li&gt;Lets you spend less time searching the docs&lt;/li&gt;\n&lt;li&gt;Easy to install: &lt;code&gt;pip install scipy-stubs&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Works out-of-the-box with any codebase -- no imports required&lt;/li&gt;\n&lt;li&gt;Fully compatible with mypy and pyright/pylance -- even in strict mode&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;And even if you don&amp;#39;t use type annotations at all, it will help your IDE understand your codebase better, resulting in better introspection and auto-completion.&lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;Anyone who uses SciPy will be able to benefit from &lt;code&gt;scipy-stubs&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;You can install &lt;code&gt;scipy-stubs&lt;/code&gt; if you use &lt;code&gt;scipy &amp;gt;= 1.10&lt;/code&gt;, but I&amp;#39;d strongly recommend using the latest &lt;code&gt;scipy == 1.14.1&lt;/code&gt; release.&lt;/p&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;In &lt;a href=\"https://github.com/microsoft/python-type-stubs\"&gt;&lt;code&gt;microsoft/python-type-stubs&lt;/code&gt;&lt;/a&gt; there used to be a scipy stub package, which was bundled with pylance. But it was very outdated and of low quality, so was recently removed in favor of &lt;code&gt;scipy-stubs&lt;/code&gt; (&lt;a href=\"https://github.com/microsoft/python-type-stubs/issues/320\"&gt;microsoft/python-type-stubs#320&lt;/a&gt;).&lt;/p&gt;\n\n&lt;p&gt;There&amp;#39;s also the &lt;a href=\"https://github.com/BarakKatzir/types-scipy-sparse/\"&gt;BarakKatzir/types-scipy-sparse&lt;/a&gt; stub package, that&amp;#39;s specific to &lt;code&gt;scipy.sparse&lt;/code&gt;. I recently spoken with the author on Zoom, and we decided to merge &lt;code&gt;types-scipy-sparse&lt;/code&gt; into &lt;code&gt;scipy-stubs&lt;/code&gt; (&lt;a href=\"https://github.com/jorenham/scipy-stubs/issues/129\"&gt;jorenham/scipy-stubs#129&lt;/a&gt;).&lt;/p&gt;\n\n&lt;p&gt;SciPy itself has some sporadic type annotations and a couple of stub files. But by no means is that enough for proper type checking. In &lt;a href=\"https://github.com/scipy/scipy/issues/21614\"&gt;scipy/scipy#21614&lt;/a&gt; I explain in detail why I decided to develop &lt;code&gt;scipy-stubs&lt;/code&gt; independently of &lt;code&gt;scipy&lt;/code&gt; (for now).&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Source code: &lt;a href=\"https://github.com/jorenham/scipy-stubs\"&gt;https://github.com/jorenham/scipy-stubs&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;PyPI: &lt;a href=\"https://pypi.org/project/scipy-stubs/\"&gt;https://pypi.org/project/scipy-stubs/&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;SciPy thread: &lt;a href=\"https://github.com/scipy/scipy/issues/21614\"&gt;https://github.com/scipy/scipy/issues/21614&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/g_pX2WPBKKd7mnzv9_Pw2QrbHqYcb6k2JErupevsu_Q.jpg?auto=webp&amp;s=6914b0fa0375a30e42f1c64960278dd9528799a8",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/g_pX2WPBKKd7mnzv9_Pw2QrbHqYcb6k2JErupevsu_Q.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=62e45ec3d6cfad81366965dc898eed09405c686a",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/g_pX2WPBKKd7mnzv9_Pw2QrbHqYcb6k2JErupevsu_Q.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=ab887f67d8af6b9b1cf3c5a4d11469fd02f8824c",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/g_pX2WPBKKd7mnzv9_Pw2QrbHqYcb6k2JErupevsu_Q.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=7b148a672bcd53fdc6d5f25fd4e6232736d77746",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/g_pX2WPBKKd7mnzv9_Pw2QrbHqYcb6k2JErupevsu_Q.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=fd51dad65235a8633de006308148a42cbd19eee7",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/g_pX2WPBKKd7mnzv9_Pw2QrbHqYcb6k2JErupevsu_Q.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=161dc9506d34c350413ff56ba7ba0f5a8ca48e91",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/g_pX2WPBKKd7mnzv9_Pw2QrbHqYcb6k2JErupevsu_Q.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=4227755aec449e0f0c1b6821748600203fdfa1d6",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "cGV_4QmI4fjj5BgsJwS6bkx-VPF6jZNKMFlozKdt-20"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gkysrl",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "de_ham",
            "discussion_type": null,
            "num_comments": 3,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gkysrl/scipystubs_type_hints_for_scipy/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gkysrl/scipystubs_type_hints_for_scipy/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730900614.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Links: [GitHub](https://github.com/Udzu/dataglasses), [PyPI](https://pypi.org/project/dataglasses/).\n\n# What My Project Does\n\nA small package with just two functions: `from_dict` to create dataclasses from JSON, and `to_json_schema` to create JSON schemas for validating that JSON. The first can be thought of as the inverse of `dataclasses.asdict`.\n\nThe package uses the dataclass's type annotations and supports nested structures, collection types, Optional and Union types, enums and Literal types, Annotated types (for property descriptions), forward references, and data transformations (which can be used to handle other types). For more details and examples, including of the generated schemas, see the [README](https://github.com/Udzu/dataglasses/blob/main/README.md).\n\nHere is a simple motivating example:\n\n    from dataclasses import dataclass\n    from dataglasses import from_dict, to_json_schema\n    from typing import Literal, Sequence\n\n    @dataclass\n    class Catalog:\n        items: \"Sequence[InventoryItem]\"\n        code: int | Literal[\"N/A\"]\n\n    @dataclass\n    class InventoryItem:\n        name: str\n        unit_price: float\n        quantity_on_hand: int = 0\n\n    value = { \"items\": [{ \"name\": \"widget\", \"unit_price\": 3.0}], \"code\": 99 }\n        \n    # convert value to dataclass using from_dict (raises if value is invalid)\n    assert from_dict(Catalog, value) == Catalog(\n        items=[InventoryItem(name='widget', unit_price=3.0, quantity_on_hand=0)], code=99\n    )\n\n    # generate JSON schema to validate against using to_json_schema\n    schema = to_json_schema(Catalog)\n    from jsonschema import validate\n    validate(value, schema)\n\n\n# Target Audience\n\nThe package's current state (small and simple, but also limited and unoptimized) makes it best suited for rapid prototyping and scripting. Indeed, I originally wrote it to save myself time while developing a simple script.\n\nThat said, it's fully tested (with 100% coverage enforced) and once it has been used in anger (and following any change suggestions) it might be suitable for production code too. The fact that it is so small (two functions in one file with no dependencies) means that it could also be incorporated into a project directly.\n\n# Comparison\n\n[pydantic](https://docs.pydantic.dev/latest/) is more complex to use and doesn't work on built-in dataclasses. But it's also vastly more suitable for complex validation or high performance.\n\n[dacite](https://github.com/konradhalas/dacite) doesn't generate JSON schemas. There are also some smaller design differences: dataglasses transformations can be applied to specific dataclass fields, enums are handled by default, non-standard generic collection types are *not* handled by default, and Optional type fields with no defaults are not considered optional in inputs.\n\n# Tooling\n\nAs an aside, one of the reasons I bothered to package this up from what was otherwise a throwaway project was the chance to try out [uv](https://docs.astral.sh/uv/) and [ruff](https://docs.astral.sh/ruff/). And I have to report that so far it's been a very pleasant experience!",
            "author_fullname": "t2_p4l5r",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Dataglasses: easy creation of dataclasses from JSON, and JSON schemas from dataclasses",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gky5tr",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.87,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 55,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 55,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730898719.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Links: &lt;a href=\"https://github.com/Udzu/dataglasses\"&gt;GitHub&lt;/a&gt;, &lt;a href=\"https://pypi.org/project/dataglasses/\"&gt;PyPI&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;A small package with just two functions: &lt;code&gt;from_dict&lt;/code&gt; to create dataclasses from JSON, and &lt;code&gt;to_json_schema&lt;/code&gt; to create JSON schemas for validating that JSON. The first can be thought of as the inverse of &lt;code&gt;dataclasses.asdict&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The package uses the dataclass&amp;#39;s type annotations and supports nested structures, collection types, Optional and Union types, enums and Literal types, Annotated types (for property descriptions), forward references, and data transformations (which can be used to handle other types). For more details and examples, including of the generated schemas, see the &lt;a href=\"https://github.com/Udzu/dataglasses/blob/main/README.md\"&gt;README&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Here is a simple motivating example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from dataclasses import dataclass\nfrom dataglasses import from_dict, to_json_schema\nfrom typing import Literal, Sequence\n\n@dataclass\nclass Catalog:\n    items: &amp;quot;Sequence[InventoryItem]&amp;quot;\n    code: int | Literal[&amp;quot;N/A&amp;quot;]\n\n@dataclass\nclass InventoryItem:\n    name: str\n    unit_price: float\n    quantity_on_hand: int = 0\n\nvalue = { &amp;quot;items&amp;quot;: [{ &amp;quot;name&amp;quot;: &amp;quot;widget&amp;quot;, &amp;quot;unit_price&amp;quot;: 3.0}], &amp;quot;code&amp;quot;: 99 }\n\n# convert value to dataclass using from_dict (raises if value is invalid)\nassert from_dict(Catalog, value) == Catalog(\n    items=[InventoryItem(name=&amp;#39;widget&amp;#39;, unit_price=3.0, quantity_on_hand=0)], code=99\n)\n\n# generate JSON schema to validate against using to_json_schema\nschema = to_json_schema(Catalog)\nfrom jsonschema import validate\nvalidate(value, schema)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;The package&amp;#39;s current state (small and simple, but also limited and unoptimized) makes it best suited for rapid prototyping and scripting. Indeed, I originally wrote it to save myself time while developing a simple script.&lt;/p&gt;\n\n&lt;p&gt;That said, it&amp;#39;s fully tested (with 100% coverage enforced) and once it has been used in anger (and following any change suggestions) it might be suitable for production code too. The fact that it is so small (two functions in one file with no dependencies) means that it could also be incorporated into a project directly.&lt;/p&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"https://docs.pydantic.dev/latest/\"&gt;pydantic&lt;/a&gt; is more complex to use and doesn&amp;#39;t work on built-in dataclasses. But it&amp;#39;s also vastly more suitable for complex validation or high performance.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/konradhalas/dacite\"&gt;dacite&lt;/a&gt; doesn&amp;#39;t generate JSON schemas. There are also some smaller design differences: dataglasses transformations can be applied to specific dataclass fields, enums are handled by default, non-standard generic collection types are &lt;em&gt;not&lt;/em&gt; handled by default, and Optional type fields with no defaults are not considered optional in inputs.&lt;/p&gt;\n\n&lt;h1&gt;Tooling&lt;/h1&gt;\n\n&lt;p&gt;As an aside, one of the reasons I bothered to package this up from what was otherwise a throwaway project was the chance to try out &lt;a href=\"https://docs.astral.sh/uv/\"&gt;uv&lt;/a&gt; and &lt;a href=\"https://docs.astral.sh/ruff/\"&gt;ruff&lt;/a&gt;. And I have to report that so far it&amp;#39;s been a very pleasant experience!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/rSHbG99jJXIMYTx_eKP_Wrm4xMjLi38xL9pRHZuoQek.jpg?auto=webp&amp;s=10b40747fff41b6f5ff8e874527c5b114d0cd014",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/rSHbG99jJXIMYTx_eKP_Wrm4xMjLi38xL9pRHZuoQek.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=869a1f5d669f7f919ded94b71bb709a4ac0b2eb5",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/rSHbG99jJXIMYTx_eKP_Wrm4xMjLi38xL9pRHZuoQek.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=aefe5f2eb4ec3ee5944354d980ebce165086a0b7",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/rSHbG99jJXIMYTx_eKP_Wrm4xMjLi38xL9pRHZuoQek.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=a813e8cb857cbcfee33ebb08db0d365542d86b60",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/rSHbG99jJXIMYTx_eKP_Wrm4xMjLi38xL9pRHZuoQek.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=79b34be18b900c0a7d4c6312eaedb9c6202a7390",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/rSHbG99jJXIMYTx_eKP_Wrm4xMjLi38xL9pRHZuoQek.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=6ce4467fe64b88f2d0b9b4552315991b843cd0e5",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/rSHbG99jJXIMYTx_eKP_Wrm4xMjLi38xL9pRHZuoQek.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=6f4a7efd5146b652867aee8b1d0ef21693899f27",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "2a8yA2WRHTwm2KruQIauhpaJMwEUaVzyVbcuqWLI3Z4"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gky5tr",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Udzu",
            "discussion_type": null,
            "num_comments": 39,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gky5tr/dataglasses_easy_creation_of_dataclasses_from/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gky5tr/dataglasses_easy_creation_of_dataclasses_from/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730898719.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hey everyone,\n\n\n\nI’ve just finished writing the first part of my comprehensive guide on Python project management and packaging. Now that I think about it, I think it's more an article to understand the many concepts of Python packaging and project management more than a guide in and of itself.\n\n  \nThe article: [A Comprehensive Guide to Python Project Management and Packaging: Concepts Illustrated with uv – Part I](https://reinforcedknowledge.com/a-comprehensive-guide-to-python-project-management-and-packaging-concepts-illustrated-with-uv-part-i/)\n\n\n\nIn this first part, I focused on:\n\n\\- The evolution of Python packaging standards through key PEPs.\n\n\\- Detailed explanations of the main concepts like \\`pyproject.toml\\`, the packaging nomenclature, the dependency groups, locking and syncing etc.\n\n\\- An introduction to \\`uv\\` and how it illustrates essential packaging concepts.\n\n\\- Practical workflows using \\`uv\\` that I use with data science projects.\n\n  \nMainly what it lacks is a deeper section or paragraph on workspaces, scripts, building and publishing. That's for part 2!\n\n\n\nWorking on this article was mainly journey for me through the various PEPs that have shaped the current Python packaging standards. I delved into the history and rationale behind these PEPs. I just wanted to understand. I wanted to understand all the discussions around packaging. That's something we deal with daily, so I wanted to deeply understand every concept that's related to Python projects or packages. The PEPs, and my own experience, helped me understand why certain changes were necessary and how they effectively resolved previous issues. It was enlightening to see how the thoughtful decision-making and the understanding of developers' needs. And I gained a deeper appreciation for how PEPs are organized and how they think external stuff like the existing tools and how they leave room for future improvement and standardization and for tools to innovate.\n\n\n\nIt was a pleasure both writing and reading through the material. I don’t expect everyone to read it in its entirety since it’s quite lengthy, and I’m sure my writing style has room for improvement. However, I believe you can easily pick up valuable bits of information from it. For those who are really interested, I highly recommend diving into the PEPs directly to get the most accurate and detailed insights!",
            "author_fullname": "t2_utv3gf2uo",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Just published an article to understand Python Project Management and Packaging, illustrated with uv",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Tutorial"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "tutorial",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gkmrsg",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.93,
            "author_flair_background_color": "transparent",
            "subreddit_type": "public",
            "ups": 126,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": "1dfa5f1e-537c-11ee-a57d-ca789f839d95",
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Tutorial",
            "can_mod_post": false,
            "score": 126,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [
                {
                    "e": "text",
                    "t": "Tuple unpacking gone wrong"
                }
            ],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730855684.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "richtext",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey everyone,&lt;/p&gt;\n\n&lt;p&gt;I’ve just finished writing the first part of my comprehensive guide on Python project management and packaging. Now that I think about it, I think it&amp;#39;s more an article to understand the many concepts of Python packaging and project management more than a guide in and of itself.&lt;/p&gt;\n\n&lt;p&gt;The article: &lt;a href=\"https://reinforcedknowledge.com/a-comprehensive-guide-to-python-project-management-and-packaging-concepts-illustrated-with-uv-part-i/\"&gt;A Comprehensive Guide to Python Project Management and Packaging: Concepts Illustrated with uv – Part I&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;In this first part, I focused on:&lt;/p&gt;\n\n&lt;p&gt;- The evolution of Python packaging standards through key PEPs.&lt;/p&gt;\n\n&lt;p&gt;- Detailed explanations of the main concepts like `pyproject.toml`, the packaging nomenclature, the dependency groups, locking and syncing etc.&lt;/p&gt;\n\n&lt;p&gt;- An introduction to `uv` and how it illustrates essential packaging concepts.&lt;/p&gt;\n\n&lt;p&gt;- Practical workflows using `uv` that I use with data science projects.&lt;/p&gt;\n\n&lt;p&gt;Mainly what it lacks is a deeper section or paragraph on workspaces, scripts, building and publishing. That&amp;#39;s for part 2!&lt;/p&gt;\n\n&lt;p&gt;Working on this article was mainly journey for me through the various PEPs that have shaped the current Python packaging standards. I delved into the history and rationale behind these PEPs. I just wanted to understand. I wanted to understand all the discussions around packaging. That&amp;#39;s something we deal with daily, so I wanted to deeply understand every concept that&amp;#39;s related to Python projects or packages. The PEPs, and my own experience, helped me understand why certain changes were necessary and how they effectively resolved previous issues. It was enlightening to see how the thoughtful decision-making and the understanding of developers&amp;#39; needs. And I gained a deeper appreciation for how PEPs are organized and how they think external stuff like the existing tools and how they leave room for future improvement and standardization and for tools to innovate.&lt;/p&gt;\n\n&lt;p&gt;It was a pleasure both writing and reading through the material. I don’t expect everyone to read it in its entirety since it’s quite lengthy, and I’m sure my writing style has room for improvement. However, I believe you can easily pick up valuable bits of information from it. For those who are really interested, I highly recommend diving into the PEPs directly to get the most accurate and detailed insights!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": "Tuple unpacking gone wrong",
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#dadada",
            "id": "1gkmrsg",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "ReinforcedKnowledge",
            "discussion_type": null,
            "num_comments": 40,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": "dark",
            "permalink": "/r/Python/comments/1gkmrsg/just_published_an_article_to_understand_python/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gkmrsg/just_published_an_article_to_understand_python/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730855684.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# Weekly Thread: Beginner Questions 🐍\n\nWelcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.\n\n## How it Works:\n\n1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!\n2. **Community Support**: Get answers and advice from the community.\n3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.\n\n## Guidelines:\n\n* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).\n\n## Recommended Resources:\n\n* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.\n\n## Example Questions:\n\n1. **What is the difference between a list and a tuple?**\n2. **How do I read a CSV file in Python?**\n3. **What are Python decorators and how do I use them?**\n4. **How do I install a Python package using pip?**\n5. **What is a virtual environment and why should I use one?**\n\nLet's help each other learn Python! 🌟",
            "author_fullname": "t2_6l4z3",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Wednesday Daily Thread: Beginner questions",
            "link_flair_richtext": [
                {
                    "a": ":pythonLogo:",
                    "e": "emoji",
                    "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                },
                {
                    "e": "text",
                    "t": " Daily Thread"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "daily-thread",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gkl9r8",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.85,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 8,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": ":pythonLogo: Daily Thread",
            "can_mod_post": false,
            "score": 8,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": true,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730851208.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: Beginner Questions 🐍&lt;/h1&gt;\n\n&lt;p&gt;Welcome to our Beginner Questions thread! Whether you&amp;#39;re new to Python or just looking to clarify some basics, this is the thread for you.&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Ask Anything&lt;/strong&gt;: Feel free to ask any Python-related question. There are no bad questions here!&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Community Support&lt;/strong&gt;: Get answers and advice from the community.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Resource Sharing&lt;/strong&gt;: Discover tutorials, articles, and beginner-friendly resources.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This thread is specifically for &lt;strong&gt;beginner questions&lt;/strong&gt;. For more advanced queries, check out our &lt;a href=\"#advanced-questions-thread-link\"&gt;Advanced Questions Thread&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Recommended Resources:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If you don&amp;#39;t receive a response, consider exploring &lt;a href=\"/r/LearnPython\"&gt;r/LearnPython&lt;/a&gt; or join the &lt;a href=\"https://discord.gg/python\"&gt;Python Discord Server&lt;/a&gt; for quicker assistance.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Questions:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;What is the difference between a list and a tuple?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How do I read a CSV file in Python?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are Python decorators and how do I use them?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How do I install a Python package using pip?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What is a virtual environment and why should I use one?&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Let&amp;#39;s help each other learn Python! 🌟&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?auto=webp&amp;s=77877e508cacc3a5c51009b26cc51fd08031ca76",
                            "width": 512,
                            "height": 288
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=c5fbdf8efb5e6f14fe03845466b74ba9ebab4413",
                                "width": 108,
                                "height": 60
                            },
                            {
                                "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d57848912389eb70e32659895710a7c322a93edf",
                                "width": 216,
                                "height": 121
                            },
                            {
                                "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=86d869d6c6e16a13c5cf960ab69d7d274b49ff16",
                                "width": 320,
                                "height": 180
                            }
                        ],
                        "variants": {},
                        "id": "aNa9dCzuqtUFBkZTt98jjYpcv1i_lqriq_lbtm_LcRo"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": "moderator",
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#00a6a5",
            "id": "1gkl9r8",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "AutoModerator",
            "discussion_type": null,
            "num_comments": 3,
            "send_replies": false,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gkl9r8/wednesday_daily_thread_beginner_questions/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gkl9r8/wednesday_daily_thread_beginner_questions/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730851208.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Opposite of Cloud Native is? It's time to define what it means to be NOT cloud-native, in a positive way. Here's an essay I wrote today. Would love your thoughts on it. \n\n[https://mkennedy.codes/posts/opposite-of-cloud-native-is-stack-native/](https://mkennedy.codes/posts/opposite-of-cloud-native-is-stack-native/)",
            "author_fullname": "t2_12bu0d",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Opposite of Cloud Native Is?",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "News"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "news",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gkiiws",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.33,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "News",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730843800.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Opposite of Cloud Native is? It&amp;#39;s time to define what it means to be NOT cloud-native, in a positive way. Here&amp;#39;s an essay I wrote today. Would love your thoughts on it. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://mkennedy.codes/posts/opposite-of-cloud-native-is-stack-native/\"&gt;https://mkennedy.codes/posts/opposite-of-cloud-native-is-stack-native/&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/AY5bDenjh1kbjKFY272KAj5XYNKyU3biXavLQNvWhfI.jpg?auto=webp&amp;s=10eb4ef8cfb2fe79501812d4532ded319ea614e0",
                            "width": 1600,
                            "height": 800
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/AY5bDenjh1kbjKFY272KAj5XYNKyU3biXavLQNvWhfI.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=5472715148c46b55ed9858b2de21ed5425fa36e4",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/AY5bDenjh1kbjKFY272KAj5XYNKyU3biXavLQNvWhfI.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=ac1671a2df2c81d37c44e9b49d065775ec263da4",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/AY5bDenjh1kbjKFY272KAj5XYNKyU3biXavLQNvWhfI.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=34cba537e4eed4434c9a67c0b9c4a2e9f3888ee1",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/AY5bDenjh1kbjKFY272KAj5XYNKyU3biXavLQNvWhfI.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=9eb21df4cb6007663f84f8b5f90b6fd55a723fea",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/AY5bDenjh1kbjKFY272KAj5XYNKyU3biXavLQNvWhfI.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=ade5c3a8db33e82bb0664a2aedbe890329ac0d37",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/AY5bDenjh1kbjKFY272KAj5XYNKyU3biXavLQNvWhfI.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=4fc88c087ed520d842c113f3c931c76cc9b4975e",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "LidCA1cZ8LMY9NFavefLp8NRiaiDBuoVfqkKm5Fip44"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#7193ff",
            "id": "1gkiiws",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "mikeckennedy",
            "discussion_type": null,
            "num_comments": 16,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gkiiws/opposite_of_cloud_native_is/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gkiiws/opposite_of_cloud_native_is/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730843800.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# What My project Does:\n\nScrapes data from sites and uses AI to extract structured data from it.\n\n# Whats New:\n\n* BREAKING CHANGE: --pricing cli option now takes a string value of 'details', 'cost', or 'none'.\n* Added pool of user agents that gets randomly pulled from.\n* Updating pricing data.\n* Pricing token capture and compute now much more accurate.\n* Faster startup\n\n# Key Features:\n\n* Uses Playwright / Selenium to bypass most simple bot checks.\n* Uses AI to extract data from a page and save it various formats such as CSV, XLSX, JSON, Markdown.\n* Has rich console output to display data right in your terminal.\n\n# GitHub and PyPI\n\n* PAR Scrape is under active development and getting new features all the time.\n* Check out the project on GitHub or for full documentation, installation instructions, and to contribute: [https://github.com/paulrobello/par\\_scrape](https://github.com/paulrobello/par_scrape)\n* PyPI [https://pypi.org/project/par\\_scrape/](https://pypi.org/project/par_scrape/)\n\n# Comparison:\n\nI have seem many command line and web applications for scraping but none that are as simple, flexible and fast as ParScrape\n\n# Target Audience\n\nAI enthusiasts and data hungry hobbyist",
            "author_fullname": "t2_zt4la",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "ParScrape v0.4.7 Released",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gkhl3c",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.44,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730841405.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;What My project Does:&lt;/h1&gt;\n\n&lt;p&gt;Scrapes data from sites and uses AI to extract structured data from it.&lt;/p&gt;\n\n&lt;h1&gt;Whats New:&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;BREAKING CHANGE: --pricing cli option now takes a string value of &amp;#39;details&amp;#39;, &amp;#39;cost&amp;#39;, or &amp;#39;none&amp;#39;.&lt;/li&gt;\n&lt;li&gt;Added pool of user agents that gets randomly pulled from.&lt;/li&gt;\n&lt;li&gt;Updating pricing data.&lt;/li&gt;\n&lt;li&gt;Pricing token capture and compute now much more accurate.&lt;/li&gt;\n&lt;li&gt;Faster startup&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Key Features:&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Uses Playwright / Selenium to bypass most simple bot checks.&lt;/li&gt;\n&lt;li&gt;Uses AI to extract data from a page and save it various formats such as CSV, XLSX, JSON, Markdown.&lt;/li&gt;\n&lt;li&gt;Has rich console output to display data right in your terminal.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;GitHub and PyPI&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;PAR Scrape is under active development and getting new features all the time.&lt;/li&gt;\n&lt;li&gt;Check out the project on GitHub or for full documentation, installation instructions, and to contribute: &lt;a href=\"https://github.com/paulrobello/par_scrape\"&gt;https://github.com/paulrobello/par_scrape&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;PyPI &lt;a href=\"https://pypi.org/project/par_scrape/\"&gt;https://pypi.org/project/par_scrape/&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Comparison:&lt;/h1&gt;\n\n&lt;p&gt;I have seem many command line and web applications for scraping but none that are as simple, flexible and fast as ParScrape&lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;AI enthusiasts and data hungry hobbyist&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/ffXy1fcnN-teI3NWCDEXYCPr_0s58NJDs9mCVmlc5ps.jpg?auto=webp&amp;s=dfecf57dd6a273d4090e6ef73f5842f3e2ee0548",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/ffXy1fcnN-teI3NWCDEXYCPr_0s58NJDs9mCVmlc5ps.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=bffe850b7e9e14d330864055cad54a72bd58840a",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/ffXy1fcnN-teI3NWCDEXYCPr_0s58NJDs9mCVmlc5ps.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=6505f988e5976a6fef6e9886644a39a737909191",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/ffXy1fcnN-teI3NWCDEXYCPr_0s58NJDs9mCVmlc5ps.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=2f2366ef54b81dd5b96f03498c0559f794a87b35",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/ffXy1fcnN-teI3NWCDEXYCPr_0s58NJDs9mCVmlc5ps.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=3354c561b5953b24942eadc36faed0af8dbf0518",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/ffXy1fcnN-teI3NWCDEXYCPr_0s58NJDs9mCVmlc5ps.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=08b71ea34e616ba4ced5d9bb30f4d8b420b024a1",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/ffXy1fcnN-teI3NWCDEXYCPr_0s58NJDs9mCVmlc5ps.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=698ec57f2114a427686e3d1454dda915189a19f4",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "KiNOervCEZXPDQdQlis7gDcERBsvwLUAD21tsy8rgcI"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gkhl3c",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "probello",
            "discussion_type": null,
            "num_comments": 3,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gkhl3c/parscrape_v047_released/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gkhl3c/parscrape_v047_released/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730841405.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "**What my project does:**\n\n**Dendrite** is a simple framework for interacting with websites using natural language. Interact and extract without having to find brittle css selectors or xpaths like this:\n\n    browser.click(“the sign in button”)\n\nFor the developers who like their code typed, specify what data you want with a Pydantic BaseModel and Dendrite returns it in that format with one simple function call. Built on top of playwright for a robust experience. This is an easy way to give your AI agents the same web browsing capabilities as humans have. Integrates easily with frameworks such as  Langchain, CrewAI, Llamaindex and more. \n\nWe are planning on **open sourcing** everything soon as well so feel free to reach out to us if you’re interested in contributing!\n\nGithub: [https://github.com/dendrite-systems/dendrite-python-sdk](https://github.com/dendrite-systems/dendrite-python-sdk)\n\n**Overview**\n\n* **Authenticate Anywhere**: Dendrite Vault, our Chrome extension, handles secure authentication, letting your agents log in to almost any website.\n* **Interact Naturally**: With natural language commands, agents can click, type, and navigate through web elements with ease.\n* **Extract and Manipulate Data**: Collect structured data from websites, return data from different websites in the same structure without having to maintain different scripts.\n* **Download/Upload Files**: Effortlessly manage file interactions to and from websites, equipping agents to handle documents, reports, and more.\n* **Resilient Interactions**: Dendrite's interactions are designed to be resilient, adapting to minor changes in website structure to prevent workflows from breaking\n* **Full Compatibility**: Works with popular tools like LangChain and CrewAI, letting you seamlessly integrate Dendrite’s capabilities into your AI workflows.\n\n**Target Audience:**\n\n* Automation developers\n* Webscraping people\n* Web AI agent developers\n* QA engineers\n\n**Comparison:**\n\nThere are some frameworks for scraping information from websites with natural language prompts but there are no real alternatives when it comes to interacting with the websites as well as accessing data behind authentication. The most similar alternative would be something like Multion or some other fully autonomous agent framework that doesn't really work",
            "author_fullname": "t2_8a26kyve",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Dendrite: Interact with websites with natural language instead of using css selectors",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gkg23q",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.84,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 50,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 50,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730837500.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;What my project does:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Dendrite&lt;/strong&gt; is a simple framework for interacting with websites using natural language. Interact and extract without having to find brittle css selectors or xpaths like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;browser.click(“the sign in button”)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For the developers who like their code typed, specify what data you want with a Pydantic BaseModel and Dendrite returns it in that format with one simple function call. Built on top of playwright for a robust experience. This is an easy way to give your AI agents the same web browsing capabilities as humans have. Integrates easily with frameworks such as  Langchain, CrewAI, Llamaindex and more. &lt;/p&gt;\n\n&lt;p&gt;We are planning on &lt;strong&gt;open sourcing&lt;/strong&gt; everything soon as well so feel free to reach out to us if you’re interested in contributing!&lt;/p&gt;\n\n&lt;p&gt;Github: &lt;a href=\"https://github.com/dendrite-systems/dendrite-python-sdk\"&gt;https://github.com/dendrite-systems/dendrite-python-sdk&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Authenticate Anywhere&lt;/strong&gt;: Dendrite Vault, our Chrome extension, handles secure authentication, letting your agents log in to almost any website.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Interact Naturally&lt;/strong&gt;: With natural language commands, agents can click, type, and navigate through web elements with ease.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Extract and Manipulate Data&lt;/strong&gt;: Collect structured data from websites, return data from different websites in the same structure without having to maintain different scripts.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Download/Upload Files&lt;/strong&gt;: Effortlessly manage file interactions to and from websites, equipping agents to handle documents, reports, and more.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Resilient Interactions&lt;/strong&gt;: Dendrite&amp;#39;s interactions are designed to be resilient, adapting to minor changes in website structure to prevent workflows from breaking&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Full Compatibility&lt;/strong&gt;: Works with popular tools like LangChain and CrewAI, letting you seamlessly integrate Dendrite’s capabilities into your AI workflows.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Automation developers&lt;/li&gt;\n&lt;li&gt;Webscraping people&lt;/li&gt;\n&lt;li&gt;Web AI agent developers&lt;/li&gt;\n&lt;li&gt;QA engineers&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;There are some frameworks for scraping information from websites with natural language prompts but there are no real alternatives when it comes to interacting with the websites as well as accessing data behind authentication. The most similar alternative would be something like Multion or some other fully autonomous agent framework that doesn&amp;#39;t really work&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/YG2jJvxfgHPkgR0QlJ76PNoJ3W85c3iaaRR-_ukjC6w.jpg?auto=webp&amp;s=26ef7fead5e92f6795339cf15e49ffb1e651c639",
                            "width": 1119,
                            "height": 559
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/YG2jJvxfgHPkgR0QlJ76PNoJ3W85c3iaaRR-_ukjC6w.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=98907d3951cda34228d1e0c505e38528091c0da9",
                                "width": 108,
                                "height": 53
                            },
                            {
                                "url": "https://external-preview.redd.it/YG2jJvxfgHPkgR0QlJ76PNoJ3W85c3iaaRR-_ukjC6w.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=f5c7cedbf5062a535167d91d815af9a846307e67",
                                "width": 216,
                                "height": 107
                            },
                            {
                                "url": "https://external-preview.redd.it/YG2jJvxfgHPkgR0QlJ76PNoJ3W85c3iaaRR-_ukjC6w.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=65ea6feeab4a7bb1223b73fdf2b13daefeb0f13d",
                                "width": 320,
                                "height": 159
                            },
                            {
                                "url": "https://external-preview.redd.it/YG2jJvxfgHPkgR0QlJ76PNoJ3W85c3iaaRR-_ukjC6w.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=88ca091a5311f5fa951667d2bd4e574a86fad821",
                                "width": 640,
                                "height": 319
                            },
                            {
                                "url": "https://external-preview.redd.it/YG2jJvxfgHPkgR0QlJ76PNoJ3W85c3iaaRR-_ukjC6w.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=e150c9c53a6d739004cbe8a8c1dc441895e8aa35",
                                "width": 960,
                                "height": 479
                            },
                            {
                                "url": "https://external-preview.redd.it/YG2jJvxfgHPkgR0QlJ76PNoJ3W85c3iaaRR-_ukjC6w.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=8e7d271cd79c06760094dc9f84b738b3fac7a024",
                                "width": 1080,
                                "height": 539
                            }
                        ],
                        "variants": {},
                        "id": "72be91ixw7h03e4mqPGrA--G3jjcXSQb2tVtLdiieFQ"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gkg23q",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "rivernotch",
            "discussion_type": null,
            "num_comments": 13,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gkg23q/dendrite_interact_with_websites_with_natural/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gkg23q/dendrite_interact_with_websites_with_natural/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730837500.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "[https://codspeed.io/blog/state-of-python-3-13-performance-free-threading](https://codspeed.io/blog/state-of-python-3-13-performance-free-threading)",
            "author_fullname": "t2_1mytprla",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Blog Post: State of Python 3.13 Performance: Free-Threading",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "News"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "news",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gk6azd",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.94,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 98,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "News",
            "can_mod_post": false,
            "score": 98,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730812225.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://codspeed.io/blog/state-of-python-3-13-performance-free-threading\"&gt;https://codspeed.io/blog/state-of-python-3-13-performance-free-threading&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/XEo319aM6n9IZYkyvG0bZvg7UoQUVXjhKrS5t375w2I.jpg?auto=webp&amp;s=d84cf280bd2b283e7b8a5ef3c675066be208686e",
                            "width": 2400,
                            "height": 1200
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/XEo319aM6n9IZYkyvG0bZvg7UoQUVXjhKrS5t375w2I.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=11dbcbb13091a78ce50595e83822c5f71a9b9933",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/XEo319aM6n9IZYkyvG0bZvg7UoQUVXjhKrS5t375w2I.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=abd7e589699a32854764ec50b5ca2894b97e7bb2",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/XEo319aM6n9IZYkyvG0bZvg7UoQUVXjhKrS5t375w2I.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=dae726a18ce29510b85ba8b9c13625f4b90e54f7",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/XEo319aM6n9IZYkyvG0bZvg7UoQUVXjhKrS5t375w2I.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=924fa3e0aff76d14c8a24eeb17c978fd98533095",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/XEo319aM6n9IZYkyvG0bZvg7UoQUVXjhKrS5t375w2I.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=ff5fbb00f229344acc310ce13c1918dc45c81ac1",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/XEo319aM6n9IZYkyvG0bZvg7UoQUVXjhKrS5t375w2I.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=eb02b3d2490fb985f1bfc69c663073e18b40ef75",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "3gEbWAjqeh2bxP6TYJ1Hb6toAeLYhzENX0Tarr7U_JQ"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#7193ff",
            "id": "1gk6azd",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "arty049",
            "discussion_type": null,
            "num_comments": 5,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gk6azd/blog_post_state_of_python_313_performance/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gk6azd/blog_post_state_of_python_313_performance/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730812225.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Until this moment I had using Render which provides a free limited plan for deoloying Python or any other API, pythonanywhere is another option which allow deploying for free.\n\nIf you're testing a project you need to deploy the API, where you do it for free?",
            "author_fullname": "t2_cpvk2mop",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "What Free Host Providers do you Use for deploying RESTful API ?",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gk5ayh",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.85,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 54,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 54,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730809001.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Until this moment I had using Render which provides a free limited plan for deoloying Python or any other API, pythonanywhere is another option which allow deploying for free.&lt;/p&gt;\n\n&lt;p&gt;If you&amp;#39;re testing a project you need to deploy the API, where you do it for free?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gk5ayh",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "RemoteIllustrious164",
            "discussion_type": null,
            "num_comments": 32,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gk5ayh/what_free_host_providers_do_you_use_for_deploying/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gk5ayh/what_free_host_providers_do_you_use_for_deploying/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730809001.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "A git repo of code samples is linked below. The repo includes a README with links to 3 tutorials that demonstrate async network programming using the python modules in the repo;\n\n\\* A Quality Python Server In 10 Minutes\n\n\\* Python Networking On Steroids\n\n\\* Writing Python Servers That Know About Service Expectations\n\nIf you have spent time in this space then you will have had the sync/async debates and will be aware of the motivations to go async. This goes beyond the use of Python async primtives and into multi-step, distributed, async transactions. If you are looking for a toolset designed to be async from the bottom up, or just curious about a different way to tackle this space, these just might be useful reads.\n\n[https://github.com/mr-ansar/from-sketches-to-networking-code](https://github.com/mr-ansar/from-sketches-to-networking-code)\n\nIf there is another way to tackle the same scope as the three tutorials - in a similar number of code lines and with similar code clarity - I would be pleased to be pointed in that direction.",
            "author_fullname": "t2_a5ojanoo",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Python Async Networking Tutorials: Clarity, Concurrency and Load Management",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Tutorial"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "tutorial",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gjv650",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.77,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 9,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Tutorial",
            "can_mod_post": false,
            "score": 9,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730770076.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;A git repo of code samples is linked below. The repo includes a README with links to 3 tutorials that demonstrate async network programming using the python modules in the repo;&lt;/p&gt;\n\n&lt;p&gt;* A Quality Python Server In 10 Minutes&lt;/p&gt;\n\n&lt;p&gt;* Python Networking On Steroids&lt;/p&gt;\n\n&lt;p&gt;* Writing Python Servers That Know About Service Expectations&lt;/p&gt;\n\n&lt;p&gt;If you have spent time in this space then you will have had the sync/async debates and will be aware of the motivations to go async. This goes beyond the use of Python async primtives and into multi-step, distributed, async transactions. If you are looking for a toolset designed to be async from the bottom up, or just curious about a different way to tackle this space, these just might be useful reads.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/mr-ansar/from-sketches-to-networking-code\"&gt;https://github.com/mr-ansar/from-sketches-to-networking-code&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If there is another way to tackle the same scope as the three tutorials - in a similar number of code lines and with similar code clarity - I would be pleased to be pointed in that direction.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/gT6WdVP2DSQpR0ET6z2d91BY4ycjkYdyJpcKnh8B2xM.jpg?auto=webp&amp;s=0cc22143be77628156c954061ffe7cf045615950",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/gT6WdVP2DSQpR0ET6z2d91BY4ycjkYdyJpcKnh8B2xM.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=6b41e463fef3e9d3bbb6a29c39c3f93e9f30ec09",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/gT6WdVP2DSQpR0ET6z2d91BY4ycjkYdyJpcKnh8B2xM.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=cd6cc9d467f505f0c5c38a85002c2e0cc01f3a1e",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/gT6WdVP2DSQpR0ET6z2d91BY4ycjkYdyJpcKnh8B2xM.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=82772e8c2184bfcdd1deee37577f07e9aa33f49f",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/gT6WdVP2DSQpR0ET6z2d91BY4ycjkYdyJpcKnh8B2xM.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=1f99458f0aa37b084dfcbdbcd98f01a89a395bce",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/gT6WdVP2DSQpR0ET6z2d91BY4ycjkYdyJpcKnh8B2xM.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=50b7f37fa6e71a7945c4ebb3812acb52516bc52e",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/gT6WdVP2DSQpR0ET6z2d91BY4ycjkYdyJpcKnh8B2xM.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=08f13dd99871834af787764be3636638564531d0",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "QCPh6dSg6dMkVUcN1o_sCLswHYz2RE44B_WNMYb_2xY"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#dadada",
            "id": "1gjv650",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Public_Being3163",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gjv650/python_async_networking_tutorials_clarity/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gjv650/python_async_networking_tutorials_clarity/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730770076.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": " **What My Project Does**\n\nOpenSceneSense-Ollama is a powerful Python package designed for privacy-focused video analysis directly on your local machine. With this tool, you can leverage Ollama’s local models to analyze frames, transcribe audio, dynamically select key frames, and generate detailed summaries — all without relying on cloud-based APIs. It’s ideal for those needing rich, insightful analysis of video content while ensuring data privacy and minimizing usage costs.\n\n **Target Audience**\n\nThis project is tailored for \\*\\*developers, researchers, data scientists, and privacy-conscious users\\*\\* who require in-depth, locally processed video analysis. It's perfect for applications where data security is critical, including:\n\n\\- Content creation workflows that need automatic video summarization\n\n\\- Researchers building labeled datasets for machine learning\n\n\\- Platforms needing context-rich content moderation\n\n\\- Offline projects in remote or restricted environments\n\n **Comparison**\n\nOpenSceneSense-Ollama goes beyond traditional video analysis tools that often separate frame and audio analysis. Instead, it integrates both visual and audio elements, allowing users to prompt the models to produce comprehensive summaries and in-depth contextual insights. Where most tools might identify objects or transcribe audio separately, OpenSceneSense-Ollama unifies these components into narrative summaries, making it ideal for richer datasets or more nuanced content moderation.\n\n**Getting Started**\n\nTo begin using OpenSceneSense-Ollama:\n\n1. Prerequisites: Make sure you have Python 3.10+, FFmpeg, PyTorch and Ollama installed on your machine.\n\n2. Install with pip: Run \\`pip install openscenesense-ollama\\` to install the package.\n\n3. Configuration: Start analyzing video with customizable prompts, frame selection, and audio transcription.\n\n\n\nFeel free to dive in, try it out, and share your feedback  especially if you're working in AI, privacy-focused applications, or video content moderation. Let’s build a powerful, local solution for meaningful video analysis!\n\n[https://github.com/ymrohit/openscenesense-ollama](https://github.com/ymrohit/openscenesense-ollama)",
            "author_fullname": "t2_24vrj5ub",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Video Input for your local LLMS",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gjua54",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.67,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 3,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 3,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730767546.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;OpenSceneSense-Ollama is a powerful Python package designed for privacy-focused video analysis directly on your local machine. With this tool, you can leverage Ollama’s local models to analyze frames, transcribe audio, dynamically select key frames, and generate detailed summaries — all without relying on cloud-based APIs. It’s ideal for those needing rich, insightful analysis of video content while ensuring data privacy and minimizing usage costs.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This project is tailored for **developers, researchers, data scientists, and privacy-conscious users** who require in-depth, locally processed video analysis. It&amp;#39;s perfect for applications where data security is critical, including:&lt;/p&gt;\n\n&lt;p&gt;- Content creation workflows that need automatic video summarization&lt;/p&gt;\n\n&lt;p&gt;- Researchers building labeled datasets for machine learning&lt;/p&gt;\n\n&lt;p&gt;- Platforms needing context-rich content moderation&lt;/p&gt;\n\n&lt;p&gt;- Offline projects in remote or restricted environments&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;OpenSceneSense-Ollama goes beyond traditional video analysis tools that often separate frame and audio analysis. Instead, it integrates both visual and audio elements, allowing users to prompt the models to produce comprehensive summaries and in-depth contextual insights. Where most tools might identify objects or transcribe audio separately, OpenSceneSense-Ollama unifies these components into narrative summaries, making it ideal for richer datasets or more nuanced content moderation.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Getting Started&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;To begin using OpenSceneSense-Ollama:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Prerequisites: Make sure you have Python 3.10+, FFmpeg, PyTorch and Ollama installed on your machine.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Install with pip: Run `pip install openscenesense-ollama` to install the package.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Configuration: Start analyzing video with customizable prompts, frame selection, and audio transcription.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Feel free to dive in, try it out, and share your feedback  especially if you&amp;#39;re working in AI, privacy-focused applications, or video content moderation. Let’s build a powerful, local solution for meaningful video analysis!&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/ymrohit/openscenesense-ollama\"&gt;https://github.com/ymrohit/openscenesense-ollama&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/x1Y6Mf62wd9iP-AAlvcT0_UUyQeURCZNTkrvbouQdKs.jpg?auto=webp&amp;s=8067153aeea5e6caee12fda3fb3c67dcb72273a8",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/x1Y6Mf62wd9iP-AAlvcT0_UUyQeURCZNTkrvbouQdKs.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=d9eb434c3eb15bba2bcb169d683e6e3fee88a1e8",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/x1Y6Mf62wd9iP-AAlvcT0_UUyQeURCZNTkrvbouQdKs.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=34e65b054fd4c28f268de7a23b7787d6ec8b5315",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/x1Y6Mf62wd9iP-AAlvcT0_UUyQeURCZNTkrvbouQdKs.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=bccab574471c5cb8cb22cd9c78b50118c8072ad9",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/x1Y6Mf62wd9iP-AAlvcT0_UUyQeURCZNTkrvbouQdKs.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=9379f7fa82e01e4db2acbdbb8f0449557e30e484",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/x1Y6Mf62wd9iP-AAlvcT0_UUyQeURCZNTkrvbouQdKs.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=1544fb89bc28a5f1b77b921c761e04cdd0b04c4f",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/x1Y6Mf62wd9iP-AAlvcT0_UUyQeURCZNTkrvbouQdKs.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=02af7a2d2a2d78ab099e731485cbef9b0370baf5",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "WLKrDV4kX2KZXirUlMpQ2ig4p10aiYRqkI9O1iVoJxc"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gjua54",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "rohit3627",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gjua54/video_input_for_your_local_llms/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gjua54/video_input_for_your_local_llms/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730767546.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# Weekly Wednesday Thread: Advanced Questions 🐍\n\nDive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.\n\n## How it Works:\n\n1. **Ask Away**: Post your advanced Python questions here.\n2. **Expert Insights**: Get answers from experienced developers.\n3. **Resource Pool**: Share or discover tutorials, articles, and tips.\n\n## Guidelines:\n\n* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.\n* Questions that are not advanced may be removed and redirected to the appropriate thread.\n\n## Recommended Resources:\n\n* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.\n\n## Example Questions:\n\n1. **How can you implement a custom memory allocator in Python?**\n2. **What are the best practices for optimizing Cython code for heavy numerical computations?**\n3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**\n4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**\n5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**\n6. **What are some advanced use-cases for Python's decorators?**\n7. **How can you achieve real-time data streaming in Python with WebSockets?**\n8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**\n9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**\n10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**\n\nLet's deepen our Python knowledge together. Happy coding! 🌟",
            "author_fullname": "t2_6l4z3",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Tuesday Daily Thread: Advanced questions",
            "link_flair_richtext": [
                {
                    "a": ":pythonLogo:",
                    "e": "emoji",
                    "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                },
                {
                    "e": "text",
                    "t": " Daily Thread"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "daily-thread",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gjtaue",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.83,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 7,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": ":pythonLogo: Daily Thread",
            "can_mod_post": false,
            "score": 7,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": true,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730764814.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Wednesday Thread: Advanced Questions 🐍&lt;/h1&gt;\n\n&lt;p&gt;Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Ask Away&lt;/strong&gt;: Post your advanced Python questions here.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Expert Insights&lt;/strong&gt;: Get answers from experienced developers.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Resource Pool&lt;/strong&gt;: Share or discover tutorials, articles, and tips.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This thread is for &lt;strong&gt;advanced questions only&lt;/strong&gt;. Beginner questions are welcome in our &lt;a href=\"#daily-beginner-thread-link\"&gt;Daily Beginner Thread&lt;/a&gt; every Thursday.&lt;/li&gt;\n&lt;li&gt;Questions that are not advanced may be removed and redirected to the appropriate thread.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Recommended Resources:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If you don&amp;#39;t receive a response, consider exploring &lt;a href=\"/r/LearnPython\"&gt;r/LearnPython&lt;/a&gt; or join the &lt;a href=\"https://discord.gg/python\"&gt;Python Discord Server&lt;/a&gt; for quicker assistance.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Questions:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;How can you implement a custom memory allocator in Python?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are the best practices for optimizing Cython code for heavy numerical computations?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How do you set up a multi-threaded architecture using Python&amp;#39;s Global Interpreter Lock (GIL)?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How would you go about implementing a distributed task queue using Celery and RabbitMQ?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are some advanced use-cases for Python&amp;#39;s decorators?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How can you achieve real-time data streaming in Python with WebSockets?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Best practices for securing a Flask (or similar) REST API with OAuth 2.0?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Let&amp;#39;s deepen our Python knowledge together. Happy coding! 🌟&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?auto=webp&amp;s=77877e508cacc3a5c51009b26cc51fd08031ca76",
                            "width": 512,
                            "height": 288
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=c5fbdf8efb5e6f14fe03845466b74ba9ebab4413",
                                "width": 108,
                                "height": 60
                            },
                            {
                                "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d57848912389eb70e32659895710a7c322a93edf",
                                "width": 216,
                                "height": 121
                            },
                            {
                                "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=86d869d6c6e16a13c5cf960ab69d7d274b49ff16",
                                "width": 320,
                                "height": 180
                            }
                        ],
                        "variants": {},
                        "id": "aNa9dCzuqtUFBkZTt98jjYpcv1i_lqriq_lbtm_LcRo"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": "moderator",
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#00a6a5",
            "id": "1gjtaue",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "AutoModerator",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": false,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gjtaue/tuesday_daily_thread_advanced_questions/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gjtaue/tuesday_daily_thread_advanced_questions/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730764814.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hey r/python! I wanted to share Kew, a task queue library built specifically for FastAPI and other modern async Python applications.\n\n**What My Project Does**\n\nKew is an async-native task queue that runs directly in your FastAPI process. No separate workers, no sync/async bridges, no process pools - just clean async code end-to-end. It provides:\n\n* True concurrency control using semaphores (if you set 4 workers, you get exactly 4)\n* Priority queues with millisecond-precision scheduling\n* Built-in circuit breakers for handling service outages\n* Redis-backed persistence for reliability\n\n**Quick example:**\n\nfrom kew import TaskQueueManager, QueueConfig, QueuePriority\n\nasync def process\\_payment(order\\_id: str):\n\nawait charge\\_customer(order\\_id)\n\nreturn \"success\"\n\n\\# Create a high-priority queue with concurrent processing\n\nawait manager.create\\_queue(QueueConfig(\n\nname=\"payments\",\n\nmax\\_workers=4,  # Strictly enforced!\n\npriority=QueuePriority.HIGH\n\n))\n\n\\# Submit tasks naturally in your FastAPI endpoints\n\nu/app.post(\"/orders/{order\\_id}/process\")\n\nasync def process\\_order(order\\_id: str):\n\nawait manager.submit\\_task(\n\ntask\\_id=f\"payment-{order\\_id}\",\n\nqueue\\_name=\"payments\",\n\ntask\\_func=process\\_payment,\n\norder\\_id=order\\_id\n\n)\n\n**Target Audience**\n\nThis is a production-ready task queue specifically designed for:\n\n\\- Teams building FastAPI microservices who are tired of running separate Celery workers\n\n\\- Applications that need reliable concurrent task processing\n\n\\- Projects where managing separate worker processes adds unnecessary complexity\n\n\\- Systems that need robust error handling with circuit breakers\n\nCurrently running in production handling millions of tasks daily.\n\n**Comparison to Existing Solutions**\n\nThe key difference is that Kew is built for the async world. Here's how it compares:\n\n**Celery/RQ/Huey**: All require separate worker processes and weren't designed for async. Using them with FastAPI means:\n\n\\- Running and managing separate worker processes\n\n\\- Complex sync/async context switching\n\n\\- No native async support\n\n\\- Worker processes that can leak or exceed limits\n\n**Kew**: Built from the ground up for async:\n\n\\- Runs directly in your FastAPI process\n\n\\- Native async/await support throughout\n\n\\- True semaphore-based concurrency control\n\n\\- Clean async context propagation\n\n\\- Works naturally with FastAPI's dependency injection\n\n**Installation &amp; Links:**\n\n\n\n\\`pip install kew\\`\n\n\n\n\\- \\[GitHub\\](https://github.com/justrach/kew)\n\n\\- \\[Docs\\](in progress)\n\n\\- \\[PyPI\\](https://pypi.org/project/kew/)\n\nHappy to answer any questions about implementation details or design decisions!",
            "author_fullname": "t2_ircn9",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": " Introducing Kew: A Modern Async Task Queue Built for FastAPI and Modern Python",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gjozxb",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.81,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 12,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 12,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1730759220.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730753724.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey &lt;a href=\"/r/python\"&gt;r/python&lt;/a&gt;! I wanted to share Kew, a task queue library built specifically for FastAPI and other modern async Python applications.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Kew is an async-native task queue that runs directly in your FastAPI process. No separate workers, no sync/async bridges, no process pools - just clean async code end-to-end. It provides:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;True concurrency control using semaphores (if you set 4 workers, you get exactly 4)&lt;/li&gt;\n&lt;li&gt;Priority queues with millisecond-precision scheduling&lt;/li&gt;\n&lt;li&gt;Built-in circuit breakers for handling service outages&lt;/li&gt;\n&lt;li&gt;Redis-backed persistence for reliability&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Quick example:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;from kew import TaskQueueManager, QueueConfig, QueuePriority&lt;/p&gt;\n\n&lt;p&gt;async def process_payment(order_id: str):&lt;/p&gt;\n\n&lt;p&gt;await charge_customer(order_id)&lt;/p&gt;\n\n&lt;p&gt;return &amp;quot;success&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;# Create a high-priority queue with concurrent processing&lt;/p&gt;\n\n&lt;p&gt;await manager.create_queue(QueueConfig(&lt;/p&gt;\n\n&lt;p&gt;name=&amp;quot;payments&amp;quot;,&lt;/p&gt;\n\n&lt;p&gt;max_workers=4,  # Strictly enforced!&lt;/p&gt;\n\n&lt;p&gt;priority=QueuePriority.HIGH&lt;/p&gt;\n\n&lt;p&gt;))&lt;/p&gt;\n\n&lt;p&gt;# Submit tasks naturally in your FastAPI endpoints&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"/u/app\"&gt;u/app&lt;/a&gt;.post(&amp;quot;/orders/{order_id}/process&amp;quot;)&lt;/p&gt;\n\n&lt;p&gt;async def process_order(order_id: str):&lt;/p&gt;\n\n&lt;p&gt;await manager.submit_task(&lt;/p&gt;\n\n&lt;p&gt;task_id=f&amp;quot;payment-{order_id}&amp;quot;,&lt;/p&gt;\n\n&lt;p&gt;queue_name=&amp;quot;payments&amp;quot;,&lt;/p&gt;\n\n&lt;p&gt;task_func=process_payment,&lt;/p&gt;\n\n&lt;p&gt;order_id=order_id&lt;/p&gt;\n\n&lt;p&gt;)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This is a production-ready task queue specifically designed for:&lt;/p&gt;\n\n&lt;p&gt;- Teams building FastAPI microservices who are tired of running separate Celery workers&lt;/p&gt;\n\n&lt;p&gt;- Applications that need reliable concurrent task processing&lt;/p&gt;\n\n&lt;p&gt;- Projects where managing separate worker processes adds unnecessary complexity&lt;/p&gt;\n\n&lt;p&gt;- Systems that need robust error handling with circuit breakers&lt;/p&gt;\n\n&lt;p&gt;Currently running in production handling millions of tasks daily.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison to Existing Solutions&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The key difference is that Kew is built for the async world. Here&amp;#39;s how it compares:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Celery/RQ/Huey&lt;/strong&gt;: All require separate worker processes and weren&amp;#39;t designed for async. Using them with FastAPI means:&lt;/p&gt;\n\n&lt;p&gt;- Running and managing separate worker processes&lt;/p&gt;\n\n&lt;p&gt;- Complex sync/async context switching&lt;/p&gt;\n\n&lt;p&gt;- No native async support&lt;/p&gt;\n\n&lt;p&gt;- Worker processes that can leak or exceed limits&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Kew&lt;/strong&gt;: Built from the ground up for async:&lt;/p&gt;\n\n&lt;p&gt;- Runs directly in your FastAPI process&lt;/p&gt;\n\n&lt;p&gt;- Native async/await support throughout&lt;/p&gt;\n\n&lt;p&gt;- True semaphore-based concurrency control&lt;/p&gt;\n\n&lt;p&gt;- Clean async context propagation&lt;/p&gt;\n\n&lt;p&gt;- Works naturally with FastAPI&amp;#39;s dependency injection&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Installation &amp;amp; Links:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;`pip install kew`&lt;/p&gt;\n\n&lt;p&gt;- [GitHub](&lt;a href=\"https://github.com/justrach/kew\"&gt;https://github.com/justrach/kew&lt;/a&gt;)&lt;/p&gt;\n\n&lt;p&gt;- [Docs](in progress)&lt;/p&gt;\n\n&lt;p&gt;- [PyPI](&lt;a href=\"https://pypi.org/project/kew/\"&gt;https://pypi.org/project/kew/&lt;/a&gt;)&lt;/p&gt;\n\n&lt;p&gt;Happy to answer any questions about implementation details or design decisions!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/AzKMT90gk63zhhvGkwkwIj_QOLwJP5lSEDRhG3Slh2A.jpg?auto=webp&amp;s=fd4be82b1d63ea50e087e626adc5005823ae4b77",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/AzKMT90gk63zhhvGkwkwIj_QOLwJP5lSEDRhG3Slh2A.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=fbee42b643de11513dfbbfc47cd5c3210a2c973f",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/AzKMT90gk63zhhvGkwkwIj_QOLwJP5lSEDRhG3Slh2A.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=4f7fe52deb1c346644e0a91201219547ae74be8c",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/AzKMT90gk63zhhvGkwkwIj_QOLwJP5lSEDRhG3Slh2A.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=0fb632ff1d1db0b8de70df147dfae85768a0a133",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/AzKMT90gk63zhhvGkwkwIj_QOLwJP5lSEDRhG3Slh2A.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=ee3401ca7b791aaba6889dfc5b79efa162e675ad",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/AzKMT90gk63zhhvGkwkwIj_QOLwJP5lSEDRhG3Slh2A.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=44a74939d85b0a06c90e8599abd6adc7bfa86fe8",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/AzKMT90gk63zhhvGkwkwIj_QOLwJP5lSEDRhG3Slh2A.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=f28bae6f6f953ae76fbcd37e7bcf3b8d7c637daa",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "H1v7OQzdnyWkMWau2cCexc85jBPdqHM1ySLQVszgczc"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gjozxb",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "CarbonoAtom",
            "discussion_type": null,
            "num_comments": 9,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gjozxb/introducing_kew_a_modern_async_task_queue_built/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gjozxb/introducing_kew_a_modern_async_task_queue_built/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730753724.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Ever wanted to create impactful scrollytelling stories like the ones you see in online news? \n\nScrollytelling stories let you explain complicated concepts to readers as they scroll down the page. You could build up a complicated plot layer-by-layer, zoom in on a famous map, highlight a key quote from an interviewee, or even animate your own web graphics.\n\n[Closeread](https://closeread.dev/) brings all of this and more to you inside Quarto. (Quarto &amp; Closeread are free and open source. Quarto is an open-source scientific and technical publishing system.)  \n\n\nWrite your data-driven story with code, and publish it to the web as a scrollytelling article.\n\nLearn more at [https://posit.co/blog/closeread-prize-announcement/](https://posit.co/blog/closeread-prize-announcement/)\n\nAnd let me know if you have any questions here or at the dev repo: [https://github.com/qmd-lab/closeread/discussions](https://github.com/qmd-lab/closeread/discussions)",
            "author_fullname": "t2_4cqj7",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Check out the Closeread Prize - data-driven Scrollytelling documents in Python",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "News"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "news",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gjo081",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.5,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "News",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730751276.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Ever wanted to create impactful scrollytelling stories like the ones you see in online news? &lt;/p&gt;\n\n&lt;p&gt;Scrollytelling stories let you explain complicated concepts to readers as they scroll down the page. You could build up a complicated plot layer-by-layer, zoom in on a famous map, highlight a key quote from an interviewee, or even animate your own web graphics.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://closeread.dev/\"&gt;Closeread&lt;/a&gt; brings all of this and more to you inside Quarto. (Quarto &amp;amp; Closeread are free and open source. Quarto is an open-source scientific and technical publishing system.)  &lt;/p&gt;\n\n&lt;p&gt;Write your data-driven story with code, and publish it to the web as a scrollytelling article.&lt;/p&gt;\n\n&lt;p&gt;Learn more at &lt;a href=\"https://posit.co/blog/closeread-prize-announcement/\"&gt;https://posit.co/blog/closeread-prize-announcement/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;And let me know if you have any questions here or at the dev repo: &lt;a href=\"https://github.com/qmd-lab/closeread/discussions\"&gt;https://github.com/qmd-lab/closeread/discussions&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#7193ff",
            "id": "1gjo081",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "economicurtis",
            "discussion_type": null,
            "num_comments": 1,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gjo081/check_out_the_closeread_prize_datadriven/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gjo081/check_out_the_closeread_prize_datadriven/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730751276.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I use python and alteryx at my job. I love how it’s easy to debug in Alteryx because you can check how your data looks after each tool. I know IDEs like Spyder have a nice debug mode but what happens when we’re debugging a pandas dataframe and want to see how the data changes after each line of your code? I was wondering if there are any graphical debuggers that can show you how your data looks like after each point similar to the way Alteryx is set up. Maybe there’s something even better than a graphical debugger? Looking for insight! Thanks!",
            "author_fullname": "t2_4u1o4jeg",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Python debugging like Alteryx",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gjn3ku",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.82,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 13,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 13,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730749069.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I use python and alteryx at my job. I love how it’s easy to debug in Alteryx because you can check how your data looks after each tool. I know IDEs like Spyder have a nice debug mode but what happens when we’re debugging a pandas dataframe and want to see how the data changes after each line of your code? I was wondering if there are any graphical debuggers that can show you how your data looks like after each point similar to the way Alteryx is set up. Maybe there’s something even better than a graphical debugger? Looking for insight! Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gjn3ku",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Suspicious_Ad4412",
            "discussion_type": null,
            "num_comments": 7,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gjn3ku/python_debugging_like_alteryx/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gjn3ku/python_debugging_like_alteryx/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730749069.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "The article below explores how one can achieve up to 9 times higher performance in model serving without investing in new hardware. It uses ONNX Runtime and Rust to show significant improvements in performance and deployment efficiency:\n\n[https://martynassubonis.substack.com/p/optimize-for-speed-and-savings-high](https://martynassubonis.substack.com/p/optimize-for-speed-and-savings-high)",
            "author_fullname": "t2_17h8mq",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Lightweight Model Serving",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Resource"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "resource",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gjlwxx",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.81,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 3,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Resource",
            "can_mod_post": false,
            "score": 3,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730746164.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The article below explores how one can achieve up to 9 times higher performance in model serving without investing in new hardware. It uses ONNX Runtime and Rust to show significant improvements in performance and deployment efficiency:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://martynassubonis.substack.com/p/optimize-for-speed-and-savings-high\"&gt;https://martynassubonis.substack.com/p/optimize-for-speed-and-savings-high&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/Nj9FWOSUO8cQYFv-vA5t-Vnr6JTKRu6vGvDU0a-kKDQ.jpg?auto=webp&amp;s=96adaccc15ab6ba24ab771c1dd6a446c8404bcb0",
                            "width": 1024,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/Nj9FWOSUO8cQYFv-vA5t-Vnr6JTKRu6vGvDU0a-kKDQ.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=8c1fdd8f8005cc1dfdfe2115e1729550b94d66c3",
                                "width": 108,
                                "height": 63
                            },
                            {
                                "url": "https://external-preview.redd.it/Nj9FWOSUO8cQYFv-vA5t-Vnr6JTKRu6vGvDU0a-kKDQ.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=78d9a64aa30ea70ca37511e218a96cf003f84101",
                                "width": 216,
                                "height": 126
                            },
                            {
                                "url": "https://external-preview.redd.it/Nj9FWOSUO8cQYFv-vA5t-Vnr6JTKRu6vGvDU0a-kKDQ.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=4c24fca435b492ac80b295c5e6cd98155779bbd4",
                                "width": 320,
                                "height": 187
                            },
                            {
                                "url": "https://external-preview.redd.it/Nj9FWOSUO8cQYFv-vA5t-Vnr6JTKRu6vGvDU0a-kKDQ.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=90b09aa03292c388d2d74bb49c90b8d9d85d7a27",
                                "width": 640,
                                "height": 375
                            },
                            {
                                "url": "https://external-preview.redd.it/Nj9FWOSUO8cQYFv-vA5t-Vnr6JTKRu6vGvDU0a-kKDQ.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=2fc881da16bfc4a48c1573a2a90f96b49aaecd37",
                                "width": 960,
                                "height": 562
                            }
                        ],
                        "variants": {},
                        "id": "M7pKzHrf1PMtkDDUFViv14M-PkZl-Uz0xlApkvPz8EM"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ddbd37",
            "id": "1gjlwxx",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Martynoas",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gjlwxx/lightweight_model_serving/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gjlwxx/lightweight_model_serving/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730746164.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hey guys, I made this app because I love choir\n\nWhat My Project Does:\n\nIt takes audio files from a specified directory on your device and makes it available on a specified port for everyone in your local network, anyone in the network can play the music from your device but that's not the cool part, the cool part is people can create groups(I call them hives), the admin will play music and the same audio will play on every hive member's device in sync, makes it sound like choir. It also has features like hive-chat, user profile and maybe other features I don't remember.\n\nPlease check it out and let me know if you have any suggestions.\nhttps://github.com/n1teshy/cicada",
            "author_fullname": "t2_exu8rceu",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "cicada: share your music and play your music on multiple devices in sync",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gjlkip",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.84,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 8,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 8,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1730746823.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730745316.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey guys, I made this app because I love choir&lt;/p&gt;\n\n&lt;p&gt;What My Project Does:&lt;/p&gt;\n\n&lt;p&gt;It takes audio files from a specified directory on your device and makes it available on a specified port for everyone in your local network, anyone in the network can play the music from your device but that&amp;#39;s not the cool part, the cool part is people can create groups(I call them hives), the admin will play music and the same audio will play on every hive member&amp;#39;s device in sync, makes it sound like choir. It also has features like hive-chat, user profile and maybe other features I don&amp;#39;t remember.&lt;/p&gt;\n\n&lt;p&gt;Please check it out and let me know if you have any suggestions.\n&lt;a href=\"https://github.com/n1teshy/cicada\"&gt;https://github.com/n1teshy/cicada&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/rnuhxoiWOcCgv4y12iGelKoVkeO6YNTfKKUidrNgBlU.jpg?auto=webp&amp;s=fce6f5a5a7435a6244b5570c441fad621b47778b",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/rnuhxoiWOcCgv4y12iGelKoVkeO6YNTfKKUidrNgBlU.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=7395c472d515821b5b0504a81ab285da8674d077",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/rnuhxoiWOcCgv4y12iGelKoVkeO6YNTfKKUidrNgBlU.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=6c5570c0959ff9c446cc1e78b1ea2a056be26fa2",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/rnuhxoiWOcCgv4y12iGelKoVkeO6YNTfKKUidrNgBlU.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=58ea072c1854b494f6f1f75db4829e98c2923a27",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/rnuhxoiWOcCgv4y12iGelKoVkeO6YNTfKKUidrNgBlU.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=83a3944d25579686b3ec56a33433d41f800c2d85",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/rnuhxoiWOcCgv4y12iGelKoVkeO6YNTfKKUidrNgBlU.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=8ca892986cbff031f560baa51aafd13c8d0601b4",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/rnuhxoiWOcCgv4y12iGelKoVkeO6YNTfKKUidrNgBlU.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=ce1a165c7a446435344b27f00d50df04561dd4e1",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "RIRkupSjcjkLFOS6IsK79diGNWgaMl5da4ZupRkRGlw"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gjlkip",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Specialist_Ruin_9333",
            "discussion_type": null,
            "num_comments": 12,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gjlkip/cicada_share_your_music_and_play_your_music_on/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gjlkip/cicada_share_your_music_and_play_your_music_on/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730745316.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hey everyone!\n\nWe received a lot of encouraging feedback from you and used it to improve our framework. For all who are not familiar with our framework, Rio is an easy-to-use framework for creating websites and apps which is based entirely on Python.\n\nFrom all the feedback the most common question we've encountered is, \"How does Rio actually work?\" Last time we shared our concept about components (what are components, how does observing attributes, diffing, and reconciliation work).\n\nNow we want to share our concept of our own fresh layouting system for Rio. In our wiki we share our thoughts on:\n\n* What Makes a Great Layout System\n* Our system in Rio with a 2-step-approach\n* Limitations of our approach\n\nFeel free to check out our Wiki on our [Layouting System](https://github.com/rio-labs/rio/wiki/Layouting-System).\n\nTake a look at our playground, where you can try out our layout concept firsthand with just a click and receive real-time feedback: [Rio - Layouting Quickstart](https://rio.dev/docs/howto/layout-guide)\n\nThanks and we are looking forward to your feedback! :)\n\n[Github: Rio](https://github.com/rio-labs/rio)",
            "author_fullname": "t2_4ooyettc",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Rio: WebApps in pure Python – A fresh Layouting System",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gjgcsf",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.93,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 94,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 94,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730732608.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey everyone!&lt;/p&gt;\n\n&lt;p&gt;We received a lot of encouraging feedback from you and used it to improve our framework. For all who are not familiar with our framework, Rio is an easy-to-use framework for creating websites and apps which is based entirely on Python.&lt;/p&gt;\n\n&lt;p&gt;From all the feedback the most common question we&amp;#39;ve encountered is, &amp;quot;How does Rio actually work?&amp;quot; Last time we shared our concept about components (what are components, how does observing attributes, diffing, and reconciliation work).&lt;/p&gt;\n\n&lt;p&gt;Now we want to share our concept of our own fresh layouting system for Rio. In our wiki we share our thoughts on:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;What Makes a Great Layout System&lt;/li&gt;\n&lt;li&gt;Our system in Rio with a 2-step-approach&lt;/li&gt;\n&lt;li&gt;Limitations of our approach&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Feel free to check out our Wiki on our &lt;a href=\"https://github.com/rio-labs/rio/wiki/Layouting-System\"&gt;Layouting System&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Take a look at our playground, where you can try out our layout concept firsthand with just a click and receive real-time feedback: &lt;a href=\"https://rio.dev/docs/howto/layout-guide\"&gt;Rio - Layouting Quickstart&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Thanks and we are looking forward to your feedback! :)&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/rio-labs/rio\"&gt;Github: Rio&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/o-esiJ3BM-yo_H7RSTgBjejnIh5PyKtqT3OKdD-IDQ4.jpg?auto=webp&amp;s=0ce6039f602ad2c5aad7dd7d7228defd7c6b897f",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/o-esiJ3BM-yo_H7RSTgBjejnIh5PyKtqT3OKdD-IDQ4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=94fa756aadee7bf9fbe5d544c111515c27a0b95f",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/o-esiJ3BM-yo_H7RSTgBjejnIh5PyKtqT3OKdD-IDQ4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=5b20659615151e238bcbe1ca8a331e237d2c9216",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/o-esiJ3BM-yo_H7RSTgBjejnIh5PyKtqT3OKdD-IDQ4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=fab1951590577aba83b2ee0d7e241f6ccc30eb22",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/o-esiJ3BM-yo_H7RSTgBjejnIh5PyKtqT3OKdD-IDQ4.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=54cb8e59cf9a099e901d789e8ce403e7b6df35e7",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/o-esiJ3BM-yo_H7RSTgBjejnIh5PyKtqT3OKdD-IDQ4.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=e73d1f4d5dc6765205f4b32ace1c494c839f8194",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/o-esiJ3BM-yo_H7RSTgBjejnIh5PyKtqT3OKdD-IDQ4.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=6cda1c5e056756224201acabfaa1090ebab42c04",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "_VU_IT0WhPwUuNXZblCmb8KR6_z9v8QbP94pRkVnYnk"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gjgcsf",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Sn3llius",
            "discussion_type": null,
            "num_comments": 21,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gjgcsf/rio_webapps_in_pure_python_a_fresh_layouting/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gjgcsf/rio_webapps_in_pure_python_a_fresh_layouting/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730732608.0,
            "num_crossposts": 1,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "The encryption &amp; decryption manager from heaven\n\n\nSorry if I’m tooting my own horn here, but you \nknow. Even though many of you out there might not care so much for ‘Mr Crypter’. At least I enjoy using it and that’s enough for me.\n\nHere is a demo video: https://youtu.be/OUr7ZM-FgoU?si=WRI7b7shGRi4obD3\n\nQuick notes:\n\n**Framework**: \nI recently started learning about `Typer`, it’s a lib that makes it easy to create good CLI programs using python. So I decided to apply what I’ve learned and create Mr Crypter.\n\n\n\n\n**What my project does**\n1. You can encrypt/decrypt specific files\n2. View the content of a encrypted file while still keeping the file encrypted\n3. Add new data to an encrypted file without having to decrypt the file manually\n4. Search for all of the files that you have encrypted using Mr Crypter\n\n\n\n\n**Target audience**\nI might be tooting my own horn here when I say that this is a tool from heaven, but honestly. I like using Mr Crypter, I enjoy the ease of use. And that’s the point of it, it’s supposed to be user friendly, the main use case are for those that like to save credentials, api keys, etc on your computer. However, having let’s say an api key in a txt file out in the open can be problematic. That’s why it’s better to encrypt it and use Mr Crypter’s tooling whenever you need to get your api key. \n\n\n**Comparison**\nMy initial plan was to initially just encrypt some API keys that I had acquired, but later on decided to create a better way of managing stuff like this. But everything snowballed from there. And my intention wasn’t really to compete with any existing tooling that might be out there. But, since r/Python requires you to at least explain how your project might differ. I could say this:\n\n1. Once encrypted always encrypted, the idea is to be able to interact with the contents of a encrypted file in some way.\n2. Since there are commands to interact with already encrypted files, that could potentially be a vector of a security leak, if someone is monitoring you and waiting for you to let’s say use the `view` command to inspect the contents of one of your encrypted files. Compare that to tools like hpenc that are more established. Other than that, encryption is still strong  as long as your password isn’t `password`. Not even AES can defend against foolishness\n3. Ease of use, my goal is to keep things simple as I can. \n\n\n**LICENSE: MIT**\nThis means you can do whatever the heck you want with the source code once you have downloaded it.  \n\nAnd also, if you liked it enough that you want to sponsor me, I added a sponsor button to the project.\n\n**Want to contribute to the project?**\nGo to the TODO.md and pick something, there are a bunch of stuff that either needs to be added or improved upon. I’ll occasionally add new stuff or remove stuff from the TODO.md. So keep an eye out.\n\nIf you want to check the project out, go to: \n\n[Mr Crypter GitHub repo](https://github.com/Marcus-Peterson/mr-crypter)",
            "author_fullname": "t2_cfgblima",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "The encryption &amp; decryption manager from heaven",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gjfwbq",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.64,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 8,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 8,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730731473.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The encryption &amp;amp; decryption manager from heaven&lt;/p&gt;\n\n&lt;p&gt;Sorry if I’m tooting my own horn here, but you \nknow. Even though many of you out there might not care so much for ‘Mr Crypter’. At least I enjoy using it and that’s enough for me.&lt;/p&gt;\n\n&lt;p&gt;Here is a demo video: &lt;a href=\"https://youtu.be/OUr7ZM-FgoU?si=WRI7b7shGRi4obD3\"&gt;https://youtu.be/OUr7ZM-FgoU?si=WRI7b7shGRi4obD3&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Quick notes:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Framework&lt;/strong&gt;: \nI recently started learning about &lt;code&gt;Typer&lt;/code&gt;, it’s a lib that makes it easy to create good CLI programs using python. So I decided to apply what I’ve learned and create Mr Crypter.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What my project does&lt;/strong&gt;\n1. You can encrypt/decrypt specific files\n2. View the content of a encrypted file while still keeping the file encrypted\n3. Add new data to an encrypted file without having to decrypt the file manually\n4. Search for all of the files that you have encrypted using Mr Crypter&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target audience&lt;/strong&gt;\nI might be tooting my own horn here when I say that this is a tool from heaven, but honestly. I like using Mr Crypter, I enjoy the ease of use. And that’s the point of it, it’s supposed to be user friendly, the main use case are for those that like to save credentials, api keys, etc on your computer. However, having let’s say an api key in a txt file out in the open can be problematic. That’s why it’s better to encrypt it and use Mr Crypter’s tooling whenever you need to get your api key. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;\nMy initial plan was to initially just encrypt some API keys that I had acquired, but later on decided to create a better way of managing stuff like this. But everything snowballed from there. And my intention wasn’t really to compete with any existing tooling that might be out there. But, since &lt;a href=\"/r/Python\"&gt;r/Python&lt;/a&gt; requires you to at least explain how your project might differ. I could say this:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Once encrypted always encrypted, the idea is to be able to interact with the contents of a encrypted file in some way.&lt;/li&gt;\n&lt;li&gt;Since there are commands to interact with already encrypted files, that could potentially be a vector of a security leak, if someone is monitoring you and waiting for you to let’s say use the &lt;code&gt;view&lt;/code&gt; command to inspect the contents of one of your encrypted files. Compare that to tools like hpenc that are more established. Other than that, encryption is still strong  as long as your password isn’t &lt;code&gt;password&lt;/code&gt;. Not even AES can defend against foolishness&lt;/li&gt;\n&lt;li&gt;Ease of use, my goal is to keep things simple as I can. &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;strong&gt;LICENSE: MIT&lt;/strong&gt;\nThis means you can do whatever the heck you want with the source code once you have downloaded it.  &lt;/p&gt;\n\n&lt;p&gt;And also, if you liked it enough that you want to sponsor me, I added a sponsor button to the project.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Want to contribute to the project?&lt;/strong&gt;\nGo to the TODO.md and pick something, there are a bunch of stuff that either needs to be added or improved upon. I’ll occasionally add new stuff or remove stuff from the TODO.md. So keep an eye out.&lt;/p&gt;\n\n&lt;p&gt;If you want to check the project out, go to: &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/Marcus-Peterson/mr-crypter\"&gt;Mr Crypter GitHub repo&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/vNDEDwR9gb8m9d7Mj5JqIrOXNXrklsegOovIXikhczE.jpg?auto=webp&amp;s=019d68fcfde43d039b6528ff7aa87037292acbe9",
                            "width": 480,
                            "height": 360
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/vNDEDwR9gb8m9d7Mj5JqIrOXNXrklsegOovIXikhczE.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=116465f0ccedbb2c7c70e63b53b438d17d35fc9a",
                                "width": 108,
                                "height": 81
                            },
                            {
                                "url": "https://external-preview.redd.it/vNDEDwR9gb8m9d7Mj5JqIrOXNXrklsegOovIXikhczE.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=3b298825c97880e6b2580a5fee5912910e756964",
                                "width": 216,
                                "height": 162
                            },
                            {
                                "url": "https://external-preview.redd.it/vNDEDwR9gb8m9d7Mj5JqIrOXNXrklsegOovIXikhczE.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=c8a3f3b6feef2a7ef0d32964769d207183f0fef1",
                                "width": 320,
                                "height": 240
                            }
                        ],
                        "variants": {},
                        "id": "C1VVofQccan2P-LYLHuAzsiGAFZRn1b8o6sK31YVH10"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gjfwbq",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Gorrilac",
            "discussion_type": null,
            "num_comments": 2,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gjfwbq/the_encryption_decryption_manager_from_heaven/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gjfwbq/the_encryption_decryption_manager_from_heaven/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730731473.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "**What My Project Does**\n\nIt is deep learning library / framework on top of JAX. [Zephyr](https://github.com/mzguntalan/zephyr) was motivated by an inclination to writing FP because JAX was FP. Zephyr reflects the nature of networks and layers, they are simply mathematical functions. By reflecting this, you are able to write code quicker and easier with minimal learning curve. \n\n**Target Audience**\n\nThis framework is not ready for production nor general use. It is in active development and if you do use it, I highly appreciate it and so if you submit reports or requests, I will tend to them immediately. \n\nIt is for people who would like to use JAX in an FP way.\n\n**Comparison** \n\nWithin JAX: Flax, Haiku, and Equinox are your options; within python you additionally have Tensorflow and PyTorch. All of which are OO. In contrast, Zephyr is FP and you write nets and layers as functions.\n\n**OO - FP**: Because zephyr is FP, it looks similar to math and it enjoys shorter code because there is no 1) initialize the module 2) call/forward/apply the module. There are only function calls. FP is more explicit tho\n\nHere is a short example. (Some variables are not specified for brevity). README for more. \n\nExample: Linear Layer Only\nOther frameworks would look like this (none of them look exactly like this): \n```python\n    class Foo(Module):\n        def __init__(self, input_dim):\n            self.linear = nn.Linear(input_dim, out_dim)\n        def __call__(self, x):\n            return self.linear(x)\n```\n\nZephyr:\n```python\n    def foo(params, x):\n        return nets.linear(params, x, out_dim)\n\n    # initialize params\n    params = trace(foo, random_key, sample_input)\n```\n\n**Flax, Haiku**: They usually recreate JAX transformations to play nice with OO - so you need to know which one to use. And you have to be careful with nesting them or using a transformed module in another untransformed module, and so on. Zephyr does not have this problem.\n\nFeedback is very welcome! \n\n\n",
            "author_fullname": "t2_1axtwmeqmk",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "New Deep Learning Framework; Zephyr is on early release; active development",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gjdq6y",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.87,
            "author_flair_background_color": "transparent",
            "subreddit_type": "public",
            "ups": 15,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": "1dfa5f1e-537c-11ee-a57d-ca789f839d95",
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 15,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1730761517.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [
                {
                    "e": "text",
                    "t": "Tuple unpacking gone wrong"
                }
            ],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730725470.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "richtext",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;It is deep learning library / framework on top of JAX. &lt;a href=\"https://github.com/mzguntalan/zephyr\"&gt;Zephyr&lt;/a&gt; was motivated by an inclination to writing FP because JAX was FP. Zephyr reflects the nature of networks and layers, they are simply mathematical functions. By reflecting this, you are able to write code quicker and easier with minimal learning curve. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This framework is not ready for production nor general use. It is in active development and if you do use it, I highly appreciate it and so if you submit reports or requests, I will tend to them immediately. &lt;/p&gt;\n\n&lt;p&gt;It is for people who would like to use JAX in an FP way.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;Within JAX: Flax, Haiku, and Equinox are your options; within python you additionally have Tensorflow and PyTorch. All of which are OO. In contrast, Zephyr is FP and you write nets and layers as functions.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;OO - FP&lt;/strong&gt;: Because zephyr is FP, it looks similar to math and it enjoys shorter code because there is no 1) initialize the module 2) call/forward/apply the module. There are only function calls. FP is more explicit tho&lt;/p&gt;\n\n&lt;p&gt;Here is a short example. (Some variables are not specified for brevity). README for more. &lt;/p&gt;\n\n&lt;p&gt;Example: Linear Layer Only\nOther frameworks would look like this (none of them look exactly like this): \n&lt;code&gt;python\n    class Foo(Module):\n        def __init__(self, input_dim):\n            self.linear = nn.Linear(input_dim, out_dim)\n        def __call__(self, x):\n            return self.linear(x)\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Zephyr:\n```python\n    def foo(params, x):\n        return nets.linear(params, x, out_dim)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# initialize params\nparams = trace(foo, random_key, sample_input)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;```&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Flax, Haiku&lt;/strong&gt;: They usually recreate JAX transformations to play nice with OO - so you need to know which one to use. And you have to be careful with nesting them or using a transformed module in another untransformed module, and so on. Zephyr does not have this problem.&lt;/p&gt;\n\n&lt;p&gt;Feedback is very welcome! &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/OgrEMc-o9tgWjw4KVqO-tTcEhYecDlOH78ITI_1F_5o.jpg?auto=webp&amp;s=66611aacc36598f3cf81ae244a358bb5b545238c",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/OgrEMc-o9tgWjw4KVqO-tTcEhYecDlOH78ITI_1F_5o.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=439526fe488059ccf683638839f19009e06ac8b6",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/OgrEMc-o9tgWjw4KVqO-tTcEhYecDlOH78ITI_1F_5o.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=dec8c41044f5b07a230337857e940ed3ff8e9a68",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/OgrEMc-o9tgWjw4KVqO-tTcEhYecDlOH78ITI_1F_5o.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=ba119a55c6d0266a5fd45d4da996de90ec80cbc2",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/OgrEMc-o9tgWjw4KVqO-tTcEhYecDlOH78ITI_1F_5o.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=fb88faf50167082db0ebf069705cbefc129c800a",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/OgrEMc-o9tgWjw4KVqO-tTcEhYecDlOH78ITI_1F_5o.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=03babafbae470dfcf5e8c2b5bde568f01efc8600",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/OgrEMc-o9tgWjw4KVqO-tTcEhYecDlOH78ITI_1F_5o.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=bfeecf4a59f4008d6d258cd20caa43e1e0029e5d",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "LzOotxj20VFwidanTIFMuJRzg_5Ha2i5dZd3lA5154E"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": "Tuple unpacking gone wrong",
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gjdq6y",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Pristine-Staff-5250",
            "discussion_type": null,
            "num_comments": 2,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": "dark",
            "permalink": "/r/Python/comments/1gjdq6y/new_deep_learning_framework_zephyr_is_on_early/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gjdq6y/new_deep_learning_framework_zephyr_is_on_early/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730725470.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# What my project does\n\n* code: [https://github.com/nickatnight/python-coingecko](https://github.com/nickatnight/python-coingecko)\n* pypi: [https://pypi.org/project/python-coingecko/](https://pypi.org/project/python-coingecko/)\n* website: [https://docs.coingecko.com/reference/introduction](https://docs.coingecko.com/reference/introduction)\n\nThis project is a simple Python api wrapper for coingecko v3 api. The motivation for this was to experiment with [uv](https://github.com/astral-sh/uv) on a new open source project. Some highlights: fully typed, 98% test coverage, GitHub actions, and modern tooling.\n\nThis is an unofficial package and I have no affiliation with [coingecko.com](http://coingecko.com)\n\n# Target Audience\n\nAnyone who develops apps using coingecko api. As of this writing, the package is in beta, and an alpha can be expected in the upcoming releases.\n\n# Comparison\n\nThe [existing package](https://github.com/man-c/pycoingecko) (1k stars) has been inactive for over two years. New apis have been added to the platform since, but are not yet supported. ",
            "author_fullname": "t2_dlb7rtu",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Python SDK for CoinGecko.com API",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gj9q8r",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.62,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 5,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 5,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730709504.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;What my project does&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;code: &lt;a href=\"https://github.com/nickatnight/python-coingecko\"&gt;https://github.com/nickatnight/python-coingecko&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;pypi: &lt;a href=\"https://pypi.org/project/python-coingecko/\"&gt;https://pypi.org/project/python-coingecko/&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;website: &lt;a href=\"https://docs.coingecko.com/reference/introduction\"&gt;https://docs.coingecko.com/reference/introduction&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;This project is a simple Python api wrapper for coingecko v3 api. The motivation for this was to experiment with &lt;a href=\"https://github.com/astral-sh/uv\"&gt;uv&lt;/a&gt; on a new open source project. Some highlights: fully typed, 98% test coverage, GitHub actions, and modern tooling.&lt;/p&gt;\n\n&lt;p&gt;This is an unofficial package and I have no affiliation with &lt;a href=\"http://coingecko.com\"&gt;coingecko.com&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;Anyone who develops apps using coingecko api. As of this writing, the package is in beta, and an alpha can be expected in the upcoming releases.&lt;/p&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;The &lt;a href=\"https://github.com/man-c/pycoingecko\"&gt;existing package&lt;/a&gt; (1k stars) has been inactive for over two years. New apis have been added to the platform since, but are not yet supported. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/j70JnYhKc-2WG178TSj3lQ2joGRk0bWwu780ipiBo2c.jpg?auto=webp&amp;s=595d9625b354601f76a0d1326a72bfc12ed24511",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/j70JnYhKc-2WG178TSj3lQ2joGRk0bWwu780ipiBo2c.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=462df36634824249adbbf86502f206e586e43a9c",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/j70JnYhKc-2WG178TSj3lQ2joGRk0bWwu780ipiBo2c.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=749d7561295ba161959eb35dff27d797d747c7f9",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/j70JnYhKc-2WG178TSj3lQ2joGRk0bWwu780ipiBo2c.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=68ca902b9c1157bd5fc79df309a9acd3e38be5cf",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/j70JnYhKc-2WG178TSj3lQ2joGRk0bWwu780ipiBo2c.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=981ad2c4cf9ef528a01549e33304c4bde1ffbb68",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/j70JnYhKc-2WG178TSj3lQ2joGRk0bWwu780ipiBo2c.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=25889f232e5553cb060a5f7cfdcc46b4523bc4bd",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/j70JnYhKc-2WG178TSj3lQ2joGRk0bWwu780ipiBo2c.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=3bce16493ace23842c9bd6c7c2b6f4cf104b4f9c",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "DE31QuA2JmLPm4lv6cOPgSxe0wHY7FEUFJ5eKZmv_OI"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gj9q8r",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "betazoid_one",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gj9q8r/python_sdk_for_coingeckocom_api/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gj9q8r/python_sdk_for_coingeckocom_api/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730709504.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Are you trying to make your code run faster? In this video, we will be taking a deep dive into python threads from basic to advanced concepts so that you can take advantage of parallelism and concurrency to speed up your program. \n\n- Python Thread without join()\n- Python Thread with join()\n- Python Thread with Input Arguments\n- Python Multithreading\n- Python Daemon Threads\n- Python Thread with Synchronization using Locks\n- Python Thread Queue Communication between Threads\n- Python Thread Pool Executor\n- Python Thread Events\n- Speed Comparison I/O Task\n- Speed Comparison CPU Task (Multithreading vs Multiprocessing)\n\nhttps://youtu.be/Rm9Pic2rpAQ",
            "author_fullname": "t2_1adjzn9u7e",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Python Threading Tutorial: Basic to Advanced (Multithreading, Pool Executors, Daemon, Lock, Events)",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Tutorial"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "tutorial",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gj177a",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.94,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 189,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Tutorial",
            "can_mod_post": false,
            "score": 189,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730678577.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Are you trying to make your code run faster? In this video, we will be taking a deep dive into python threads from basic to advanced concepts so that you can take advantage of parallelism and concurrency to speed up your program. &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Python Thread without join()&lt;/li&gt;\n&lt;li&gt;Python Thread with join()&lt;/li&gt;\n&lt;li&gt;Python Thread with Input Arguments&lt;/li&gt;\n&lt;li&gt;Python Multithreading&lt;/li&gt;\n&lt;li&gt;Python Daemon Threads&lt;/li&gt;\n&lt;li&gt;Python Thread with Synchronization using Locks&lt;/li&gt;\n&lt;li&gt;Python Thread Queue Communication between Threads&lt;/li&gt;\n&lt;li&gt;Python Thread Pool Executor&lt;/li&gt;\n&lt;li&gt;Python Thread Events&lt;/li&gt;\n&lt;li&gt;Speed Comparison I/O Task&lt;/li&gt;\n&lt;li&gt;Speed Comparison CPU Task (Multithreading vs Multiprocessing)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;a href=\"https://youtu.be/Rm9Pic2rpAQ\"&gt;https://youtu.be/Rm9Pic2rpAQ&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/YuW2hHrQwYeEdt4jBUhcCwIpEmiDsbr19G1wHR7YdHw.jpg?auto=webp&amp;s=355d024509aa6caa3510606829ff4751f1d28556",
                            "width": 480,
                            "height": 360
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/YuW2hHrQwYeEdt4jBUhcCwIpEmiDsbr19G1wHR7YdHw.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=c801588be741e645405fee76a30193193b544a7a",
                                "width": 108,
                                "height": 81
                            },
                            {
                                "url": "https://external-preview.redd.it/YuW2hHrQwYeEdt4jBUhcCwIpEmiDsbr19G1wHR7YdHw.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=a9818179692bf87666d90cfedc0ab09fdb934bd8",
                                "width": 216,
                                "height": 162
                            },
                            {
                                "url": "https://external-preview.redd.it/YuW2hHrQwYeEdt4jBUhcCwIpEmiDsbr19G1wHR7YdHw.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=b26cc6a0a57c7cb23ad605892973ea38f5cbb558",
                                "width": 320,
                                "height": 240
                            }
                        ],
                        "variants": {},
                        "id": "-l9a7JfiK1pev-7eunjNMu8G35vQxsl0htTnDnuscB0"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#dadada",
            "id": "1gj177a",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "kevinwoodrobotics",
            "discussion_type": null,
            "num_comments": 10,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gj177a/python_threading_tutorial_basic_to_advanced/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gj177a/python_threading_tutorial_basic_to_advanced/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730678577.0,
            "num_crossposts": 1,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# Weekly Thread: Project Ideas 💡\n\nWelcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.\n\n## How it Works:\n\n1. **Suggest a Project**: Comment your project idea—be it beginner-friendly or advanced.\n2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.\n3. **Explore**: Looking for ideas? Check out Al Sweigart's [\"The Big Book of Small Python Projects\"](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.\n\n## Guidelines:\n\n* Clearly state the difficulty level.\n* Provide a brief description and, if possible, outline the tech stack.\n* Feel free to link to tutorials or resources that might help.\n\n# Example Submissions:\n\n## Project Idea: Chatbot\n\n**Difficulty**: Intermediate\n\n**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar \n\n**Description**: Create a chatbot that can answer FAQs for a website.\n\n**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)\n\n# Project Idea: Weather Dashboard\n\n**Difficulty**: Beginner\n\n**Tech Stack**: HTML, CSS, JavaScript, API\n\n**Description**: Build a dashboard that displays real-time weather information using a weather API.\n\n**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)\n\n## Project Idea: File Organizer\n\n**Difficulty**: Beginner\n\n**Tech Stack**: Python, File I/O\n\n**Description**: Create a script that organizes files in a directory into sub-folders based on file type.\n\n**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)\n\nLet's help each other grow. Happy coding! 🌟",
            "author_fullname": "t2_6l4z3",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Monday Daily Thread: Project ideas!",
            "link_flair_richtext": [
                {
                    "a": ":pythonLogo:",
                    "e": "emoji",
                    "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                },
                {
                    "e": "text",
                    "t": " Daily Thread"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "daily-thread",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gj14rr",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.84,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 4,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": ":pythonLogo: Daily Thread",
            "can_mod_post": false,
            "score": 4,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": true,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730678409.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: Project Ideas 💡&lt;/h1&gt;\n\n&lt;p&gt;Welcome to our weekly Project Ideas thread! Whether you&amp;#39;re a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Suggest a Project&lt;/strong&gt;: Comment your project idea—be it beginner-friendly or advanced.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Build &amp;amp; Share&lt;/strong&gt;: If you complete a project, reply to the original comment, share your experience, and attach your source code.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Explore&lt;/strong&gt;: Looking for ideas? Check out Al Sweigart&amp;#39;s &lt;a href=\"https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242\"&gt;&amp;quot;The Big Book of Small Python Projects&amp;quot;&lt;/a&gt; for inspiration.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Clearly state the difficulty level.&lt;/li&gt;\n&lt;li&gt;Provide a brief description and, if possible, outline the tech stack.&lt;/li&gt;\n&lt;li&gt;Feel free to link to tutorials or resources that might help.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Example Submissions:&lt;/h1&gt;\n\n&lt;h2&gt;Project Idea: Chatbot&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Tech Stack&lt;/strong&gt;: Python, NLP, Flask/FastAPI/Litestar &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a chatbot that can answer FAQs for a website.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;: &lt;a href=\"https://www.youtube.com/watch?v=a37BL0stIuM\"&gt;Building a Chatbot with Python&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;Project Idea: Weather Dashboard&lt;/h1&gt;\n\n&lt;p&gt;&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Tech Stack&lt;/strong&gt;: HTML, CSS, JavaScript, API&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Build a dashboard that displays real-time weather information using a weather API.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;: &lt;a href=\"https://www.youtube.com/watch?v=9P5MY_2i7K8\"&gt;Weather API Tutorial&lt;/a&gt;&lt;/p&gt;\n\n&lt;h2&gt;Project Idea: File Organizer&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Tech Stack&lt;/strong&gt;: Python, File I/O&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a script that organizes files in a directory into sub-folders based on file type.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;: &lt;a href=\"https://automatetheboringstuff.com/2e/chapter9/\"&gt;Automate the Boring Stuff: Organizing Files&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Let&amp;#39;s help each other grow. Happy coding! 🌟&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": "moderator",
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#00a6a5",
            "id": "1gj14rr",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "AutoModerator",
            "discussion_type": null,
            "num_comments": 3,
            "send_replies": false,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gj14rr/monday_daily_thread_project_ideas/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gj14rr/monday_daily_thread_project_ideas/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730678409.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "**What My Project Does**\n\nHi everyone! I’m excited to introduce OpenSceneSense—a Python package that enables large language models (LLMs) to work with video data in meaningful ways. The idea is to bridge video input with models like OpenAI's Vision models and OpenRouter, so you can extract detailed insights directly from videos, frame-by-frame, and integrate audio transcription seamlessly.\n\nOpenSceneSense processes video data in a way that LLMs can understand, turning it into rich text-based descriptions, detailed summaries, and scene change detection that can be applied to real-world tasks, including advanced content moderation and dataset creation.\n\n**Target Audience**\n\nThis project is for developers, researchers, and data scientists who need to analyze video content or build robust, labelled datasets for machine learning. It’s also useful for platforms or individuals focused on content moderation, as OpenSceneSense brings context to video scenes by analyzing both visual and audio components, making it suitable for production applications.\n\n**Comparison**\n\nUnlike traditional video analysis tools that might only handle frames or audio separately, OpenSceneSense integrates both, allowing you to prompt LLMs to create comprehensive summaries and capture context that’s often lost in basic video analysis. While current tools can identify objects or transcribe audio, OpenSceneSense goes a step further by combining visual elements with narrative, perfect for anyone needing richer, more nuanced datasets or more accurate content moderation.\n\n**Getting Started**\n\nTo use OpenSceneSense, you’ll need Python 3.10+, FFmpeg, and an API key for OpenAI or OpenRouter. Install it with \\`pip install openscenesense\\`, and you’re ready to go. I’m also working on an Ollama-compatible version for local use to address privacy and performance needs.\n\nWould love to hear thoughts and feedback from anyone working in AI, dataset creation, or moderation. Check it out on GitHub! \n\n[https://github.com/ymrohit/openscenesense](https://github.com/ymrohit/openscenesense)",
            "author_fullname": "t2_24vrj5ub",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Introducing OpenSceneSense: AI-Powered Video Analysis(Video input for Current LLMs)",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1giyxep",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.7,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 4,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 4,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730672358.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Hi everyone! I’m excited to introduce OpenSceneSense—a Python package that enables large language models (LLMs) to work with video data in meaningful ways. The idea is to bridge video input with models like OpenAI&amp;#39;s Vision models and OpenRouter, so you can extract detailed insights directly from videos, frame-by-frame, and integrate audio transcription seamlessly.&lt;/p&gt;\n\n&lt;p&gt;OpenSceneSense processes video data in a way that LLMs can understand, turning it into rich text-based descriptions, detailed summaries, and scene change detection that can be applied to real-world tasks, including advanced content moderation and dataset creation.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This project is for developers, researchers, and data scientists who need to analyze video content or build robust, labelled datasets for machine learning. It’s also useful for platforms or individuals focused on content moderation, as OpenSceneSense brings context to video scenes by analyzing both visual and audio components, making it suitable for production applications.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Unlike traditional video analysis tools that might only handle frames or audio separately, OpenSceneSense integrates both, allowing you to prompt LLMs to create comprehensive summaries and capture context that’s often lost in basic video analysis. While current tools can identify objects or transcribe audio, OpenSceneSense goes a step further by combining visual elements with narrative, perfect for anyone needing richer, more nuanced datasets or more accurate content moderation.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Getting Started&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;To use OpenSceneSense, you’ll need Python 3.10+, FFmpeg, and an API key for OpenAI or OpenRouter. Install it with `pip install openscenesense`, and you’re ready to go. I’m also working on an Ollama-compatible version for local use to address privacy and performance needs.&lt;/p&gt;\n\n&lt;p&gt;Would love to hear thoughts and feedback from anyone working in AI, dataset creation, or moderation. Check it out on GitHub! &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/ymrohit/openscenesense\"&gt;https://github.com/ymrohit/openscenesense&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/nK20acKAmOH71ya7AimjxjV6roeZhvZvT01uXryxod0.jpg?auto=webp&amp;s=fc86e5dcab02bd5768fec62a5b725d2822e651c7",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/nK20acKAmOH71ya7AimjxjV6roeZhvZvT01uXryxod0.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=24bbc41772b1da4cf642ae30f2e9ee2ba2a96306",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/nK20acKAmOH71ya7AimjxjV6roeZhvZvT01uXryxod0.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=ee3f917fdf2448e99812ac982851591aae69c642",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/nK20acKAmOH71ya7AimjxjV6roeZhvZvT01uXryxod0.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=20fe28bc293a09b5ee12b3575c83f3978a4a7abf",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/nK20acKAmOH71ya7AimjxjV6roeZhvZvT01uXryxod0.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=6d8a2e6ae1f98ba9c67a9014cd327a2c8313f5f8",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/nK20acKAmOH71ya7AimjxjV6roeZhvZvT01uXryxod0.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=9be0dec0e954b31c450f691998d34571d223a9e2",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/nK20acKAmOH71ya7AimjxjV6roeZhvZvT01uXryxod0.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=d4e6329ebbe3dba8f7d918a53130d30fce47940a",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "SgfhR3BUz7raFHb0DUfxEh9g3b3uvJmaGw4uzT8mFKg"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1giyxep",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "rohit3627",
            "discussion_type": null,
            "num_comments": 10,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1giyxep/introducing_openscenesense_aipowered_video/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1giyxep/introducing_openscenesense_aipowered_video/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730672358.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "This is my code: \n\n    from fractions import Fraction\n    \n    while True:\n        print('What would you like to do?')\n        choice = input('1.Farenheit to Celcius, or 2.Celsius to Farenheit.(Say 1 or 2)')\n    \n        if choice != '1' and choice != '2':\n            print('Incorrect! Please say 1 or 2.')\n    \n        elif choice == '1':\n            while True:\n                f = input('What is your Farenheit number?')\n                try:\n                    f = int(f)\n                except ValueError:\n                    print('Incorrect! Please provide an integer.')\n                    continue\n    \n                frac = Fraction(5, 9) \n                c = (f-32) * frac\n                print(f'In celsius, {f}°F is {c}°C.')\n                go_again = input('Would you like to go again?(yes,no)')\n                if go_again != 'yes':\n                    quit()\n                else:\n                    break\n        \n        elif choice == '2':\n             while True:\n                c = input('What is your Celsius number?')\n                try:\n                    c = int(c)\n                except ValueError:\n                    print('Incorrect! Please provide an integer.')\n                    continue\n    \n                frac = Fraction(9,5)\n                f = c * (frac) + 32\n                print(f'In Farenheit, {c}°C is {f}°F.')\n                go_again = input('Would you like to go again?(yes,no)')\n                if go_again != 'yes':\n                    quit()\n                else:\n                    break",
            "author_fullname": "t2_12id0ueuku",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "I made a Faranheit to Celsius and vice versa project, any improvements i should make?",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1giu9v6",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.33,
            "author_flair_background_color": "transparent",
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": "fa1eebc8-537b-11ee-bc7a-e60c595033c2",
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [
                {
                    "e": "text",
                    "t": "It works on my machine"
                }
            ],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730660256.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "richtext",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;This is my code: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from fractions import Fraction\n\nwhile True:\n    print(&amp;#39;What would you like to do?&amp;#39;)\n    choice = input(&amp;#39;1.Farenheit to Celcius, or 2.Celsius to Farenheit.(Say 1 or 2)&amp;#39;)\n\n    if choice != &amp;#39;1&amp;#39; and choice != &amp;#39;2&amp;#39;:\n        print(&amp;#39;Incorrect! Please say 1 or 2.&amp;#39;)\n\n    elif choice == &amp;#39;1&amp;#39;:\n        while True:\n            f = input(&amp;#39;What is your Farenheit number?&amp;#39;)\n            try:\n                f = int(f)\n            except ValueError:\n                print(&amp;#39;Incorrect! Please provide an integer.&amp;#39;)\n                continue\n\n            frac = Fraction(5, 9) \n            c = (f-32) * frac\n            print(f&amp;#39;In celsius, {f}°F is {c}°C.&amp;#39;)\n            go_again = input(&amp;#39;Would you like to go again?(yes,no)&amp;#39;)\n            if go_again != &amp;#39;yes&amp;#39;:\n                quit()\n            else:\n                break\n    \n    elif choice == &amp;#39;2&amp;#39;:\n         while True:\n            c = input(&amp;#39;What is your Celsius number?&amp;#39;)\n            try:\n                c = int(c)\n            except ValueError:\n                print(&amp;#39;Incorrect! Please provide an integer.&amp;#39;)\n                continue\n\n            frac = Fraction(9,5)\n            f = c * (frac) + 32\n            print(f&amp;#39;In Farenheit, {c}°C is {f}°F.&amp;#39;)\n            go_again = input(&amp;#39;Would you like to go again?(yes,no)&amp;#39;)\n            if go_again != &amp;#39;yes&amp;#39;:\n                quit()\n            else:\n                break\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": "It works on my machine",
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1giu9v6",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Worth-Word5926",
            "discussion_type": null,
            "num_comments": 10,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": "dark",
            "permalink": "/r/Python/comments/1giu9v6/i_made_a_faranheit_to_celsius_and_vice_versa/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1giu9v6/i_made_a_faranheit_to_celsius_and_vice_versa/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730660256.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# webview_python\n\nA lightweight Python binding for creating native GUI applications using web technologies. Uses WebView2 on Windows and native webview implementations on other platforms.\n\n## Features\n\n- ✨ Cross-platform support:\n  - Windows: Microsoft Edge WebView2 engine\n  - macOS: WebKit\n  - Linux: GTK-based WebKit\n- 🚀 Simple and intuitive Python API\n- 💪 High performance with minimal resource usage\n- 🔄 Two-way JavaScript bridge\n- 📦 Easy installation with minimal dependencies\n\n## Why Another Binding?\n\nExisting Python WebView solutions have limitations:\n\n- [webview-python](https://github.com/zserge/webview-python) - Hasn't been updated in 6 years, compilation issues, doesn't use WebView2\n- [pywebview](https://github.com/r0x0r/pywebview) - Complex setup and installation issues\n\n## Installation\n\n```bash\npip install webview_python\n```\n\n## Usage\n\n### Display Inline HTML\n\n```python\nfrom webview.webview import Webview\nfrom urllib.parse import quote\n\nhtml = \"\"\"\n&lt;html&gt;\n&lt;body&gt;\n&lt;h1&gt;Hello from Python Webview!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\nwebview = Webview()\nwebview.navigate(f\"data:text/html,{quote(html)}\")\nwebview.run()\n```\n\n### Load Local HTML File\n\n```python\nfrom webview.webview import Webview\nimport os\n\nwebview = Webview()\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\nhtml_path = os.path.join(current_dir, 'local.html')\nwebview.navigate(f\"file://{html_path}\")\nwebview.run()\n```\n\n### Load Remote URL\n\n```python\nfrom webview.webview import Webview\nwebview = Webview()\nwebview.navigate(\"https://www.python.org\")\nwebview.run()\n```\n\n### Python-JavaScript Bindings\n\n```python\nfrom webview.webview import Webview, Size, SizeHint\nfrom urllib.parse import quote\n\nwebview = Webview(debug=True)\n\n# Python functions that can be called from JavaScript\ndef hello():\n    webview.eval(\"updateFromPython('Hello from Python!')\")\n    return \"Hello from Python!\"\n\ndef add(a, b):\n    return a + b\n\n# Bind Python functions\nwebview.bind(\"hello\", hello)\nwebview.bind(\"add\", add)\n\n# Configure window\nwebview.title = \"Python-JavaScript Binding Demo\"\nwebview.size = Size(640, 480, SizeHint.FIXED)\n\n# Load HTML with JavaScript\nhtml = \"\"\"\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Python-JavaScript Binding Demo&lt;/title&gt;\n    &lt;script&gt;\n        async function callPython() {\n            const result = await hello();\n            document.getElementById('result').innerHTML = result;\n        }\n\n        async function callPythonWithArgs() {\n            const result = await add(40, 2);\n            document.getElementById('result').innerHTML = `Result: ${result}`;\n        }\n\n        function updateFromPython(message) {\n            document.getElementById('result').innerHTML = `Python says: ${message}`;\n        }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Python-JavaScript Binding Demo&lt;/h1&gt;\n    &lt;button onclick=\"callPython()\"&gt;Call Python&lt;/button&gt;\n    &lt;button onclick=\"callPythonWithArgs()\"&gt;Call Python with Args&lt;/button&gt;\n    &lt;div id=\"result\"&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\nwebview.navigate(f\"data:text/html,{quote(html)}\")\nwebview.run()\n```\n\n## API Overview\n\n- `Webview()`: Create a webview instance\n- `webview.navigate(url)`: Navigate to URL or load HTML content\n- `webview.bind(name, func)`: Bind Python function to JavaScript\n- `webview.eval(js_code)`: Execute JavaScript code\n- `webview.run()`: Start the webview main loop\n- `Size(width, height, hint)`: Configure window size\n- `SizeHint`: Window size hint constants\n\n## Contributing\n\nContributions are welcome! Please feel free to submit issues and pull requests.\n",
            "author_fullname": "t2_8jgung1r",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "A new webview binding for python call 4 test",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "News"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "news",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1giru7y",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.67,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 3,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "News",
            "can_mod_post": false,
            "score": 3,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730654027.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;webview_python&lt;/h1&gt;\n\n&lt;p&gt;A lightweight Python binding for creating native GUI applications using web technologies. Uses WebView2 on Windows and native webview implementations on other platforms.&lt;/p&gt;\n\n&lt;h2&gt;Features&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;✨ Cross-platform support:\n\n&lt;ul&gt;\n&lt;li&gt;Windows: Microsoft Edge WebView2 engine&lt;/li&gt;\n&lt;li&gt;macOS: WebKit&lt;/li&gt;\n&lt;li&gt;Linux: GTK-based WebKit&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;🚀 Simple and intuitive Python API&lt;/li&gt;\n&lt;li&gt;💪 High performance with minimal resource usage&lt;/li&gt;\n&lt;li&gt;🔄 Two-way JavaScript bridge&lt;/li&gt;\n&lt;li&gt;📦 Easy installation with minimal dependencies&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Why Another Binding?&lt;/h2&gt;\n\n&lt;p&gt;Existing Python WebView solutions have limitations:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/zserge/webview-python\"&gt;webview-python&lt;/a&gt; - Hasn&amp;#39;t been updated in 6 years, compilation issues, doesn&amp;#39;t use WebView2&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/r0x0r/pywebview\"&gt;pywebview&lt;/a&gt; - Complex setup and installation issues&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Installation&lt;/h2&gt;\n\n&lt;p&gt;&lt;code&gt;bash\npip install webview_python\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;h2&gt;Usage&lt;/h2&gt;\n\n&lt;h3&gt;Display Inline HTML&lt;/h3&gt;\n\n&lt;p&gt;```python\nfrom webview.webview import Webview\nfrom urllib.parse import quote&lt;/p&gt;\n\n&lt;p&gt;html = &amp;quot;&amp;quot;&amp;quot;\n&amp;lt;html&amp;gt;\n&amp;lt;body&amp;gt;\n&amp;lt;h1&amp;gt;Hello from Python Webview!&amp;lt;/h1&amp;gt;\n&amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;\n&amp;quot;&amp;quot;&amp;quot;\nwebview = Webview()\nwebview.navigate(f&amp;quot;data:text/html,{quote(html)}&amp;quot;)\nwebview.run()\n```&lt;/p&gt;\n\n&lt;h3&gt;Load Local HTML File&lt;/h3&gt;\n\n&lt;p&gt;```python\nfrom webview.webview import Webview\nimport os&lt;/p&gt;\n\n&lt;p&gt;webview = Webview()\ncurrent&lt;em&gt;dir = os.path.dirname(os.path.abspath(&lt;/em&gt;&lt;em&gt;file&lt;/em&gt;_))\nhtml_path = os.path.join(current_dir, &amp;#39;local.html&amp;#39;)\nwebview.navigate(f&amp;quot;file://{html_path}&amp;quot;)\nwebview.run()\n```&lt;/p&gt;\n\n&lt;h3&gt;Load Remote URL&lt;/h3&gt;\n\n&lt;p&gt;&lt;code&gt;python\nfrom webview.webview import Webview\nwebview = Webview()\nwebview.navigate(&amp;quot;https://www.python.org&amp;quot;)\nwebview.run()\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;h3&gt;Python-JavaScript Bindings&lt;/h3&gt;\n\n&lt;p&gt;```python\nfrom webview.webview import Webview, Size, SizeHint\nfrom urllib.parse import quote&lt;/p&gt;\n\n&lt;p&gt;webview = Webview(debug=True)&lt;/p&gt;\n\n&lt;h1&gt;Python functions that can be called from JavaScript&lt;/h1&gt;\n\n&lt;p&gt;def hello():\n    webview.eval(&amp;quot;updateFromPython(&amp;#39;Hello from Python!&amp;#39;)&amp;quot;)\n    return &amp;quot;Hello from Python!&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;def add(a, b):\n    return a + b&lt;/p&gt;\n\n&lt;h1&gt;Bind Python functions&lt;/h1&gt;\n\n&lt;p&gt;webview.bind(&amp;quot;hello&amp;quot;, hello)\nwebview.bind(&amp;quot;add&amp;quot;, add)&lt;/p&gt;\n\n&lt;h1&gt;Configure window&lt;/h1&gt;\n\n&lt;p&gt;webview.title = &amp;quot;Python-JavaScript Binding Demo&amp;quot;\nwebview.size = Size(640, 480, SizeHint.FIXED)&lt;/p&gt;\n\n&lt;h1&gt;Load HTML with JavaScript&lt;/h1&gt;\n\n&lt;p&gt;html = &amp;quot;&amp;quot;&amp;quot;\n&amp;lt;html&amp;gt;\n&amp;lt;head&amp;gt;\n    &amp;lt;title&amp;gt;Python-JavaScript Binding Demo&amp;lt;/title&amp;gt;\n    &amp;lt;script&amp;gt;\n        async function callPython() {\n            const result = await hello();\n            document.getElementById(&amp;#39;result&amp;#39;).innerHTML = result;\n        }&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    async function callPythonWithArgs() {\n        const result = await add(40, 2);\n        document.getElementById(&amp;#39;result&amp;#39;).innerHTML = `Result: ${result}`;\n    }\n\n    function updateFromPython(message) {\n        document.getElementById(&amp;#39;result&amp;#39;).innerHTML = `Python says: ${message}`;\n    }\n&amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;lt;/head&amp;gt;\n&amp;lt;body&amp;gt;\n    &amp;lt;h1&amp;gt;Python-JavaScript Binding Demo&amp;lt;/h1&amp;gt;\n    &amp;lt;button onclick=&amp;quot;callPython()&amp;quot;&amp;gt;Call Python&amp;lt;/button&amp;gt;\n    &amp;lt;button onclick=&amp;quot;callPythonWithArgs()&amp;quot;&amp;gt;Call Python with Args&amp;lt;/button&amp;gt;\n    &amp;lt;div id=&amp;quot;result&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;\n&amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;\n&amp;quot;&amp;quot;&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;webview.navigate(f&amp;quot;data:text/html,{quote(html)}&amp;quot;)\nwebview.run()\n```&lt;/p&gt;\n\n&lt;h2&gt;API Overview&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;Webview()&lt;/code&gt;: Create a webview instance&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;webview.navigate(url)&lt;/code&gt;: Navigate to URL or load HTML content&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;webview.bind(name, func)&lt;/code&gt;: Bind Python function to JavaScript&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;webview.eval(js_code)&lt;/code&gt;: Execute JavaScript code&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;webview.run()&lt;/code&gt;: Start the webview main loop&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;Size(width, height, hint)&lt;/code&gt;: Configure window size&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;SizeHint&lt;/code&gt;: Window size hint constants&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Contributing&lt;/h2&gt;\n\n&lt;p&gt;Contributions are welcome! Please feel free to submit issues and pull requests.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/jt_YeVbS9lDX-mjZ-fLnNa99_wJ-5KAPmSzilWbWOx8.jpg?auto=webp&amp;s=c7d1c14139cd849e482f4fe00310fe098746f5f9",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/jt_YeVbS9lDX-mjZ-fLnNa99_wJ-5KAPmSzilWbWOx8.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=74a51824b92464110721ceba384eca341940a77e",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/jt_YeVbS9lDX-mjZ-fLnNa99_wJ-5KAPmSzilWbWOx8.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=984be50e068536fe525bc7fc4dbfce686048faed",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/jt_YeVbS9lDX-mjZ-fLnNa99_wJ-5KAPmSzilWbWOx8.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=d333344b6cae5b418c743f3b1ef3ccbe05443b77",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/jt_YeVbS9lDX-mjZ-fLnNa99_wJ-5KAPmSzilWbWOx8.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=4894896fa13378b6f93ed03fa0c7c68929d85fb4",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/jt_YeVbS9lDX-mjZ-fLnNa99_wJ-5KAPmSzilWbWOx8.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=24ee2b5b399cf80ef1e72188d93049275ec368ba",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/jt_YeVbS9lDX-mjZ-fLnNa99_wJ-5KAPmSzilWbWOx8.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=d22618fcf24e434d5f447d4cc01ced2c36c30f9a",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "Kw6Bm7ly6VP3aCf-d9KSRvzPDn0ATORbNfKT4XXGrsQ"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#7193ff",
            "id": "1giru7y",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "CongZhangZH",
            "discussion_type": null,
            "num_comments": 1,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1giru7y/a_new_webview_binding_for_python_call_4_test/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1giru7y/a_new_webview_binding_for_python_call_4_test/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730654027.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# What my project does\n\nHello r/Python!\n\nToday we want to announce the recent release of our free and open-source software desktop application that allows travelers to manage their custom equipment of artifacts and weapons for playable characters and makes it convenient for travelers to calculate the associated statistics based on their equipment using the semantic understanding of how the gameplay works.\n\nYou can find more information about the project from our [previous post](https://www.reddit.com/r/Genshin_Impact/comments/1fhgdhu/introducing_loadouts_for_genshin_impact/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button) in the subreddit.\n\n# Changelog\n\n* Seamless management of artifact scanning is possible using **clipboard insertion**\n   * Screenshots can be inserted directly from the clipboard using the **CTRL + V shortcut**\n   * Alternatively, the **drag and drop action** can be used for achieving the same purpose\n* Secondary ascension statistics scaling of the **four-star Cryo** character **\"Diona\"** were corrected\n* Secondary ascension statistics attribute of the **five-star Hydro** character **\"Sigewinne\"** were corrected\n* **New weapons** that were introduced with the recent Genshin Impact release have been added\n* **New characters** that were introduced with the recent Genshin Impact release have been added\n* **New artifacts** that were introduced with the recent Genshin Impact release have been added\n* Stellar overall codebase coverage quality is ensured with **100% coverage** of the functionality\n* Memory usage for **populating various weapon types** in the combobox was significantly reduced\n* Functional codebase was **significantly refactored** to encourage fellow travelers to contribute\n* Support for only **Python 3.12 and above** is applicable for release GI Loadouts v0.1.1 and above\n* **Automated dependency updates** were made for both runtime and development libraries\n* Cleaning up of **residual cached OCR training data** was enabled in case of unintended crashes\n* Better **exception handling routines** were introduced when handling in-game screenshots\n* Button **tooltip for the scanning button** on the main window was corrected from \"Load\" to \"Scan\"\n* Refinement selection combobox for weapons were fixed for **one-star and two-star weapons**\n* Correct the links and screenshots on the **project documentation** after the recent changes\n* Change the **continuous integration environment** from \"Fedora:Latest\" image to \"Fedora:40\" image\n\n# Illustrations\n\n* [Dash - Nahida on GNU/Linux distributions](https://raw.githubusercontent.com/gridhead/gi-loadouts/main/assets/docs/gnul_dark.png)\n* [Result - Nahida on GNU/Linux distributions](https://raw.githubusercontent.com/gridhead/gi-loadouts/main/assets/docs/gnul_dark_rslt.png)\n* [Dash - Venti on Microsoft Windows](https://raw.githubusercontent.com/gridhead/gi-loadouts/main/assets/docs/mswn_dark.png)\n* [Result - Venti on Microsoft Windows](https://raw.githubusercontent.com/gridhead/gi-loadouts/main/assets/docs/mswn_dark_rslt.png)\n\n# Resources\n\n* [Loadouts for Genshin Impact - GitHub](https://github.com/gridhead/gi-loadouts)\n* [Loadouts for Genshin Impact - PyPI](https://pypi.org/project/gi-loadouts/)\n* [Loadouts for Genshin Impact v0.1.1](https://github.com/gridhead/gi-loadouts/releases/tag/0.1.1)\n   * [Executable for GNU/Linux distributions](https://github.com/gridhead/gi-loadouts/releases/download/0.1.1/gi-loadouts-0.1.1)\n   * [Executable for Microsoft Windows](https://github.com/gridhead/gi-loadouts/releases/download/0.1.1/gi-loadouts-0.1.1.exe)\n\n# Appeal\n\nThis project is currently in its beta phase and we are committed to delivering a quality experience with every release we make. If you are excited about the direction of this project and want to contribute to the efforts, we would greatly appreciate it if you help us boost the project visibility by **starring the project repository**, address the releases by **reporting the experienced errors**, choose the direction by **proposing the intended features**, enhance the usability by **documenting the project repository**, improve the codebase by **opening the pull requests** and finally, persist our efforts by **sponsoring the development members**.\n\n# Note\n\nLoadouts for Genshin Impact is **not intended** to be a replacement for what **Akasha** and **Genshin Optimizer** already do. With **ecosystem support** of the more established JSON-based **Genshin Open Object Definition** (GOOD) serialization format and robust **optical character recognition** (OCR) support for artifact statistics scanning, this project is more intended to be a client-side supplement to more established tooling. The focus of the application is to ensure that travelers can mix and match their **custom equipment** of artifacts and weapons across various playable characters seamlessly to attempt multiple playstyles and team compositions easily.\n\n# Disclaimer\n\nAll rights to Genshin Impact assets used in this project are reserved by miHoYo Ltd. and Cognosphere Pte., Ltd.\n\nOther properties belong to their respective owners.\n\n# Target Audience\n\n* People playing Genshin Impact and wanting to customize their equipment\n* People wanting to learn about how optical character recognition works\n* People looking for an offline application for loadouts without telemetry and ads\n* People wanting to learn about how PySide6 development is performed\n\n# Comparison\n\n* Akasha System\n   * Proprietary codebase and closed-source web-based application\n   * Internet access is mandatorily required for basic operations\n   * Focuses more on the overall build of the characters and not equipment\n   * Supported by copious advertisements and invasive telemetry\n* Genshin Optimizer\n   * Free and open source codebase and web-based application\n   * Internet access is mandatorily required for basic operations\n   * Superficial overall control across characters, weapons and artifacts\n   * Supported by copious advertisements and invasive telemetry\n\nIn comparison to these, **Loadouts for Genshin Impact** is \n\n* Loadouts for Genshin Impact\n   * Free and open source codebase and desktop-based application\n   * Internet access is not required at all once the application is downloaded\n   * Focussed overall control across characters, weapons and artifacts\n   * Supported by donations and goodwill\n\n",
            "author_fullname": "t2_68q3mnyt",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Loadouts for Genshin Impact v0.1.1 is OUT NOW",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gire30",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.74,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 21,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 21,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730652892.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;What my project does&lt;/h1&gt;\n\n&lt;p&gt;Hello &lt;a href=\"/r/Python\"&gt;r/Python&lt;/a&gt;!&lt;/p&gt;\n\n&lt;p&gt;Today we want to announce the recent release of our free and open-source software desktop application that allows travelers to manage their custom equipment of artifacts and weapons for playable characters and makes it convenient for travelers to calculate the associated statistics based on their equipment using the semantic understanding of how the gameplay works.&lt;/p&gt;\n\n&lt;p&gt;You can find more information about the project from our &lt;a href=\"https://www.reddit.com/r/Genshin_Impact/comments/1fhgdhu/introducing_loadouts_for_genshin_impact/?utm_source=share&amp;amp;utm_medium=web3x&amp;amp;utm_name=web3xcss&amp;amp;utm_term=1&amp;amp;utm_content=share_button\"&gt;previous post&lt;/a&gt; in the subreddit.&lt;/p&gt;\n\n&lt;h1&gt;Changelog&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Seamless management of artifact scanning is possible using &lt;strong&gt;clipboard insertion&lt;/strong&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Screenshots can be inserted directly from the clipboard using the &lt;strong&gt;CTRL + V shortcut&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;Alternatively, the &lt;strong&gt;drag and drop action&lt;/strong&gt; can be used for achieving the same purpose&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Secondary ascension statistics scaling of the &lt;strong&gt;four-star Cryo&lt;/strong&gt; character &lt;strong&gt;&amp;quot;Diona&amp;quot;&lt;/strong&gt; were corrected&lt;/li&gt;\n&lt;li&gt;Secondary ascension statistics attribute of the &lt;strong&gt;five-star Hydro&lt;/strong&gt; character &lt;strong&gt;&amp;quot;Sigewinne&amp;quot;&lt;/strong&gt; were corrected&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;New weapons&lt;/strong&gt; that were introduced with the recent Genshin Impact release have been added&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;New characters&lt;/strong&gt; that were introduced with the recent Genshin Impact release have been added&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;New artifacts&lt;/strong&gt; that were introduced with the recent Genshin Impact release have been added&lt;/li&gt;\n&lt;li&gt;Stellar overall codebase coverage quality is ensured with &lt;strong&gt;100% coverage&lt;/strong&gt; of the functionality&lt;/li&gt;\n&lt;li&gt;Memory usage for &lt;strong&gt;populating various weapon types&lt;/strong&gt; in the combobox was significantly reduced&lt;/li&gt;\n&lt;li&gt;Functional codebase was &lt;strong&gt;significantly refactored&lt;/strong&gt; to encourage fellow travelers to contribute&lt;/li&gt;\n&lt;li&gt;Support for only &lt;strong&gt;Python 3.12 and above&lt;/strong&gt; is applicable for release GI Loadouts v0.1.1 and above&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Automated dependency updates&lt;/strong&gt; were made for both runtime and development libraries&lt;/li&gt;\n&lt;li&gt;Cleaning up of &lt;strong&gt;residual cached OCR training data&lt;/strong&gt; was enabled in case of unintended crashes&lt;/li&gt;\n&lt;li&gt;Better &lt;strong&gt;exception handling routines&lt;/strong&gt; were introduced when handling in-game screenshots&lt;/li&gt;\n&lt;li&gt;Button &lt;strong&gt;tooltip for the scanning button&lt;/strong&gt; on the main window was corrected from &amp;quot;Load&amp;quot; to &amp;quot;Scan&amp;quot;&lt;/li&gt;\n&lt;li&gt;Refinement selection combobox for weapons were fixed for &lt;strong&gt;one-star and two-star weapons&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;Correct the links and screenshots on the &lt;strong&gt;project documentation&lt;/strong&gt; after the recent changes&lt;/li&gt;\n&lt;li&gt;Change the &lt;strong&gt;continuous integration environment&lt;/strong&gt; from &amp;quot;Fedora:Latest&amp;quot; image to &amp;quot;Fedora:40&amp;quot; image&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Illustrations&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://raw.githubusercontent.com/gridhead/gi-loadouts/main/assets/docs/gnul_dark.png\"&gt;Dash - Nahida on GNU/Linux distributions&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://raw.githubusercontent.com/gridhead/gi-loadouts/main/assets/docs/gnul_dark_rslt.png\"&gt;Result - Nahida on GNU/Linux distributions&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://raw.githubusercontent.com/gridhead/gi-loadouts/main/assets/docs/mswn_dark.png\"&gt;Dash - Venti on Microsoft Windows&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://raw.githubusercontent.com/gridhead/gi-loadouts/main/assets/docs/mswn_dark_rslt.png\"&gt;Result - Venti on Microsoft Windows&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Resources&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/gridhead/gi-loadouts\"&gt;Loadouts for Genshin Impact - GitHub&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://pypi.org/project/gi-loadouts/\"&gt;Loadouts for Genshin Impact - PyPI&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/gridhead/gi-loadouts/releases/tag/0.1.1\"&gt;Loadouts for Genshin Impact v0.1.1&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/gridhead/gi-loadouts/releases/download/0.1.1/gi-loadouts-0.1.1\"&gt;Executable for GNU/Linux distributions&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/gridhead/gi-loadouts/releases/download/0.1.1/gi-loadouts-0.1.1.exe\"&gt;Executable for Microsoft Windows&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Appeal&lt;/h1&gt;\n\n&lt;p&gt;This project is currently in its beta phase and we are committed to delivering a quality experience with every release we make. If you are excited about the direction of this project and want to contribute to the efforts, we would greatly appreciate it if you help us boost the project visibility by &lt;strong&gt;starring the project repository&lt;/strong&gt;, address the releases by &lt;strong&gt;reporting the experienced errors&lt;/strong&gt;, choose the direction by &lt;strong&gt;proposing the intended features&lt;/strong&gt;, enhance the usability by &lt;strong&gt;documenting the project repository&lt;/strong&gt;, improve the codebase by &lt;strong&gt;opening the pull requests&lt;/strong&gt; and finally, persist our efforts by &lt;strong&gt;sponsoring the development members&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;h1&gt;Note&lt;/h1&gt;\n\n&lt;p&gt;Loadouts for Genshin Impact is &lt;strong&gt;not intended&lt;/strong&gt; to be a replacement for what &lt;strong&gt;Akasha&lt;/strong&gt; and &lt;strong&gt;Genshin Optimizer&lt;/strong&gt; already do. With &lt;strong&gt;ecosystem support&lt;/strong&gt; of the more established JSON-based &lt;strong&gt;Genshin Open Object Definition&lt;/strong&gt; (GOOD) serialization format and robust &lt;strong&gt;optical character recognition&lt;/strong&gt; (OCR) support for artifact statistics scanning, this project is more intended to be a client-side supplement to more established tooling. The focus of the application is to ensure that travelers can mix and match their &lt;strong&gt;custom equipment&lt;/strong&gt; of artifacts and weapons across various playable characters seamlessly to attempt multiple playstyles and team compositions easily.&lt;/p&gt;\n\n&lt;h1&gt;Disclaimer&lt;/h1&gt;\n\n&lt;p&gt;All rights to Genshin Impact assets used in this project are reserved by miHoYo Ltd. and Cognosphere Pte., Ltd.&lt;/p&gt;\n\n&lt;p&gt;Other properties belong to their respective owners.&lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;People playing Genshin Impact and wanting to customize their equipment&lt;/li&gt;\n&lt;li&gt;People wanting to learn about how optical character recognition works&lt;/li&gt;\n&lt;li&gt;People looking for an offline application for loadouts without telemetry and ads&lt;/li&gt;\n&lt;li&gt;People wanting to learn about how PySide6 development is performed&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Akasha System\n\n&lt;ul&gt;\n&lt;li&gt;Proprietary codebase and closed-source web-based application&lt;/li&gt;\n&lt;li&gt;Internet access is mandatorily required for basic operations&lt;/li&gt;\n&lt;li&gt;Focuses more on the overall build of the characters and not equipment&lt;/li&gt;\n&lt;li&gt;Supported by copious advertisements and invasive telemetry&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Genshin Optimizer\n\n&lt;ul&gt;\n&lt;li&gt;Free and open source codebase and web-based application&lt;/li&gt;\n&lt;li&gt;Internet access is mandatorily required for basic operations&lt;/li&gt;\n&lt;li&gt;Superficial overall control across characters, weapons and artifacts&lt;/li&gt;\n&lt;li&gt;Supported by copious advertisements and invasive telemetry&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;In comparison to these, &lt;strong&gt;Loadouts for Genshin Impact&lt;/strong&gt; is &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Loadouts for Genshin Impact\n\n&lt;ul&gt;\n&lt;li&gt;Free and open source codebase and desktop-based application&lt;/li&gt;\n&lt;li&gt;Internet access is not required at all once the application is downloaded&lt;/li&gt;\n&lt;li&gt;Focussed overall control across characters, weapons and artifacts&lt;/li&gt;\n&lt;li&gt;Supported by donations and goodwill&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/Ca1gmoPHQurTpiLc9uUS0eaIEm80_6BOy4G-0mmLYaw.png?auto=webp&amp;s=6172222fa4bb18c21dc5756f8e83fba7692aa454",
                            "width": 1597,
                            "height": 984
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/Ca1gmoPHQurTpiLc9uUS0eaIEm80_6BOy4G-0mmLYaw.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=7d84316a5f60a1823c728d863ceb6e99db1cff20",
                                "width": 108,
                                "height": 66
                            },
                            {
                                "url": "https://external-preview.redd.it/Ca1gmoPHQurTpiLc9uUS0eaIEm80_6BOy4G-0mmLYaw.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=6ab083d2de1296cdb10b8dd80fa3eff4ed7a3a71",
                                "width": 216,
                                "height": 133
                            },
                            {
                                "url": "https://external-preview.redd.it/Ca1gmoPHQurTpiLc9uUS0eaIEm80_6BOy4G-0mmLYaw.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=8b9afee4716b28a8bc515377463c1f2f127a1af0",
                                "width": 320,
                                "height": 197
                            },
                            {
                                "url": "https://external-preview.redd.it/Ca1gmoPHQurTpiLc9uUS0eaIEm80_6BOy4G-0mmLYaw.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=07940a454380e989c8083fbbc4ae5fed47642e53",
                                "width": 640,
                                "height": 394
                            },
                            {
                                "url": "https://external-preview.redd.it/Ca1gmoPHQurTpiLc9uUS0eaIEm80_6BOy4G-0mmLYaw.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=0fe5a44c7c972f639dc6a72045772f2d50ea556b",
                                "width": 960,
                                "height": 591
                            },
                            {
                                "url": "https://external-preview.redd.it/Ca1gmoPHQurTpiLc9uUS0eaIEm80_6BOy4G-0mmLYaw.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=d0b995d5d640787f1b7ed47760606a0bd3047ab6",
                                "width": 1080,
                                "height": 665
                            }
                        ],
                        "variants": {},
                        "id": "G86foRa-GpRz7MvyTKeBJFcL00LRM9FipRa5SGQ2xeA"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gire30",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "t0xic0der",
            "discussion_type": null,
            "num_comments": 5,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gire30/loadouts_for_genshin_impact_v011_is_out_now/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gire30/loadouts_for_genshin_impact_v011_is_out_now/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730652892.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hi folks,\n\nI wrote a guide on discrete-event simulation with [SimPy](https://simpy.readthedocs.io/en/latest/), designed to help you learn how to build simulations using Python. Kind of like the official documentation but on steroids.\n\nI have used SimPy personally in my own career for over a decade, it was central in helping me build a [pretty successful engineering career](https://www.reddit.com/r/MechanicalEngineering/comments/1gh8at0/my_13_year_nontraditional_meche_career_journey/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button). Discrete-event simulation is useful for modelling real world industrial systems such as factories, mines, railways, etc.\n\nMy latest venture is teaching others all about this.\n\nIf you do get the guide, I’d really appreciate any feedback you have. Feel free to drop your thoughts here in the thread or DM me directly!\n\nHere’s the link to get the guide: [https://simulation.teachem.digital/free-simulation-in-python-guide](https://simulation.teachem.digital/free-simulation-in-python-guide)\n\nFor full transparency, why do I ask for your email?\n\nWell I’m working on a full course following on from my previous [Udemy course on Python](https://www.udemy.com/course/python-for-engineers-scientists-and-analysts/?referralCode=8E30A5C432085F42D090). This new course will be all about real-world modelling and simulation with SimPy, and I’d love to send you keep you in the loop via email. If you found the guide helpful you would might be interested in the course. That said, you’re completely free to hit “unsubscribe” after the guide arrives if you prefer.",
            "author_fullname": "t2_7alzrfpm",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "I Wrote a Guide to Simulation in Python with SimPy",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Tutorial"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "tutorial",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gipp8a",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.91,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 87,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Tutorial",
            "can_mod_post": false,
            "score": 87,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1730665353.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730648489.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi folks,&lt;/p&gt;\n\n&lt;p&gt;I wrote a guide on discrete-event simulation with &lt;a href=\"https://simpy.readthedocs.io/en/latest/\"&gt;SimPy&lt;/a&gt;, designed to help you learn how to build simulations using Python. Kind of like the official documentation but on steroids.&lt;/p&gt;\n\n&lt;p&gt;I have used SimPy personally in my own career for over a decade, it was central in helping me build a &lt;a href=\"https://www.reddit.com/r/MechanicalEngineering/comments/1gh8at0/my_13_year_nontraditional_meche_career_journey/?utm_source=share&amp;amp;utm_medium=web3x&amp;amp;utm_name=web3xcss&amp;amp;utm_term=1&amp;amp;utm_content=share_button\"&gt;pretty successful engineering career&lt;/a&gt;. Discrete-event simulation is useful for modelling real world industrial systems such as factories, mines, railways, etc.&lt;/p&gt;\n\n&lt;p&gt;My latest venture is teaching others all about this.&lt;/p&gt;\n\n&lt;p&gt;If you do get the guide, I’d really appreciate any feedback you have. Feel free to drop your thoughts here in the thread or DM me directly!&lt;/p&gt;\n\n&lt;p&gt;Here’s the link to get the guide: &lt;a href=\"https://simulation.teachem.digital/free-simulation-in-python-guide\"&gt;https://simulation.teachem.digital/free-simulation-in-python-guide&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;For full transparency, why do I ask for your email?&lt;/p&gt;\n\n&lt;p&gt;Well I’m working on a full course following on from my previous &lt;a href=\"https://www.udemy.com/course/python-for-engineers-scientists-and-analysts/?referralCode=8E30A5C432085F42D090\"&gt;Udemy course on Python&lt;/a&gt;. This new course will be all about real-world modelling and simulation with SimPy, and I’d love to send you keep you in the loop via email. If you found the guide helpful you would might be interested in the course. That said, you’re completely free to hit “unsubscribe” after the guide arrives if you prefer.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#dadada",
            "id": "1gipp8a",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "bobo-the-merciful",
            "discussion_type": null,
            "num_comments": 13,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gipp8a/i_wrote_a_guide_to_simulation_in_python_with_simpy/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gipp8a/i_wrote_a_guide_to_simulation_in_python_with_simpy/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730648489.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Showcasing a new major version (1.0.0) of [Stockdex](https://github.com/ahnazary/stockdex), a Python package that provides a simple interface to access financial data from various sources and plotting financiial data using Plotly and Dash.\n\n## What my project does\n\nWhile there are some packages that provide financial data (like yfinance), they have few shortcomings which Stockdex aims to address as follows:\n\n- Various data sources: Stockdex provides data from Yahoo Finance API and website, Digrin, Macrotrends, and JustETF (for EU ETFs).\n\n- Numerous data categories: Stockdex provides various data including financial statements, earnings, dividends, stock splits, list of key executives, major shareholders, and many more.\n\n- Historical data: Stockdex provides a wide time range of data, e.g. Digrin and Macrotrends sources, which provide data ranging from 4 years to historical data.\n\n- plotting capabilities (new feature): Stockdex provides plotting financial data using bar, line, and sanky plots. Multiple plots can be combined in dash app.\n\ncheck out [this usage guide](https://github.com/ahnazary/stockdex/blob/main/USAGE.md) for detailed info about usage of the package and its functions including plotting and dash app examples.\n\n\n[GitHub link](https://github.com/ahnazary/stockdex)\n\n[Pypi link](https://pypi.org/project/stockdex/)",
            "author_fullname": "t2_uem2ag7k1",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Stockdex: Python Package to Extract and plot Financial Data ",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gioovh",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.72,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 10,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 10,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730645829.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Showcasing a new major version (1.0.0) of &lt;a href=\"https://github.com/ahnazary/stockdex\"&gt;Stockdex&lt;/a&gt;, a Python package that provides a simple interface to access financial data from various sources and plotting financiial data using Plotly and Dash.&lt;/p&gt;\n\n&lt;h2&gt;What my project does&lt;/h2&gt;\n\n&lt;p&gt;While there are some packages that provide financial data (like yfinance), they have few shortcomings which Stockdex aims to address as follows:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Various data sources: Stockdex provides data from Yahoo Finance API and website, Digrin, Macrotrends, and JustETF (for EU ETFs).&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Numerous data categories: Stockdex provides various data including financial statements, earnings, dividends, stock splits, list of key executives, major shareholders, and many more.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Historical data: Stockdex provides a wide time range of data, e.g. Digrin and Macrotrends sources, which provide data ranging from 4 years to historical data.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;plotting capabilities (new feature): Stockdex provides plotting financial data using bar, line, and sanky plots. Multiple plots can be combined in dash app.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;check out &lt;a href=\"https://github.com/ahnazary/stockdex/blob/main/USAGE.md\"&gt;this usage guide&lt;/a&gt; for detailed info about usage of the package and its functions including plotting and dash app examples.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/ahnazary/stockdex\"&gt;GitHub link&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://pypi.org/project/stockdex/\"&gt;Pypi link&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/LDqpn95qD4hTjqGm58JW8IM5U40T1_xPSXk7D2weI5c.jpg?auto=webp&amp;s=9cb2ae9860e1f0f0ffc65a6aa53e0c40ebd6624b",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/LDqpn95qD4hTjqGm58JW8IM5U40T1_xPSXk7D2weI5c.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=f7a09b11c5a3aba81cb6d8dbc02d3824f4eb3302",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/LDqpn95qD4hTjqGm58JW8IM5U40T1_xPSXk7D2weI5c.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=e8b2b378f681fc64d651ba998a888861c50a613f",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/LDqpn95qD4hTjqGm58JW8IM5U40T1_xPSXk7D2weI5c.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=3649a56a2936d473a84d2993c622be40ae0b7623",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/LDqpn95qD4hTjqGm58JW8IM5U40T1_xPSXk7D2weI5c.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=89924b2cd94fb02f0cdde2f1e9d51b8a43f48ddd",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/LDqpn95qD4hTjqGm58JW8IM5U40T1_xPSXk7D2weI5c.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=5212e76646bca221ed71c3f4ff6a4b16ee258092",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/LDqpn95qD4hTjqGm58JW8IM5U40T1_xPSXk7D2weI5c.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=fd0232c34768eb9319116cfaa46744196127fe7c",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "rZEYwRcZw8fq_rzcvxq-pRLbpQu7IjPwM1c2yVk9eBQ"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gioovh",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "nginx26",
            "discussion_type": null,
            "num_comments": 4,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gioovh/stockdex_python_package_to_extract_and_plot/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gioovh/stockdex_python_package_to_extract_and_plot/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730645829.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# What My Project Does\n\nSource : [https://github.com/leogout/rasper-ducky](https://github.com/leogout/rasper-ducky)\n\nAn implementation of DuckyScript3 used for **keystroke injections attacks** to run on a Raspberry Pi Pico.\n\n*What is a keystroke injection attack* you may ask? \n\nIt is the reason why you **shouldn't plug any unknown USB key in any computer**. This device will not be recognized as a storage device, but as a keyboard... From there, a program running on the key will inject key-presses like \"Windows + R\", then type \"powershell\" and press \"Enter\". If you try it in this order on a Windows computer it will open a command line prompt... From here, injecting malicious commands could be very harmful.\n\nA USB RubberDucky is a tool that you can buy on [https://shop.hak5.org/products/usb-rubber-ducky](https://shop.hak5.org/products/usb-rubber-ducky), and it allows someone to do what I described above with a special scripting language called **DuckyScript**. I am not affiliated with Hack5, the company selling these.\n\nMy goal is to write a Python interpreter to port as much commands from DuckyScript as possible to run them on a RaspberryPi Pico with CircuitPython. It's a fun little side project that I've loved working on lately and I wanted to show it to you here.\n\n# How the Project was Developed\n\nI read the docs for DuckyScript an reimplemented commands one by one using Python and CircuitPy. I used the insights of this great ebook : [https://craftinginterpreters.com/](https://craftinginterpreters.com/) and I got inspired by [https://github.com/dbisu/pico-ducky](https://github.com/dbisu/pico-ducky) which does the same thing with less features. \n\nAt first I tried to contribute to this project but I got no answers from the owner and the way the code was written didn't correspond to the way I would have done it, so it gave me the motivation to create my own.\n\n# Target Audience\n\nI did not think of that before making this post. Honestly I do it for fun so there wasn't really any expectations on a target audience, but here is what comes on top of my mind when I think of it :\n\n* CyberSecurity agents to sensitize their co-workers with demonstrations of what harm could cause a keystroke injection attack\n* CyberSecurity students to showcase how trivial this kind of attacks is nowadays\n* People who enjoy hacking as a hobby\n* People who want to contribute to this project\n\n This project is NOT targeting Black Hat hackers or script kiddies. It is NOT a replacement for RubberDucky as well, their hardware is much better than a Raspberry Pi Pico. ",
            "author_fullname": "t2_4pzjxlrd",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "RasperDucky, an implementation of DuckyScript3 to run on a Raspberry Pico",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gikerv",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.88,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 11,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 11,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730631843.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;Source : &lt;a href=\"https://github.com/leogout/rasper-ducky\"&gt;https://github.com/leogout/rasper-ducky&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;An implementation of DuckyScript3 used for &lt;strong&gt;keystroke injections attacks&lt;/strong&gt; to run on a Raspberry Pi Pico.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;What is a keystroke injection attack&lt;/em&gt; you may ask? &lt;/p&gt;\n\n&lt;p&gt;It is the reason why you &lt;strong&gt;shouldn&amp;#39;t plug any unknown USB key in any computer&lt;/strong&gt;. This device will not be recognized as a storage device, but as a keyboard... From there, a program running on the key will inject key-presses like &amp;quot;Windows + R&amp;quot;, then type &amp;quot;powershell&amp;quot; and press &amp;quot;Enter&amp;quot;. If you try it in this order on a Windows computer it will open a command line prompt... From here, injecting malicious commands could be very harmful.&lt;/p&gt;\n\n&lt;p&gt;A USB RubberDucky is a tool that you can buy on &lt;a href=\"https://shop.hak5.org/products/usb-rubber-ducky\"&gt;https://shop.hak5.org/products/usb-rubber-ducky&lt;/a&gt;, and it allows someone to do what I described above with a special scripting language called &lt;strong&gt;DuckyScript&lt;/strong&gt;. I am not affiliated with Hack5, the company selling these.&lt;/p&gt;\n\n&lt;p&gt;My goal is to write a Python interpreter to port as much commands from DuckyScript as possible to run them on a RaspberryPi Pico with CircuitPython. It&amp;#39;s a fun little side project that I&amp;#39;ve loved working on lately and I wanted to show it to you here.&lt;/p&gt;\n\n&lt;h1&gt;How the Project was Developed&lt;/h1&gt;\n\n&lt;p&gt;I read the docs for DuckyScript an reimplemented commands one by one using Python and CircuitPy. I used the insights of this great ebook : &lt;a href=\"https://craftinginterpreters.com/\"&gt;https://craftinginterpreters.com/&lt;/a&gt; and I got inspired by &lt;a href=\"https://github.com/dbisu/pico-ducky\"&gt;https://github.com/dbisu/pico-ducky&lt;/a&gt; which does the same thing with less features. &lt;/p&gt;\n\n&lt;p&gt;At first I tried to contribute to this project but I got no answers from the owner and the way the code was written didn&amp;#39;t correspond to the way I would have done it, so it gave me the motivation to create my own.&lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;I did not think of that before making this post. Honestly I do it for fun so there wasn&amp;#39;t really any expectations on a target audience, but here is what comes on top of my mind when I think of it :&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;CyberSecurity agents to sensitize their co-workers with demonstrations of what harm could cause a keystroke injection attack&lt;/li&gt;\n&lt;li&gt;CyberSecurity students to showcase how trivial this kind of attacks is nowadays&lt;/li&gt;\n&lt;li&gt;People who enjoy hacking as a hobby&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;People who want to contribute to this project&lt;/p&gt;\n\n&lt;p&gt;This project is NOT targeting Black Hat hackers or script kiddies. It is NOT a replacement for RubberDucky as well, their hardware is much better than a Raspberry Pi Pico. &lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/JOAvBqyVmec8Dw8WREDQmQKbfqjQL7sZAp6GZKfdWUU.jpg?auto=webp&amp;s=c05679e73accb704930f1d4bfa69ce74f5731b16",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/JOAvBqyVmec8Dw8WREDQmQKbfqjQL7sZAp6GZKfdWUU.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=fba9aab63dd8a60a8ec5c791ddce9d1284232db5",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/JOAvBqyVmec8Dw8WREDQmQKbfqjQL7sZAp6GZKfdWUU.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=77a2d6ee8560069a3f7367c9d1b85f6e78beecf7",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/JOAvBqyVmec8Dw8WREDQmQKbfqjQL7sZAp6GZKfdWUU.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=28b825387c52b18f0ad56cafef33e2f85f43791c",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/JOAvBqyVmec8Dw8WREDQmQKbfqjQL7sZAp6GZKfdWUU.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=bc054bbbe4b6510587b7ff9650b302912638ae79",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/JOAvBqyVmec8Dw8WREDQmQKbfqjQL7sZAp6GZKfdWUU.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=0fb7a610579c916d9907183d5d2e8a3276c8947b",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/JOAvBqyVmec8Dw8WREDQmQKbfqjQL7sZAp6GZKfdWUU.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=7b082c63ac8c2114a504741e78db29299aae8fe2",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "NWKEQszhQ1HNpB7VVsBiommJu69v-N4WRJugGKHs9po"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gikerv",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "leogoutt",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gikerv/rasperducky_an_implementation_of_duckyscript3_to/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gikerv/rasperducky_an_implementation_of_duckyscript3_to/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730631843.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "### What My Project Does\n- Code: https://github.com/daya0576/beaverhabits/ \n- Demo: https://beaverhabits.com/demo/\n\nWhen switching from Android to iOS, I was unable to find a light-weighted but handy habit tracking app, so I decided to make one by myself :p\n\nThe project's name (Beaver Habit Tracker) came from a game called \"Against the Storm\" (which I spent over 200 hours, highly recommended). In the game, my favourite species is the beaver, hoping this web app works as a beaver to record ur precious moments in your fleeting life.\n\n---\n\n### How the Project was Developed\nInspired the idea of \"web UIs with plain Python\" from [Three Python trends in 2023](https://blog.jerrycodes.com/python-trends-in-2023/), I developed a web app with 100% pure Python &lt;3\n\nThe app is powered by an out-of-the-box framework called [NiceGUI](https://nicegui.io/) (including Quasar, Tailwind CSS, FastAPI, ...).\n\nSome thoughts to share after several months of development:\n\n- Good things ✅\n  1. WebSocket based communication between client and server, **works perfectly with Python asyncio**\n  2. Light-weighted session based storage provided, out of the box to use\n  3. Plenty of UI components provided, straightforward and highly customizable\n  4. ...\n- Disadvantages:\n  1. The framework NiceGUI follows a backend-first philosophy: It hadles everything on the server side -&gt; network latency could be a significant issue, may impacting the PWA experience\n  2. ...\n\nOverall, as a Python programmer, the full stack web app development experience is smooth and awesome. \n\n---\n\n### Target Audience\nThis app is suitable for anyone who is passionate about recording life.\n\nHere are my [table tennis session records](https://github.com/daya0576/beaverhabits/blob/main/README.md#streaks) over the past year🏓. \n\nThses streaks make me feel satisfied and alive❤️ \n\n---\n\n### Comparison\nWe can compare it to other habit tracker apps, but the streaks feature makes this app unique :p",
            "author_fullname": "t2_869q098f",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "A selfhosted web app built with plain Python",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1giizja",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.88,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 74,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 74,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730625477.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h3&gt;What My Project Does&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Code: &lt;a href=\"https://github.com/daya0576/beaverhabits/\"&gt;https://github.com/daya0576/beaverhabits/&lt;/a&gt; &lt;/li&gt;\n&lt;li&gt;Demo: &lt;a href=\"https://beaverhabits.com/demo/\"&gt;https://beaverhabits.com/demo/&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;When switching from Android to iOS, I was unable to find a light-weighted but handy habit tracking app, so I decided to make one by myself :p&lt;/p&gt;\n\n&lt;p&gt;The project&amp;#39;s name (Beaver Habit Tracker) came from a game called &amp;quot;Against the Storm&amp;quot; (which I spent over 200 hours, highly recommended). In the game, my favourite species is the beaver, hoping this web app works as a beaver to record ur precious moments in your fleeting life.&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h3&gt;How the Project was Developed&lt;/h3&gt;\n\n&lt;p&gt;Inspired the idea of &amp;quot;web UIs with plain Python&amp;quot; from &lt;a href=\"https://blog.jerrycodes.com/python-trends-in-2023/\"&gt;Three Python trends in 2023&lt;/a&gt;, I developed a web app with 100% pure Python &amp;lt;3&lt;/p&gt;\n\n&lt;p&gt;The app is powered by an out-of-the-box framework called &lt;a href=\"https://nicegui.io/\"&gt;NiceGUI&lt;/a&gt; (including Quasar, Tailwind CSS, FastAPI, ...).&lt;/p&gt;\n\n&lt;p&gt;Some thoughts to share after several months of development:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Good things ✅\n\n&lt;ol&gt;\n&lt;li&gt;WebSocket based communication between client and server, &lt;strong&gt;works perfectly with Python asyncio&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;Light-weighted session based storage provided, out of the box to use&lt;/li&gt;\n&lt;li&gt;Plenty of UI components provided, straightforward and highly customizable&lt;/li&gt;\n&lt;li&gt;...&lt;/li&gt;\n&lt;/ol&gt;&lt;/li&gt;\n&lt;li&gt;Disadvantages:\n\n&lt;ol&gt;\n&lt;li&gt;The framework NiceGUI follows a backend-first philosophy: It hadles everything on the server side -&amp;gt; network latency could be a significant issue, may impacting the PWA experience&lt;/li&gt;\n&lt;li&gt;...&lt;/li&gt;\n&lt;/ol&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Overall, as a Python programmer, the full stack web app development experience is smooth and awesome. &lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h3&gt;Target Audience&lt;/h3&gt;\n\n&lt;p&gt;This app is suitable for anyone who is passionate about recording life.&lt;/p&gt;\n\n&lt;p&gt;Here are my &lt;a href=\"https://github.com/daya0576/beaverhabits/blob/main/README.md#streaks\"&gt;table tennis session records&lt;/a&gt; over the past year🏓. &lt;/p&gt;\n\n&lt;p&gt;Thses streaks make me feel satisfied and alive❤️ &lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h3&gt;Comparison&lt;/h3&gt;\n\n&lt;p&gt;We can compare it to other habit tracker apps, but the streaks feature makes this app unique :p&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/aajFqM0sDOYisSbZeBC2gXGKr7tIH5NUgtOsggzInHk.jpg?auto=webp&amp;s=a607a59c58acf0f0542cdde0ae87d5893e33537a",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/aajFqM0sDOYisSbZeBC2gXGKr7tIH5NUgtOsggzInHk.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=9a5e5ca6bfda61d3e3df4bc7b83f81743b2f7c70",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/aajFqM0sDOYisSbZeBC2gXGKr7tIH5NUgtOsggzInHk.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=ebcbba799e9d775cbfb93c6bbbf218894bcb806e",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/aajFqM0sDOYisSbZeBC2gXGKr7tIH5NUgtOsggzInHk.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=ae13e58913285b1d79d0d33b2aa1ac68f1595828",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/aajFqM0sDOYisSbZeBC2gXGKr7tIH5NUgtOsggzInHk.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=6bcfd0841fb53a07bc130540a2a8597230396bf9",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/aajFqM0sDOYisSbZeBC2gXGKr7tIH5NUgtOsggzInHk.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=44760abc777339f65d2ab67129b5284eea6b059a",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/aajFqM0sDOYisSbZeBC2gXGKr7tIH5NUgtOsggzInHk.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=fb28e868bd95dfa4c6cc25e1f510838187a84905",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "KZHUiOWJ1l70MADd5s1m9-ZCAPvvbqOGBxU_QBvpwN0"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1giizja",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Sufficient_South5254",
            "discussion_type": null,
            "num_comments": 25,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1giizja/a_selfhosted_web_app_built_with_plain_python/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1giizja/a_selfhosted_web_app_built_with_plain_python/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730625477.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I have finished my first project and would like to show it off. My Project is a simple flight calculator for amateur rockets. It was built to aid the rough calc and design stage so one could model a rocket with out having a full design. It has a easy to use GUI to guide the user in imputing the characteristics of the rocket. It also has stand alone simulation module that can be run if the user prefer the script method. \n\nThe target audience is my colleague in the university but anyone working with amateur rockets should should be able to use this tool.\n\nThe two main alternatives would be open rocket (java based) and rocketpy. Both are well built, tested and accepted in the industry but my project should be simpler to use and will not require a full model build out to run models. \n\nThe application download is available here (Windows only):  \n[https://github.com/andrerhenry/RocketModel/releases](https://github.com/andrerhenry/RocketModel/releases)  \n  \nSource code is here:  \n[https://github.com/andrerhenry/RocketModel](https://github.com/andrerhenry/RocketModel)",
            "author_fullname": "t2_b8t1umbc",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Project showcase: Rocket Model",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gifc2t",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.8,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 13,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 13,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730609118.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have finished my first project and would like to show it off. My Project is a simple flight calculator for amateur rockets. It was built to aid the rough calc and design stage so one could model a rocket with out having a full design. It has a easy to use GUI to guide the user in imputing the characteristics of the rocket. It also has stand alone simulation module that can be run if the user prefer the script method. &lt;/p&gt;\n\n&lt;p&gt;The target audience is my colleague in the university but anyone working with amateur rockets should should be able to use this tool.&lt;/p&gt;\n\n&lt;p&gt;The two main alternatives would be open rocket (java based) and rocketpy. Both are well built, tested and accepted in the industry but my project should be simpler to use and will not require a full model build out to run models. &lt;/p&gt;\n\n&lt;p&gt;The application download is available here (Windows only):&lt;br/&gt;\n&lt;a href=\"https://github.com/andrerhenry/RocketModel/releases\"&gt;https://github.com/andrerhenry/RocketModel/releases&lt;/a&gt;  &lt;/p&gt;\n\n&lt;p&gt;Source code is here:&lt;br/&gt;\n&lt;a href=\"https://github.com/andrerhenry/RocketModel\"&gt;https://github.com/andrerhenry/RocketModel&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/if9FKt1cVFCHab5JnL02hcu7npWgQxYe-mKlEULs6gg.jpg?auto=webp&amp;s=8039160ff0a6c4df1a46687db554947ed3072d00",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/if9FKt1cVFCHab5JnL02hcu7npWgQxYe-mKlEULs6gg.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=5ed346a13b4e8b615648631523a13ce6b6179cdb",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/if9FKt1cVFCHab5JnL02hcu7npWgQxYe-mKlEULs6gg.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=52319c9778b32db5c137bdda27f72e91fe0557a8",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/if9FKt1cVFCHab5JnL02hcu7npWgQxYe-mKlEULs6gg.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=c9d0d19d070992395e64a411b79a4de11eb3c28f",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/if9FKt1cVFCHab5JnL02hcu7npWgQxYe-mKlEULs6gg.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=bbfbe16336d958d853956143b4501a181d03dbdb",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/if9FKt1cVFCHab5JnL02hcu7npWgQxYe-mKlEULs6gg.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=2e26559121d20cd5f738741c6da6c60aa78928c5",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/if9FKt1cVFCHab5JnL02hcu7npWgQxYe-mKlEULs6gg.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=7dddab0c9ff2a9e926b96d7607a1bd6153699d6c",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "XrbCGw-_gv1rH2C3CNiQDyMoJ4podd-PCAOT0tKvtTI"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gifc2t",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Ajax_Minor",
            "discussion_type": null,
            "num_comments": 5,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gifc2t/project_showcase_rocket_model/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gifc2t/project_showcase_rocket_model/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730609118.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hey Everyone 👋\n\nWe just launched OpenAPI docs generation in Robyn. - [https://github.com/sparckles/Robyn/releases/tag/v0.63.0](https://github.com/sparckles/Robyn/releases/tag/v0.63.0)\n\n(For the unaware [Robyn](http://github.com/sparckles/robyn) is a Super Fast Async Python Web Framework with a Rust runtime. )\n\nIt was one of our community's most requested features, and I hope you all will like it.\n\nDo let us know what you think of it 😊\n\nYou can find the docs at -  [https://robyn.tech/documentation/api\\_reference/openapi](https://robyn.tech/documentation/api_reference/openapi)",
            "author_fullname": "t2_5xu8opjs",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Robyn finally supports OpenAPI/Swagger ",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "News"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "news",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gieai3",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.84,
            "author_flair_background_color": "#ddbd37",
            "subreddit_type": "public",
            "ups": 33,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": "193a4852-45e1-11ee-b7ed-124fa8428159",
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "News",
            "can_mod_post": false,
            "score": 33,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1730605618.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [
                {
                    "a": ":robyn-logo:",
                    "e": "emoji",
                    "u": "https://emoji.redditmedia.com/zgjnx9oergkb1_t5_2qh0y/robyn-logo"
                },
                {
                    "e": "text",
                    "t": " Robyn Maintainer"
                }
            ],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730605384.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "richtext",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey Everyone 👋&lt;/p&gt;\n\n&lt;p&gt;We just launched OpenAPI docs generation in Robyn. - &lt;a href=\"https://github.com/sparckles/Robyn/releases/tag/v0.63.0\"&gt;https://github.com/sparckles/Robyn/releases/tag/v0.63.0&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;(For the unaware &lt;a href=\"http://github.com/sparckles/robyn\"&gt;Robyn&lt;/a&gt; is a Super Fast Async Python Web Framework with a Rust runtime. )&lt;/p&gt;\n\n&lt;p&gt;It was one of our community&amp;#39;s most requested features, and I hope you all will like it.&lt;/p&gt;\n\n&lt;p&gt;Do let us know what you think of it 😊&lt;/p&gt;\n\n&lt;p&gt;You can find the docs at -  &lt;a href=\"https://robyn.tech/documentation/api_reference/openapi\"&gt;https://robyn.tech/documentation/api_reference/openapi&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/GD0xIJwgPmodYJFTIo0jM1s7BWR42zIG03xLadsJoPU.jpg?auto=webp&amp;s=0e9aa7f89f750afb93e7aa7e48dc16535698f6fd",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/GD0xIJwgPmodYJFTIo0jM1s7BWR42zIG03xLadsJoPU.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=69a7391c13fb85e229cd93b6e248b25974bd0c3b",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/GD0xIJwgPmodYJFTIo0jM1s7BWR42zIG03xLadsJoPU.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=e8972d7ea7409639fd8503a38b4badc4713edc66",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/GD0xIJwgPmodYJFTIo0jM1s7BWR42zIG03xLadsJoPU.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=eddb23283ecd0130526fdb394931d786742adf5f",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/GD0xIJwgPmodYJFTIo0jM1s7BWR42zIG03xLadsJoPU.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=0e404e3d8daf99fb364affcc1e8dbea11a1c367e",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/GD0xIJwgPmodYJFTIo0jM1s7BWR42zIG03xLadsJoPU.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=34d635fe1cd45542fd4706df79b324bc35136437",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/GD0xIJwgPmodYJFTIo0jM1s7BWR42zIG03xLadsJoPU.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=f7b276559538128c739b339a06660476d2423892",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "w_stq02QvD5SZD4V8weszcL5z4g3G-r2ua5v9H5gG94"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": ":robyn-logo: Robyn Maintainer",
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#7193ff",
            "id": "1gieai3",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "stealthanthrax",
            "discussion_type": null,
            "num_comments": 11,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": "dark",
            "permalink": "/r/Python/comments/1gieai3/robyn_finally_supports_openapiswagger/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gieai3/robyn_finally_supports_openapiswagger/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730605384.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# Weekly Thread: What's Everyone Working On This Week? 🛠️\n\nHello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!\n\n## How it Works:\n\n1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.\n2. **Discuss**: Get feedback, find collaborators, or just chat about your project.\n3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.\n\n## Guidelines:\n\n* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.\n* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.\n\n## Example Shares:\n\n1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!\n2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.\n3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!\n\nLet's build and grow together! Share your journey and learn from others. Happy coding! 🌟",
            "author_fullname": "t2_6l4z3",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Sunday Daily Thread: What's everyone working on this week?",
            "link_flair_richtext": [
                {
                    "a": ":pythonLogo:",
                    "e": "emoji",
                    "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                },
                {
                    "e": "text",
                    "t": " Daily Thread"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "daily-thread",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gia4ox",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.8,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 8,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": ":pythonLogo: Daily Thread",
            "can_mod_post": false,
            "score": 8,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": true,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730592010.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: What&amp;#39;s Everyone Working On This Week? 🛠️&lt;/h1&gt;\n\n&lt;p&gt;Hello &lt;a href=\"/r/Python\"&gt;/r/Python&lt;/a&gt;! It&amp;#39;s time to share what you&amp;#39;ve been working on! Whether it&amp;#39;s a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you&amp;#39;re up to!&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Show &amp;amp; Tell&lt;/strong&gt;: Share your current projects, completed works, or future ideas.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Discuss&lt;/strong&gt;: Get feedback, find collaborators, or just chat about your project.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Inspire&lt;/strong&gt;: Your project might inspire someone else, just as you might get inspired here.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Feel free to include as many details as you&amp;#39;d like. Code snippets, screenshots, and links are all welcome.&lt;/li&gt;\n&lt;li&gt;Whether it&amp;#39;s your job, your hobby, or your passion project, all Python-related work is welcome here.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Shares:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Machine Learning Model&lt;/strong&gt;: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Web Scraping&lt;/strong&gt;: Built a script to scrape and analyze news articles. It&amp;#39;s helped me understand media bias better.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Automation&lt;/strong&gt;: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Let&amp;#39;s build and grow together! Share your journey and learn from others. Happy coding! 🌟&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": "moderator",
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#00a6a5",
            "id": "1gia4ox",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "AutoModerator",
            "discussion_type": null,
            "num_comments": 5,
            "send_replies": false,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gia4ox/sunday_daily_thread_whats_everyone_working_on/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gia4ox/sunday_daily_thread_whats_everyone_working_on/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730592010.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# [Simple Object Archive for Python (SOAP)](https://github.com/hwkoene/soap)\n\n# What my project does\n\nThis library provides a single   `@entity` decorator for object persistence. Decorated classes will store their instances under ./\\_\\_data\\_\\_/&lt;ClassName&gt; in json format with their UUID as filename. filter() and exclude() methods are added as classmethods to query the existing objects.\n\nFor each class variable that is annotated, a `property` will be provided with the same name.\n\nClass variables whose annotation is also a decorated object, set or list thereof are stored as a string of their UUID and will be resolved when their `get()` method is first called.\n\n# Target audience\n\nPeople...\n\n* wanting to quickly prototype a database;\n* creating simple applications with not that many objects (&lt;10.000 or so)\n\n# Comparison\n\n**SQLAlchemy**\n\nSOAP doens't require database setup, but isn't as extensive.\n\n**Pickle**\n\nPickled objects aren't transparent or queriable.\n\n**Dataclass**\n\nSOAP was inspired by the  `u/entity` decorator, adding query and persistence functionality.\n\n# Example\n\n    @entity\n    class MyClassA:\n        name: str\n        health: int = 100\n        my_path: Path = None\n        inventory: set['MyClassB'] = set() # One-to-many\n\nThis creates an `__init__`\\-function with the default arguments of the class variables.\n\n    @entity\n    class MyClassB:\n        daddy: MyClassA # One-to-one relation\n        other_items: list\n        timestamp: datetime\n        problems: random.randint(0, 99)\n\nThe `__data__` folder is created automatically and looks something like this:\n\n    __data__/\n       ├── MyClassA/ \n       │   └── 550e8400-e29b-41d4-a716-446655440000\n       └── MyClassB/\n           └── 123e4567-e89b-12d3-a456-426614174000\n\n`MyClassA` and `MyClassB` now reference each other. We create the objects like we would any other, just keep in mind to use all keyword arguments.\n\n    a1 = MyClassA(name=\"Benjamin\")\n    a2 = MyClassA(name=\"Steve\")\n    \n    b1 = MyClassB(daddy=a1, \n                  timestamp=datetime.now(), \n                  other_items=['Some cheese', 'Bud light'])\n    b2 = MyClassB(daddy=a2, \n                  timestamp=b1.timestamp, \n                  other_items=[b1])\n\nBecause `MyClassA.inventory` is annotated with `set['MyClassB']`, the `getattr` function returns a `EntitySet` type. This is basically a `set` with `filter()` and `exlude()` methods to perform queries. Additionally, operations like `append` and `remove` are wrapped to save the object afterwards.\n\n    a1.inventory.append(b1)\n    a2.inventory.append(b2)\n    \n    steve_not_my_daddy = MyClassB.exclude(daddy=lambda x: x.name.startswith('Steve'))\n    cheese_i_have = a1.inventory.filter(other_items=lambda x: \"Some cheese\" in x)\n    \n    print(steve_not_my_daddy)   # {b1}\n    print(cheese_i_have)        # {b1}\n    \n    print(type(steve_not_my_daddy)) # &lt;class 'src.entity.entity.&lt;locals&gt;.Entity'&gt;\n    print(type(a1.inventory))       # &lt;class 'src.entity.entity.&lt;locals&gt;.Entity'&gt;\n\n# Limitations\n\n1. All objects are kept in memory.\n   * When an object is deleted, it is not directly removed from memory because other objects may still have a reference to it.\n2. Currently, only `datetime` and `Path` objects are transcoded besides the builtins.\n\n# Next steps\n\n* Explicit archiving, adding items to a (`.zip`) archive (to partially address limitation #1);\n* Option to disable implicit saving;\n   * Combine with a `rollback` function to facilitate transactions;\n* Custom transcoders (to address limitation #2);\n* Typechecking for getters and setters;\n* Derive date created from file metadata;\n* Custom assignment of data folder;\n* Allow creaton/modification/deletion of objects from files using watchdog to monitor the data directory for changes;\n   * This may allow this framework to function as a synchronized database when combined with something like `portalocker`;\n* CSV file writing of all objects;\n* Optional integrations:\n   * NiceGUI to have some kind of admin page;\n* Saving asynchronously;\n* Use a profiler to identify bottlenecks;\n* Find a more fitting name.\n\n# Issues\n\n* Deleting an object and then terminating the program may cause invalid refereces, which in turn may cause errors.\n* Invalid files cause errors.\n\n  \nEDIT: Folder layout example.\nEDIT2: Reddit keeps chaning '@' to 'u/'",
            "author_fullname": "t2_byzjd",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Simple Object Archive for Python - Providing a single decorator to persist object data and relations",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gi8m82",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.77,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 9,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 9,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1730589916.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730587713.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"https://github.com/hwkoene/soap\"&gt;Simple Object Archive for Python (SOAP)&lt;/a&gt;&lt;/h1&gt;\n\n&lt;h1&gt;What my project does&lt;/h1&gt;\n\n&lt;p&gt;This library provides a single   &lt;code&gt;@entity&lt;/code&gt; decorator for object persistence. Decorated classes will store their instances under ./__data__/&amp;lt;ClassName&amp;gt; in json format with their UUID as filename. filter() and exclude() methods are added as classmethods to query the existing objects.&lt;/p&gt;\n\n&lt;p&gt;For each class variable that is annotated, a &lt;code&gt;property&lt;/code&gt; will be provided with the same name.&lt;/p&gt;\n\n&lt;p&gt;Class variables whose annotation is also a decorated object, set or list thereof are stored as a string of their UUID and will be resolved when their &lt;code&gt;get()&lt;/code&gt; method is first called.&lt;/p&gt;\n\n&lt;h1&gt;Target audience&lt;/h1&gt;\n\n&lt;p&gt;People...&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;wanting to quickly prototype a database;&lt;/li&gt;\n&lt;li&gt;creating simple applications with not that many objects (&amp;lt;10.000 or so)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;&lt;strong&gt;SQLAlchemy&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;SOAP doens&amp;#39;t require database setup, but isn&amp;#39;t as extensive.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Pickle&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Pickled objects aren&amp;#39;t transparent or queriable.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Dataclass&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;SOAP was inspired by the  &lt;code&gt;u/entity&lt;/code&gt; decorator, adding query and persistence functionality.&lt;/p&gt;\n\n&lt;h1&gt;Example&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;@entity\nclass MyClassA:\n    name: str\n    health: int = 100\n    my_path: Path = None\n    inventory: set[&amp;#39;MyClassB&amp;#39;] = set() # One-to-many\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This creates an &lt;code&gt;__init__&lt;/code&gt;-function with the default arguments of the class variables.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;@entity\nclass MyClassB:\n    daddy: MyClassA # One-to-one relation\n    other_items: list\n    timestamp: datetime\n    problems: random.randint(0, 99)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;__data__&lt;/code&gt; folder is created automatically and looks something like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;__data__/\n   ├── MyClassA/ \n   │   └── 550e8400-e29b-41d4-a716-446655440000\n   └── MyClassB/\n       └── 123e4567-e89b-12d3-a456-426614174000\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;MyClassA&lt;/code&gt; and &lt;code&gt;MyClassB&lt;/code&gt; now reference each other. We create the objects like we would any other, just keep in mind to use all keyword arguments.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;a1 = MyClassA(name=&amp;quot;Benjamin&amp;quot;)\na2 = MyClassA(name=&amp;quot;Steve&amp;quot;)\n\nb1 = MyClassB(daddy=a1, \n              timestamp=datetime.now(), \n              other_items=[&amp;#39;Some cheese&amp;#39;, &amp;#39;Bud light&amp;#39;])\nb2 = MyClassB(daddy=a2, \n              timestamp=b1.timestamp, \n              other_items=[b1])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Because &lt;code&gt;MyClassA.inventory&lt;/code&gt; is annotated with &lt;code&gt;set[&amp;#39;MyClassB&amp;#39;]&lt;/code&gt;, the &lt;code&gt;getattr&lt;/code&gt; function returns a &lt;code&gt;EntitySet&lt;/code&gt; type. This is basically a &lt;code&gt;set&lt;/code&gt; with &lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;exlude()&lt;/code&gt; methods to perform queries. Additionally, operations like &lt;code&gt;append&lt;/code&gt; and &lt;code&gt;remove&lt;/code&gt; are wrapped to save the object afterwards.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;a1.inventory.append(b1)\na2.inventory.append(b2)\n\nsteve_not_my_daddy = MyClassB.exclude(daddy=lambda x: x.name.startswith(&amp;#39;Steve&amp;#39;))\ncheese_i_have = a1.inventory.filter(other_items=lambda x: &amp;quot;Some cheese&amp;quot; in x)\n\nprint(steve_not_my_daddy)   # {b1}\nprint(cheese_i_have)        # {b1}\n\nprint(type(steve_not_my_daddy)) # &amp;lt;class &amp;#39;src.entity.entity.&amp;lt;locals&amp;gt;.Entity&amp;#39;&amp;gt;\nprint(type(a1.inventory))       # &amp;lt;class &amp;#39;src.entity.entity.&amp;lt;locals&amp;gt;.Entity&amp;#39;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Limitations&lt;/h1&gt;\n\n&lt;ol&gt;\n&lt;li&gt;All objects are kept in memory.\n\n&lt;ul&gt;\n&lt;li&gt;When an object is deleted, it is not directly removed from memory because other objects may still have a reference to it.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Currently, only &lt;code&gt;datetime&lt;/code&gt; and &lt;code&gt;Path&lt;/code&gt; objects are transcoded besides the builtins.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h1&gt;Next steps&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Explicit archiving, adding items to a (&lt;code&gt;.zip&lt;/code&gt;) archive (to partially address limitation #1);&lt;/li&gt;\n&lt;li&gt;Option to disable implicit saving;\n\n&lt;ul&gt;\n&lt;li&gt;Combine with a &lt;code&gt;rollback&lt;/code&gt; function to facilitate transactions;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Custom transcoders (to address limitation #2);&lt;/li&gt;\n&lt;li&gt;Typechecking for getters and setters;&lt;/li&gt;\n&lt;li&gt;Derive date created from file metadata;&lt;/li&gt;\n&lt;li&gt;Custom assignment of data folder;&lt;/li&gt;\n&lt;li&gt;Allow creaton/modification/deletion of objects from files using watchdog to monitor the data directory for changes;\n\n&lt;ul&gt;\n&lt;li&gt;This may allow this framework to function as a synchronized database when combined with something like &lt;code&gt;portalocker&lt;/code&gt;;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;CSV file writing of all objects;&lt;/li&gt;\n&lt;li&gt;Optional integrations:\n\n&lt;ul&gt;\n&lt;li&gt;NiceGUI to have some kind of admin page;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Saving asynchronously;&lt;/li&gt;\n&lt;li&gt;Use a profiler to identify bottlenecks;&lt;/li&gt;\n&lt;li&gt;Find a more fitting name.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Issues&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Deleting an object and then terminating the program may cause invalid refereces, which in turn may cause errors.&lt;/li&gt;\n&lt;li&gt;Invalid files cause errors.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;EDIT: Folder layout example.\nEDIT2: Reddit keeps chaning &amp;#39;@&amp;#39; to &amp;#39;u/&amp;#39;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/tEKGzPu-2yAFwNT7DqSJYEQsHxodoGmC20SmxHeo4Hs.jpg?auto=webp&amp;s=360f368d26b7e1469ba9891a70ac39a7c07fec0d",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/tEKGzPu-2yAFwNT7DqSJYEQsHxodoGmC20SmxHeo4Hs.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=6d240419055cc9ce2981e8c7aa2565b054776970",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/tEKGzPu-2yAFwNT7DqSJYEQsHxodoGmC20SmxHeo4Hs.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2c92f91b5cede6212e62a5ed8c6da04a77dac846",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/tEKGzPu-2yAFwNT7DqSJYEQsHxodoGmC20SmxHeo4Hs.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=952afb8b63359e7bb9c7dc32a967d224138dccb3",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/tEKGzPu-2yAFwNT7DqSJYEQsHxodoGmC20SmxHeo4Hs.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=b4e73fca762b99a58c2fe58eeb6857fc36445226",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/tEKGzPu-2yAFwNT7DqSJYEQsHxodoGmC20SmxHeo4Hs.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=2898b1abb91cc9253c5431deaf8a1abd60b7caeb",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/tEKGzPu-2yAFwNT7DqSJYEQsHxodoGmC20SmxHeo4Hs.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=b78f291996d138db8c0409f60cb43dc91662af93",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "TZ6_nWnQfPTkqGar34F9QYDJeDkpo8kC7OmTxo_F0S8"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gi8m82",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Samnono",
            "discussion_type": null,
            "num_comments": 10,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gi8m82/simple_object_archive_for_python_providing_a/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gi8m82/simple_object_archive_for_python_providing_a/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730587713.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "\n## What My Project Does\n\nTerminal-tree is an experimental terminal-based filesystem navigator. You can explore your filesystem and preview files within the terminal.\n\nVery early stage, I've been playing with the look and feel, but it could form the basis of a larger tool. Possibly a file manager, or file picker.\n\nIt is built with the Textual framework (which I also develop), and is a reasonably good example of a more complex widget which integrates blocking calls with an async framework.\n\nThe code is currently a single file:\n\nhttps://github.com/willmcgugan/terminal-tree/blob/main/tree.py\n\nMore details on the repository:\n\nhttps://github.com/willmcgugan/terminal-tree\n\n\n## Target Audience\n\nAnyone interested in building a terminal app. It is fun to play with (hopefully) but doesn't have any functionality on top of navigating and previewing files.\n\nI'm open to suggestions on what could be built on top of this.\n\n## Comparison\n\nYou could compare it to [Ranger](https://github.com/ranger/ranger), Midnight Commander, or similar tools.",
            "author_fullname": "t2_7zjh",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "A filesystem navigator for the terminal",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gi3tqo",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.91,
            "author_flair_background_color": "transparent",
            "subreddit_type": "public",
            "ups": 73,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": "4cc838b8-3159-11e1-83e4-12313d18ad57",
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 73,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [
                {
                    "e": "text",
                    "t": " "
                }
            ],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730574429.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "richtext",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h2&gt;What My Project Does&lt;/h2&gt;\n\n&lt;p&gt;Terminal-tree is an experimental terminal-based filesystem navigator. You can explore your filesystem and preview files within the terminal.&lt;/p&gt;\n\n&lt;p&gt;Very early stage, I&amp;#39;ve been playing with the look and feel, but it could form the basis of a larger tool. Possibly a file manager, or file picker.&lt;/p&gt;\n\n&lt;p&gt;It is built with the Textual framework (which I also develop), and is a reasonably good example of a more complex widget which integrates blocking calls with an async framework.&lt;/p&gt;\n\n&lt;p&gt;The code is currently a single file:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/willmcgugan/terminal-tree/blob/main/tree.py\"&gt;https://github.com/willmcgugan/terminal-tree/blob/main/tree.py&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;More details on the repository:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/willmcgugan/terminal-tree\"&gt;https://github.com/willmcgugan/terminal-tree&lt;/a&gt;&lt;/p&gt;\n\n&lt;h2&gt;Target Audience&lt;/h2&gt;\n\n&lt;p&gt;Anyone interested in building a terminal app. It is fun to play with (hopefully) but doesn&amp;#39;t have any functionality on top of navigating and previewing files.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m open to suggestions on what could be built on top of this.&lt;/p&gt;\n\n&lt;h2&gt;Comparison&lt;/h2&gt;\n\n&lt;p&gt;You could compare it to &lt;a href=\"https://github.com/ranger/ranger\"&gt;Ranger&lt;/a&gt;, Midnight Commander, or similar tools.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/5kle2cxMEy3d-W4dZ5C93DN_opmjdV0KG02lnDigux0.jpg?auto=webp&amp;s=e6e124b936f183dc2db2029d3111c2ca7a2bf1bd",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/5kle2cxMEy3d-W4dZ5C93DN_opmjdV0KG02lnDigux0.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=63aec30cb434f6c83a45023ba42f4cab75ccb1f9",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/5kle2cxMEy3d-W4dZ5C93DN_opmjdV0KG02lnDigux0.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=8c2a34712ba8231f12392bab1c16c5526490145b",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/5kle2cxMEy3d-W4dZ5C93DN_opmjdV0KG02lnDigux0.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=cca7be67c4fe9a5d23deaa564634a97326db12af",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/5kle2cxMEy3d-W4dZ5C93DN_opmjdV0KG02lnDigux0.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=b3f77c7ec2715eda2138eb06cce4675c36475375",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/5kle2cxMEy3d-W4dZ5C93DN_opmjdV0KG02lnDigux0.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=700696226a44b945503e1b77f5f271624979d724",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/5kle2cxMEy3d-W4dZ5C93DN_opmjdV0KG02lnDigux0.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=d93cb08462994b4596202a29c407b5f2ef753a8b",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "lUPwMg_fJ7vPUx8F2uvyNr99k22x19Ma0hzAGEjm1sA"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": " ",
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gi3tqo",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "willm",
            "discussion_type": null,
            "num_comments": 25,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": "dark",
            "permalink": "/r/Python/comments/1gi3tqo/a_filesystem_navigator_for_the_terminal/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gi3tqo/a_filesystem_navigator_for_the_terminal/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730574429.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hey folks, I put together a bunch of cool tools and made yapper.\n\n\nWhat My Project Does\n\nIt takes text, optionally enhances(adds a personality to) your text using free LLM APIs, and says it using one of more than a dozen available voices, they all sound pretty natural. The best part is that the speech synthesis is offline, you only need internet connection to use the LLM APIs to enhance your text.\n\nI made this because I needed a fun way to get the progress/exceptions on my long running scripts, it has a decorator and context manager to do exactly that, it turned out to be better than I expected so I made it public. Check it out and please let me know if you have any suggestions.\n\nhttps://github.com/n1teshy/yapper-tts",
            "author_fullname": "t2_exu8rceu",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "yapper-tts: text to speech library",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gi2xmj",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 1.0,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 10,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 10,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1730647204.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730572044.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey folks, I put together a bunch of cool tools and made yapper.&lt;/p&gt;\n\n&lt;p&gt;What My Project Does&lt;/p&gt;\n\n&lt;p&gt;It takes text, optionally enhances(adds a personality to) your text using free LLM APIs, and says it using one of more than a dozen available voices, they all sound pretty natural. The best part is that the speech synthesis is offline, you only need internet connection to use the LLM APIs to enhance your text.&lt;/p&gt;\n\n&lt;p&gt;I made this because I needed a fun way to get the progress/exceptions on my long running scripts, it has a decorator and context manager to do exactly that, it turned out to be better than I expected so I made it public. Check it out and please let me know if you have any suggestions.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/n1teshy/yapper-tts\"&gt;https://github.com/n1teshy/yapper-tts&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/PezJev8iQ0BuVqBkdYL1u9FTVcTVTH5Kc0hWDTFtTf0.jpg?auto=webp&amp;s=480cddfd67dce5270306d05e2a5948dc09d2abe2",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/PezJev8iQ0BuVqBkdYL1u9FTVcTVTH5Kc0hWDTFtTf0.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=6e193e0f36356a412e2c1dfef1763533e948b1ab",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/PezJev8iQ0BuVqBkdYL1u9FTVcTVTH5Kc0hWDTFtTf0.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=dcd0ff8dc472137453a5594bb1f287da76445f75",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/PezJev8iQ0BuVqBkdYL1u9FTVcTVTH5Kc0hWDTFtTf0.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=f6cfdf9f5338672b3518796f65bfc06e050da76c",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/PezJev8iQ0BuVqBkdYL1u9FTVcTVTH5Kc0hWDTFtTf0.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=5ba78578b1e722a1e8e10dc6fd3584910c500a0a",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/PezJev8iQ0BuVqBkdYL1u9FTVcTVTH5Kc0hWDTFtTf0.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=f4338e7d0f5a71fda6223b3557e0a26e1b6e8edd",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/PezJev8iQ0BuVqBkdYL1u9FTVcTVTH5Kc0hWDTFtTf0.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=5b2a58b127c9fef90bde81ed6d8a2f287d89891c",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "fvFVUtzpWPD0cp9JgPc21F2ddFN5Gg_b4y8FMtfZAkI"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gi2xmj",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Specialist_Ruin_9333",
            "discussion_type": null,
            "num_comments": 2,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gi2xmj/yappertts_text_to_speech_library/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gi2xmj/yappertts_text_to_speech_library/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730572044.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "From Enaml's [docs](https://enaml.readthedocs.io/en/latest/get_started/introduction.html):\n\n&gt; Enaml brings the declarative UI paradigm to Python in a seamlessly integrated fashion. The grammar of the Enaml language is a strict superset of Python. This means that any valid Python file is also a valid Enaml file, though the converse is not necessary true. The tight integration with Python means that the developer feels at home and uses standard Python syntax when expressing how their data models bind to the visual attributes of the UI.\n\n&gt; . . .\n\n&gt; Enaml’s declarative widgets provide a layer of abstraction on top of the widgets of a toolkit rendering library. Enaml ships with a backend based on Qt5/6 and third-party projects such as enaml-web and enaml-native provides alternative backends.\n\n---\n\nA maintainer of Enaml has just opened [a brainstorm discussion](https://github.com/nucleic/enaml/discussions/558) on the next major development goals. \n\nIt's a project I've long admired, though rarely used, and I'd love to see it get some attention and a revamp. I think the bar these days has been raised by projects like QML and Slint, which provide a great context in which to set new goals.",
            "author_fullname": "t2_5kxzp",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "What would Enaml 2.0 look like? | nucleic/enaml | Declarative UI",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gi2vwa",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.87,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 11,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 11,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730571911.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;From Enaml&amp;#39;s &lt;a href=\"https://enaml.readthedocs.io/en/latest/get_started/introduction.html\"&gt;docs&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Enaml brings the declarative UI paradigm to Python in a seamlessly integrated fashion. The grammar of the Enaml language is a strict superset of Python. This means that any valid Python file is also a valid Enaml file, though the converse is not necessary true. The tight integration with Python means that the developer feels at home and uses standard Python syntax when expressing how their data models bind to the visual attributes of the UI.&lt;/p&gt;\n\n&lt;p&gt;. . .&lt;/p&gt;\n\n&lt;p&gt;Enaml’s declarative widgets provide a layer of abstraction on top of the widgets of a toolkit rendering library. Enaml ships with a backend based on Qt5/6 and third-party projects such as enaml-web and enaml-native provides alternative backends.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;A maintainer of Enaml has just opened &lt;a href=\"https://github.com/nucleic/enaml/discussions/558\"&gt;a brainstorm discussion&lt;/a&gt; on the next major development goals. &lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s a project I&amp;#39;ve long admired, though rarely used, and I&amp;#39;d love to see it get some attention and a revamp. I think the bar these days has been raised by projects like QML and Slint, which provide a great context in which to set new goals.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gi2vwa",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "AndydeCleyre",
            "discussion_type": null,
            "num_comments": 4,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gi2vwa/what_would_enaml_20_look_like_nucleicenaml/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gi2vwa/what_would_enaml_20_look_like_nucleicenaml/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730571911.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "**Notice: So**, i recently made this post (Highlighted Comment: https://www.reddit.com/r/Python/comments/1ghy7cl/comment/lv14fch/), and it was negatively received, what i'm trying to do is do the exact same thing is that post but not attempt to insult the r/python users and put the blame onto myself.\n\nso a few days ago i would ultimately decide to switch to rust because of it's helpful community, and focus on memory safety and support and speed, what i didn't know that i wasn't advanced enough to do so, here's one of the reaons why\n\n\\- cargo.toml - cargo.toml was simply too annoying, instead of having a package manager like pip that simply installed the package like a linux package manager like dnf, cargo was a list of installed packages, i got confused over the packages i wanted and if they were even available.\n\non gnome builder there was [applictaion.rs](http://applictaion.rs) and [main.rs](http://main.rs) this angered me because i thought i only needed one, i ultimately messed up my code over this.\n\nas for my behavior to the community i was being more of a jackass to you guys than i thought you were being to me, but i still have to give blame, you guys acted ignorant and a bit toxic but still, i take most of the blame here, i was being childish by insulting you guys, but by your vague behavior and lack of actual help on ways to improve my behavior against you made me angry at you guys, however the highlighted comment showed the error of my ways, this is how you should've reacted, still this is mostly my fault at the end of the day for acting like a brat.\n\nrust was not for me and i charged too hard on using it, at the end of the day, ease of use and community support is the better option for me at least as i develop my skills further.\n\nthank the guy who i highlighted above for showing me how i can respond more effectively to this.\n\nas for the reception, i am weary how the community will respond to this, but actualy try to be helpful here and guide me on how to effectively apologize.",
            "author_fullname": "t2_virn4p6w",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "I was over my head switching to rust - an serious apology to the community",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1ghzjlw",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.5,
            "author_flair_background_color": "transparent",
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": "67d01c9c-537b-11ee-b0d0-7225f76af176",
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1730563447.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [
                {
                    "e": "text",
                    "t": "Pythonista"
                }
            ],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730562874.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "richtext",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Notice: So&lt;/strong&gt;, i recently made this post (Highlighted Comment: &lt;a href=\"https://www.reddit.com/r/Python/comments/1ghy7cl/comment/lv14fch/\"&gt;https://www.reddit.com/r/Python/comments/1ghy7cl/comment/lv14fch/&lt;/a&gt;), and it was negatively received, what i&amp;#39;m trying to do is do the exact same thing is that post but not attempt to insult the &lt;a href=\"/r/python\"&gt;r/python&lt;/a&gt; users and put the blame onto myself.&lt;/p&gt;\n\n&lt;p&gt;so a few days ago i would ultimately decide to switch to rust because of it&amp;#39;s helpful community, and focus on memory safety and support and speed, what i didn&amp;#39;t know that i wasn&amp;#39;t advanced enough to do so, here&amp;#39;s one of the reaons why&lt;/p&gt;\n\n&lt;p&gt;- cargo.toml - cargo.toml was simply too annoying, instead of having a package manager like pip that simply installed the package like a linux package manager like dnf, cargo was a list of installed packages, i got confused over the packages i wanted and if they were even available.&lt;/p&gt;\n\n&lt;p&gt;on gnome builder there was &lt;a href=\"http://applictaion.rs\"&gt;applictaion.rs&lt;/a&gt; and &lt;a href=\"http://main.rs\"&gt;main.rs&lt;/a&gt; this angered me because i thought i only needed one, i ultimately messed up my code over this.&lt;/p&gt;\n\n&lt;p&gt;as for my behavior to the community i was being more of a jackass to you guys than i thought you were being to me, but i still have to give blame, you guys acted ignorant and a bit toxic but still, i take most of the blame here, i was being childish by insulting you guys, but by your vague behavior and lack of actual help on ways to improve my behavior against you made me angry at you guys, however the highlighted comment showed the error of my ways, this is how you should&amp;#39;ve reacted, still this is mostly my fault at the end of the day for acting like a brat.&lt;/p&gt;\n\n&lt;p&gt;rust was not for me and i charged too hard on using it, at the end of the day, ease of use and community support is the better option for me at least as i develop my skills further.&lt;/p&gt;\n\n&lt;p&gt;thank the guy who i highlighted above for showing me how i can respond more effectively to this.&lt;/p&gt;\n\n&lt;p&gt;as for the reception, i am weary how the community will respond to this, but actualy try to be helpful here and guide me on how to effectively apologize.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": "Pythonista",
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1ghzjlw",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "CallEnvironmental902",
            "discussion_type": null,
            "num_comments": 3,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": "dark",
            "permalink": "/r/Python/comments/1ghzjlw/i_was_over_my_head_switching_to_rust_an_serious/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1ghzjlw/i_was_over_my_head_switching_to_rust_an_serious/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730562874.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Lately, I'm coming across [posts like these](https://x.com/clcoding/status/1852128165931470952) more and more, these are Python code snippets and examples but written in Javaesque coding style i.e. camelCase variables instead of snake_case - which is the preferred version of Pythonistas.\n\nDoesn't the PEP8 also recommend the use of snake_case for both variables and function names, and PascalCase for classes? Then why do we see folks using their ugly camelCase in the python world?",
            "author_fullname": "t2_d2cvdrmmo",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Thoughts on increasing use of camel case in the python world",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1ghvpe3",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.42,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730551853.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Lately, I&amp;#39;m coming across &lt;a href=\"https://x.com/clcoding/status/1852128165931470952\"&gt;posts like these&lt;/a&gt; more and more, these are Python code snippets and examples but written in Javaesque coding style i.e. camelCase variables instead of snake_case - which is the preferred version of Pythonistas.&lt;/p&gt;\n\n&lt;p&gt;Doesn&amp;#39;t the PEP8 also recommend the use of snake_case for both variables and function names, and PascalCase for classes? Then why do we see folks using their ugly camelCase in the python world?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/iPD2qLlCwF69DNDyqeNCTojp2wxA-cbYJ9CE1VgQRmo.jpg?auto=webp&amp;s=0a435bc10d22e286687f5adb4718c172d21f9a62",
                            "width": 1080,
                            "height": 1080
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/iPD2qLlCwF69DNDyqeNCTojp2wxA-cbYJ9CE1VgQRmo.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=d6b5783f7baa96e19fdd958fb095e47a52ebc772",
                                "width": 108,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/iPD2qLlCwF69DNDyqeNCTojp2wxA-cbYJ9CE1VgQRmo.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d70847274cc78ea8ac4062661024a6d94d781e45",
                                "width": 216,
                                "height": 216
                            },
                            {
                                "url": "https://external-preview.redd.it/iPD2qLlCwF69DNDyqeNCTojp2wxA-cbYJ9CE1VgQRmo.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=9183400ff9007eb606ea48538ba062e038e98427",
                                "width": 320,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/iPD2qLlCwF69DNDyqeNCTojp2wxA-cbYJ9CE1VgQRmo.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=fa7c0cc16be050479e8ccdfa2e7d1cf3ccaf05de",
                                "width": 640,
                                "height": 640
                            },
                            {
                                "url": "https://external-preview.redd.it/iPD2qLlCwF69DNDyqeNCTojp2wxA-cbYJ9CE1VgQRmo.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=993bdf5fcb414042a39f906633836b351deb244c",
                                "width": 960,
                                "height": 960
                            },
                            {
                                "url": "https://external-preview.redd.it/iPD2qLlCwF69DNDyqeNCTojp2wxA-cbYJ9CE1VgQRmo.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=d25bbdd9ee9cc23da3db2026231d08158a894e62",
                                "width": 1080,
                                "height": 1080
                            }
                        ],
                        "variants": {},
                        "id": "4Rnyb7UIVRRUtz5t9DopvS3dXow6r2nTgzDL-oi_L90"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1ghvpe3",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "pyeri",
            "discussion_type": null,
            "num_comments": 16,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1ghvpe3/thoughts_on_increasing_use_of_camel_case_in_the/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1ghvpe3/thoughts_on_increasing_use_of_camel_case_in_the/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730551853.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Link: https://youtu.be/2ZqaRIZnAso\n\nI'm testing out making YouTube videos,, if you have any comments or suggestions on what I can improve, please do let me know!\n",
            "author_fullname": "t2_8bczn3p5",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "10 nooby python habits u gotta ditch",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Tutorial"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "tutorial",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1ghq88n",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.17,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Tutorial",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730528001.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Link: &lt;a href=\"https://youtu.be/2ZqaRIZnAso\"&gt;https://youtu.be/2ZqaRIZnAso&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m testing out making YouTube videos,, if you have any comments or suggestions on what I can improve, please do let me know!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/qVIJIoEjMpp6OB1aFTy9q6p_3ztTRXirRkoYwPgNOY0.jpg?auto=webp&amp;s=649693db6be8056223305225346142a111bd4bbd",
                            "width": 480,
                            "height": 360
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/qVIJIoEjMpp6OB1aFTy9q6p_3ztTRXirRkoYwPgNOY0.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=1e5d1fab06c1f0d24fb7db6d2ac89d4cc12cf4ac",
                                "width": 108,
                                "height": 81
                            },
                            {
                                "url": "https://external-preview.redd.it/qVIJIoEjMpp6OB1aFTy9q6p_3ztTRXirRkoYwPgNOY0.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=66e69ceaf65086506e89a2cec9647b5c522e2df9",
                                "width": 216,
                                "height": 162
                            },
                            {
                                "url": "https://external-preview.redd.it/qVIJIoEjMpp6OB1aFTy9q6p_3ztTRXirRkoYwPgNOY0.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=6e57b9418e3a2e38aea9c5b4081418c0b655ff1a",
                                "width": 320,
                                "height": 240
                            }
                        ],
                        "variants": {},
                        "id": "gkgqM_y0tTOuZFi4y0-IedRk8bZkq5-wMpw7VuLrf7g"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#dadada",
            "id": "1ghq88n",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "ConfectionAvailable8",
            "discussion_type": null,
            "num_comments": 5,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1ghq88n/10_nooby_python_habits_u_gotta_ditch/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1ghq88n/10_nooby_python_habits_u_gotta_ditch/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730528001.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I’m on the hunt for some developers who are good with Manim or MoviePy for a project I have in mind. If you’ve got experience with either and want to chat about it, feel free to DM me!\n\nLooking forward to hearing from you!\n\nI have a notion doc specifying the objective. Let me know if anyone needs it. Basically its a job to convert data mentioned in the JSON (shapes,text) to animation",
            "author_fullname": "t2_71u6hply",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "I am looking for developers good in Manim/MoviePy or any other animation libraries",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Meta"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "meta",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1ghp6gu",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.35,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Meta",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1730533555.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730523617.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I’m on the hunt for some developers who are good with Manim or MoviePy for a project I have in mind. If you’ve got experience with either and want to chat about it, feel free to DM me!&lt;/p&gt;\n\n&lt;p&gt;Looking forward to hearing from you!&lt;/p&gt;\n\n&lt;p&gt;I have a notion doc specifying the objective. Let me know if anyone needs it. Basically its a job to convert data mentioned in the JSON (shapes,text) to animation&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "1a0ad668-4115-11ea-b5c6-0ee3885b83fb",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#373c3f",
            "id": "1ghp6gu",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "aitosumankolosky",
            "discussion_type": null,
            "num_comments": 16,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1ghp6gu/i_am_looking_for_developers_good_in_manimmoviepy/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1ghp6gu/i_am_looking_for_developers_good_in_manimmoviepy/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730523617.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hi,\n   Reposting as I did not get any responses earlier. Looking to make a switch from java to python programming.Have finished the udemy course for beginners and wanted to work on some real time projects to get more hands on experience.Any suggestions or repos that I can refer to start working on such use cases.Basically want to gain more confidence with hands on coding before I start giving interviews.Any inputs or suggestions or pointers highly appreciated.\n\nThanks in advance",
            "author_fullname": "t2_kp3b2cuob",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Python use cases to work on",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Resource"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "resource",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1ghmzs5",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.25,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Resource",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730515832.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi,\n   Reposting as I did not get any responses earlier. Looking to make a switch from java to python programming.Have finished the udemy course for beginners and wanted to work on some real time projects to get more hands on experience.Any suggestions or repos that I can refer to start working on such use cases.Basically want to gain more confidence with hands on coding before I start giving interviews.Any inputs or suggestions or pointers highly appreciated.&lt;/p&gt;\n\n&lt;p&gt;Thanks in advance&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ddbd37",
            "id": "1ghmzs5",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "prash1988",
            "discussion_type": null,
            "num_comments": 1,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1ghmzs5/python_use_cases_to_work_on/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1ghmzs5/python_use_cases_to_work_on/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730515832.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "After many months of procrastination, I have finally managed to release version 0.1.10 of my package Arrest. \n\n**What it does**\n\nIt is a package that lets you declaratively write a REST service client, configured with the sets of resources, routes and methods you want to call, and provide Pydantic models for request and responses to automatically parse them during the HTTP calls. Arrest also provides retry mechanisms, exception handling, automatic code generation from the OpenAPI specification, and much more.\n\n**Target audience**\n\nPrimarily backend developers working on communicating with multiple web services from a Python client. It can also be useful in a microservice architecture where you have to write API bindings for all the dependant sevices for another service.   \n  \n**Comparison**\n\nThere are packages that does similar things which I got to know about from this subreddit after my initial post. For example:\n\n1. [flask-muck](https://github.com/dtiesling/flask-muck) by u/beef-runner\n2. [django-rest-client](https://github.com/certego/django-rest-client) by u/16withScars\n\nThe key highlights of the new version are:\n\n1. Support for arbitrary python types for request and response. These can be \\`list\\`, \\`dict\\`, \\`dataclass\\`, or \\`pydantic.BaseModel\\`, or anything that is JSON serializable.\n2. Added custom hooks for handling different types of exceptions.\n3. Revamped retry mechanism to make it more configurable and no implicit retries built-in that might create unpredictability.\n4. Better support for OpenAPI specification and codegen by fixing naming conventions and imports.\n\nThere are many more,  you can check them out at [whats new](https://s-bose.github.io/arrest/whats-new/). Do check out the [docs](https://s-bose.github.io/arrest/) and [GitHub](https://github.com/s-bose/arrest), and if this sounds interesting to you, please do give it a try, and let me know in case you face any issue.\n\nFor those who might already be familiar with it and encountered any issues, I hope the new version fixes them for you. For new people, I'd love to know your thoughts and suggestions,  and thank you to everyone here in the Python community who showed their support and provided their feedbacks in my earlier posts!\n\nP.S. I am also open to contributions, if you feel like you have some ideas that Arrest can benefit from, feel free to raise a PR!",
            "author_fullname": "t2_108f9l",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "I have finally released a new version for my package, Arrest 0.1.10",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1ghjt23",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.83,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 18,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 18,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730505928.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;After many months of procrastination, I have finally managed to release version 0.1.10 of my package Arrest. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What it does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;It is a package that lets you declaratively write a REST service client, configured with the sets of resources, routes and methods you want to call, and provide Pydantic models for request and responses to automatically parse them during the HTTP calls. Arrest also provides retry mechanisms, exception handling, automatic code generation from the OpenAPI specification, and much more.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Primarily backend developers working on communicating with multiple web services from a Python client. It can also be useful in a microservice architecture where you have to write API bindings for all the dependant sevices for another service.   &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;There are packages that does similar things which I got to know about from this subreddit after my initial post. For example:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/dtiesling/flask-muck\"&gt;flask-muck&lt;/a&gt; by &lt;a href=\"/u/beef-runner\"&gt;u/beef-runner&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/certego/django-rest-client\"&gt;django-rest-client&lt;/a&gt; by &lt;a href=\"/u/16withScars\"&gt;u/16withScars&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;The key highlights of the new version are:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Support for arbitrary python types for request and response. These can be `list`, `dict`, `dataclass`, or `pydantic.BaseModel`, or anything that is JSON serializable.&lt;/li&gt;\n&lt;li&gt;Added custom hooks for handling different types of exceptions.&lt;/li&gt;\n&lt;li&gt;Revamped retry mechanism to make it more configurable and no implicit retries built-in that might create unpredictability.&lt;/li&gt;\n&lt;li&gt;Better support for OpenAPI specification and codegen by fixing naming conventions and imports.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;There are many more,  you can check them out at &lt;a href=\"https://s-bose.github.io/arrest/whats-new/\"&gt;whats new&lt;/a&gt;. Do check out the &lt;a href=\"https://s-bose.github.io/arrest/\"&gt;docs&lt;/a&gt; and &lt;a href=\"https://github.com/s-bose/arrest\"&gt;GitHub&lt;/a&gt;, and if this sounds interesting to you, please do give it a try, and let me know in case you face any issue.&lt;/p&gt;\n\n&lt;p&gt;For those who might already be familiar with it and encountered any issues, I hope the new version fixes them for you. For new people, I&amp;#39;d love to know your thoughts and suggestions,  and thank you to everyone here in the Python community who showed their support and provided their feedbacks in my earlier posts!&lt;/p&gt;\n\n&lt;p&gt;P.S. I am also open to contributions, if you feel like you have some ideas that Arrest can benefit from, feel free to raise a PR!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/8R90ntSxk6JwB8vG717RKmh7cI0Dhge4BrShejWXohc.jpg?auto=webp&amp;s=e79342db90e7bcb8011fbd235cb6b1b936ccae61",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/8R90ntSxk6JwB8vG717RKmh7cI0Dhge4BrShejWXohc.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=2d28ae3aab85f19b88a72d640687d9f9136de074",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/8R90ntSxk6JwB8vG717RKmh7cI0Dhge4BrShejWXohc.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=6b553319e619748f08dc776052871ef1f5030eb0",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/8R90ntSxk6JwB8vG717RKmh7cI0Dhge4BrShejWXohc.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=d75a69ec747048dee54b1a6a5c7b2c4908736b6f",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/8R90ntSxk6JwB8vG717RKmh7cI0Dhge4BrShejWXohc.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=eddd7f054856b3ccb58488cc030ad92a7eadaf9f",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/8R90ntSxk6JwB8vG717RKmh7cI0Dhge4BrShejWXohc.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=6960269e315452096cfcbba63064ea0c64746c47",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/8R90ntSxk6JwB8vG717RKmh7cI0Dhge4BrShejWXohc.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=0d95a8e0d443bb96d5f2d632df99d3fdf10daf69",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "J906vGCcMe8NAUS9zLGXPdc-eAvIzNlrfuQCVHsdc4k"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1ghjt23",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "s_basu",
            "discussion_type": null,
            "num_comments": 9,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1ghjt23/i_have_finally_released_a_new_version_for_my/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1ghjt23/i_have_finally_released_a_new_version_for_my/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730505928.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# Weekly Thread: Resource Request and Sharing 📚\n\nStumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!\n\n## How it Works:\n\n1. **Request**: Can't find a resource on a particular topic? Ask here!\n2. **Share**: Found something useful? Share it with the community.\n3. **Review**: Give or get opinions on Python resources you've used.\n\n## Guidelines:\n\n* Please include the type of resource (e.g., book, video, article) and the topic.\n* Always be respectful when reviewing someone else's shared resource.\n\n## Example Shares:\n\n1. **Book**: [\"Fluent Python\"](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \\- Great for understanding Pythonic idioms.\n2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \\- Excellent overview of Python's built-in data structures.\n3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \\- A deep dive into decorators.\n\n## Example Requests:\n\n1. **Looking for**: Video tutorials on web scraping with Python.\n2. **Need**: Book recommendations for Python machine learning.\n\nShare the knowledge, enrich the community. Happy learning! 🌟",
            "author_fullname": "t2_6l4z3",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread",
            "link_flair_richtext": [
                {
                    "a": ":pythonLogo:",
                    "e": "emoji",
                    "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                },
                {
                    "e": "text",
                    "t": " Daily Thread"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "daily-thread",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1ghjow6",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.81,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 3,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": ":pythonLogo: Daily Thread",
            "can_mod_post": false,
            "score": 3,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": true,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730505617.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: Resource Request and Sharing 📚&lt;/h1&gt;\n\n&lt;p&gt;Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Request&lt;/strong&gt;: Can&amp;#39;t find a resource on a particular topic? Ask here!&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Share&lt;/strong&gt;: Found something useful? Share it with the community.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Review&lt;/strong&gt;: Give or get opinions on Python resources you&amp;#39;ve used.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Please include the type of resource (e.g., book, video, article) and the topic.&lt;/li&gt;\n&lt;li&gt;Always be respectful when reviewing someone else&amp;#39;s shared resource.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Shares:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Book&lt;/strong&gt;: &lt;a href=\"https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008\"&gt;&amp;quot;Fluent Python&amp;quot;&lt;/a&gt; - Great for understanding Pythonic idioms.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Video&lt;/strong&gt;: &lt;a href=\"https://www.youtube.com/watch?v=pkYVOmU3MgA\"&gt;Python Data Structures&lt;/a&gt; - Excellent overview of Python&amp;#39;s built-in data structures.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Article&lt;/strong&gt;: &lt;a href=\"https://realpython.com/primer-on-python-decorators/\"&gt;Understanding Python Decorators&lt;/a&gt; - A deep dive into decorators.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Example Requests:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Looking for&lt;/strong&gt;: Video tutorials on web scraping with Python.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Need&lt;/strong&gt;: Book recommendations for Python machine learning.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Share the knowledge, enrich the community. Happy learning! 🌟&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#00a6a5",
            "id": "1ghjow6",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "AutoModerator",
            "discussion_type": null,
            "num_comments": 1,
            "send_replies": false,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1ghjow6/saturday_daily_thread_resource_request_and/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1ghjow6/saturday_daily_thread_resource_request_and/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730505617.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I was asked to write a short list of good python defaults at work. To align all teams. This is what I came up with. Do you agree?\n\n1. Use uv for deps (and everything else)\n2. Use ruff for formatting and linting\n3. Support Python 3.9 (but use 3.13)\n4. Use pyproject.toml for all tooling cfg\n5. Use type hints (pyright for us)\n6. Use pydantic for data classes\n7. Use pytest instead of unittest\n8. Use click instead of argparse\n",
            "author_fullname": "t2_1bquj2nprk",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "State of the Art Python in 2024",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1ghiln0",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.95,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 591,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 591,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1730534418.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730502580.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I was asked to write a short list of good python defaults at work. To align all teams. This is what I came up with. Do you agree?&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Use uv for deps (and everything else)&lt;/li&gt;\n&lt;li&gt;Use ruff for formatting and linting&lt;/li&gt;\n&lt;li&gt;Support Python 3.9 (but use 3.13)&lt;/li&gt;\n&lt;li&gt;Use pyproject.toml for all tooling cfg&lt;/li&gt;\n&lt;li&gt;Use type hints (pyright for us)&lt;/li&gt;\n&lt;li&gt;Use pydantic for data classes&lt;/li&gt;\n&lt;li&gt;Use pytest instead of unittest&lt;/li&gt;\n&lt;li&gt;Use click instead of argparse&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1ghiln0",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "awesomealchemy",
            "discussion_type": null,
            "num_comments": 185,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1ghiln0/state_of_the_art_python_in_2024/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1ghiln0/state_of_the_art_python_in_2024/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730502580.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "First, an apology. I've posted this project here a few days ago. The project was showcasing an idea, but did not show anything substantial or interesting, and I had only invested a few hours into it. To make matters worse, I generated a post via ChatGPT, which in hindsight looked like total garbage, and was generally a dick move.\n\nSecond, about me. I'm T, a security researcher at Microsoft. A lot of my work revolves around identifying user behavior in our Azure cloud infrastructure. Naturally, this happens through mountains of logs, which I query on our platform. However, I always felt like viewing this data in the form of a boring gray table is a missed opportunity. I think many good insights can be gained from viewing bland data in creative ways. So, I came up with log4view as a single-evening project just to show it around my office.\n\nFast forward to now, it's Friday night and I've spent most of my weekend working on features and improvements. I think this is a really cool and fun project, and I would genuinely love to hear your thoughts and ideas.\n\nSo, third, my project.\n\n**What Log4View Does**\n\nLog4view is a tool for technical people who work with logs to view their data in a more visually stimulating way - in the hopes of bringing new insights and ideas. Log4view will generate up to 25 nodes per page, and a potentially endless number of pages total. This amount of nodes is hardcoded, but you can edit the variable which is *acceptable\\_number\\_of\\_nodes\\_in\\_page*. Ideally you will work with up to a couple hundred logs, but if you choose to expand the above variable, the sky's the limit.\n\nLog4view accepts a file path to your data, and a secondary key. The tool will then create main nodes made up of secondary keys, and sub-nodes of the main outer key of your data structure.\n\nThe output is a color coded collection of pages of network graphs, each featuring nodes and edges, and more data about each node on hovering your cursor over it.\n\n**Target Audience**\n\nMy target audience is people who view mountains of logs as I do, and who try to glean insights from them. I can't even imagine how many professions this includes, but I reckon many in IT, Data Science, some Engineering, etc.\n\n**Comparison**\n\nI checked out a few other commercial tools which claim to be log visualizers, but the closest I've found is SolarWinds who create real-time view of logs with a few charts and colors.\n\nThis further emphasizes my point. Creative insights require creative views. I genuinely think the more creative ways you can view and think about your data, the better you'll understand it.\n\nI hope I'm right.\n\nAnyway, here's the link. Hope you like it, and if you don't, hope you're willing to share your thoughts with me :)\n\n[https://github.com/Trivulzianus/log4view](https://github.com/Trivulzianus/log4view)",
            "author_fullname": "t2_865x81wa",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Log4View: Log Visualization Tool",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1ghhcab",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.77,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 13,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 13,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1730499463.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730499022.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;First, an apology. I&amp;#39;ve posted this project here a few days ago. The project was showcasing an idea, but did not show anything substantial or interesting, and I had only invested a few hours into it. To make matters worse, I generated a post via ChatGPT, which in hindsight looked like total garbage, and was generally a dick move.&lt;/p&gt;\n\n&lt;p&gt;Second, about me. I&amp;#39;m T, a security researcher at Microsoft. A lot of my work revolves around identifying user behavior in our Azure cloud infrastructure. Naturally, this happens through mountains of logs, which I query on our platform. However, I always felt like viewing this data in the form of a boring gray table is a missed opportunity. I think many good insights can be gained from viewing bland data in creative ways. So, I came up with log4view as a single-evening project just to show it around my office.&lt;/p&gt;\n\n&lt;p&gt;Fast forward to now, it&amp;#39;s Friday night and I&amp;#39;ve spent most of my weekend working on features and improvements. I think this is a really cool and fun project, and I would genuinely love to hear your thoughts and ideas.&lt;/p&gt;\n\n&lt;p&gt;So, third, my project.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What Log4View Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Log4view is a tool for technical people who work with logs to view their data in a more visually stimulating way - in the hopes of bringing new insights and ideas. Log4view will generate up to 25 nodes per page, and a potentially endless number of pages total. This amount of nodes is hardcoded, but you can edit the variable which is &lt;em&gt;acceptable_number_of_nodes_in_page&lt;/em&gt;. Ideally you will work with up to a couple hundred logs, but if you choose to expand the above variable, the sky&amp;#39;s the limit.&lt;/p&gt;\n\n&lt;p&gt;Log4view accepts a file path to your data, and a secondary key. The tool will then create main nodes made up of secondary keys, and sub-nodes of the main outer key of your data structure.&lt;/p&gt;\n\n&lt;p&gt;The output is a color coded collection of pages of network graphs, each featuring nodes and edges, and more data about each node on hovering your cursor over it.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;My target audience is people who view mountains of logs as I do, and who try to glean insights from them. I can&amp;#39;t even imagine how many professions this includes, but I reckon many in IT, Data Science, some Engineering, etc.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I checked out a few other commercial tools which claim to be log visualizers, but the closest I&amp;#39;ve found is SolarWinds who create real-time view of logs with a few charts and colors.&lt;/p&gt;\n\n&lt;p&gt;This further emphasizes my point. Creative insights require creative views. I genuinely think the more creative ways you can view and think about your data, the better you&amp;#39;ll understand it.&lt;/p&gt;\n\n&lt;p&gt;I hope I&amp;#39;m right.&lt;/p&gt;\n\n&lt;p&gt;Anyway, here&amp;#39;s the link. Hope you like it, and if you don&amp;#39;t, hope you&amp;#39;re willing to share your thoughts with me :)&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/Trivulzianus/log4view\"&gt;https://github.com/Trivulzianus/log4view&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/Sv_0IFDKC2TLpekTCCwZ5KOlNK97tZN15jlD6yMq7H8.jpg?auto=webp&amp;s=3eafb2321d9cde3355a2a6c9810733393d18a47e",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/Sv_0IFDKC2TLpekTCCwZ5KOlNK97tZN15jlD6yMq7H8.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=e6d23971172efc2b607cbf973995c86122d65f83",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/Sv_0IFDKC2TLpekTCCwZ5KOlNK97tZN15jlD6yMq7H8.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=efdb10bb23f9fe8a78111a7c25429830a02dfff0",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/Sv_0IFDKC2TLpekTCCwZ5KOlNK97tZN15jlD6yMq7H8.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=a9d147378f43841d1a7536b8e407ad80a2434f9f",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/Sv_0IFDKC2TLpekTCCwZ5KOlNK97tZN15jlD6yMq7H8.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=15376e382b49acfb1ab8e2c7bedcc1218275b70e",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/Sv_0IFDKC2TLpekTCCwZ5KOlNK97tZN15jlD6yMq7H8.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=85093170d3cdc3b8e3ce45155472eae105f2628d",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/Sv_0IFDKC2TLpekTCCwZ5KOlNK97tZN15jlD6yMq7H8.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=7d729cb2ddc946c741035d9ea87a2bb6e40b0e1e",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "JdtDUaT_bzrEg1TlaJmteWq-5sIfKFlQ9jXxHAQYFWM"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1ghhcab",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "dvnci1452",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1ghhcab/log4view_log_visualization_tool/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1ghhcab/log4view_log_visualization_tool/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730499022.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "**What it does**\n\n[pg\\_mooncake](https://github.com/Mooncake-Labs/pg_mooncake) brings a columnstore table to Postgres with DuckDb execution. These tables are written as Iceberg and Delta tables (parquet files + metadata) to your object store.\n\nQuery them outside of Postgres with DuckDB, Polars, Pandas, Spark directly without complex pipelines, stitching together ad-hoc files, or dataframe wangling.  \n\n\n**Target audience**\n\nProduct engineers, data engineers, data scientist. \n\n  \n**Comparison**\n\nYou can use psycopg2 / sqlalchemy today. But the approach here is fundamentally different. You're writing data to an s3 bucket. You can share that bucket to your data science, engineering, analyst team without giving them access to your Postgres. \n\n  \nThere are some Parquet exporters in Postgres (pg\\_duckdb, pg\\_parquet, pg\\_analytics). pg\\_mooncake actually exposes table semantics inside of Postgres (updates, deletes, transactions). And table semantics outside of Postgres (Iceberg/Delta). \n\n**Story time!**\n\nI'm one of the founders of [Mooncake Labs](https://mooncake.dev/). We are building the simple lakehouse without the complex pipelines / data engineering infra. \n\nModern apps are built on Postgres. And we want to bring the python processing and analytics closer to this ecosystem. \n\nPostgres and Python are all you need.\n\n",
            "author_fullname": "t2_14rybqjex6",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "pg_mooncake: run python on your Postgres tables",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1ghgmmq",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.84,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 20,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 20,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730497033.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;What it does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/Mooncake-Labs/pg_mooncake\"&gt;pg_mooncake&lt;/a&gt; brings a columnstore table to Postgres with DuckDb execution. These tables are written as Iceberg and Delta tables (parquet files + metadata) to your object store.&lt;/p&gt;\n\n&lt;p&gt;Query them outside of Postgres with DuckDB, Polars, Pandas, Spark directly without complex pipelines, stitching together ad-hoc files, or dataframe wangling.  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Product engineers, data engineers, data scientist. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;You can use psycopg2 / sqlalchemy today. But the approach here is fundamentally different. You&amp;#39;re writing data to an s3 bucket. You can share that bucket to your data science, engineering, analyst team without giving them access to your Postgres. &lt;/p&gt;\n\n&lt;p&gt;There are some Parquet exporters in Postgres (pg_duckdb, pg_parquet, pg_analytics). pg_mooncake actually exposes table semantics inside of Postgres (updates, deletes, transactions). And table semantics outside of Postgres (Iceberg/Delta). &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Story time!&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m one of the founders of &lt;a href=\"https://mooncake.dev/\"&gt;Mooncake Labs&lt;/a&gt;. We are building the simple lakehouse without the complex pipelines / data engineering infra. &lt;/p&gt;\n\n&lt;p&gt;Modern apps are built on Postgres. And we want to bring the python processing and analytics closer to this ecosystem. &lt;/p&gt;\n\n&lt;p&gt;Postgres and Python are all you need.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/WXOCOBZrCHGYqBLgP0dkh9KPvEsXCDO6kive2Vf0Bxk.jpg?auto=webp&amp;s=46184b0b09ccd0c6980f7eed93bd608f1cce346c",
                            "width": 1280,
                            "height": 640
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/WXOCOBZrCHGYqBLgP0dkh9KPvEsXCDO6kive2Vf0Bxk.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=2d02103a5854aa742a1da69cf195d37b53db6872",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/WXOCOBZrCHGYqBLgP0dkh9KPvEsXCDO6kive2Vf0Bxk.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=914384b7f5b39546cda1742ff8af2d7eb9fda731",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/WXOCOBZrCHGYqBLgP0dkh9KPvEsXCDO6kive2Vf0Bxk.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=fa693688c49653275953b20c1900353ac7e3ccc5",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/WXOCOBZrCHGYqBLgP0dkh9KPvEsXCDO6kive2Vf0Bxk.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=06d9e9786f28ccfb1c2e3ac87b62fecf8c78232b",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/WXOCOBZrCHGYqBLgP0dkh9KPvEsXCDO6kive2Vf0Bxk.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=deca630d51f35049ec0dcd0986fcf4964a50e82c",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/WXOCOBZrCHGYqBLgP0dkh9KPvEsXCDO6kive2Vf0Bxk.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=49068b7de3acaf364f3dc6a9fafc4230ee5db09c",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "mFPzukfHzjfQmXK-GGSEiEnVXuYv17GWNzigHCDrpvI"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1ghgmmq",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "InternetFit7518",
            "discussion_type": null,
            "num_comments": 8,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1ghgmmq/pg_mooncake_run_python_on_your_postgres_tables/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1ghgmmq/pg_mooncake_run_python_on_your_postgres_tables/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730497033.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I have a set of notebooks (actually they are jupytext files). They are broken up into logical units and exchange data via the file system. I am building a processing script to run the notebooks in order and render the plotting notebook to html. \n\nThis seems to work, but before i make this a production script i wanted to hear your thoughts. \n\nPrevious i was using one large file, but that gets so unwieldy. I did like using papermill for parameter injection though. now i have to do that via config file. \n\nI have tried to break out parts of the script into functions in a module but that just seems to give the worst of both worlds: can’t easily modify code, still have to work with notebooks. \n\nHow are you all handling this?",
            "author_fullname": "t2_3siio3a",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Breaking apart jupyter scripts",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1ghgf4h",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.46,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730496494.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have a set of notebooks (actually they are jupytext files). They are broken up into logical units and exchange data via the file system. I am building a processing script to run the notebooks in order and render the plotting notebook to html. &lt;/p&gt;\n\n&lt;p&gt;This seems to work, but before i make this a production script i wanted to hear your thoughts. &lt;/p&gt;\n\n&lt;p&gt;Previous i was using one large file, but that gets so unwieldy. I did like using papermill for parameter injection though. now i have to do that via config file. &lt;/p&gt;\n\n&lt;p&gt;I have tried to break out parts of the script into functions in a module but that just seems to give the worst of both worlds: can’t easily modify code, still have to work with notebooks. &lt;/p&gt;\n\n&lt;p&gt;How are you all handling this?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1ghgf4h",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "jjrreett",
            "discussion_type": null,
            "num_comments": 28,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1ghgf4h/breaking_apart_jupyter_scripts/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1ghgf4h/breaking_apart_jupyter_scripts/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730496494.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "## PyCon US 2025\n\nWe're excited to announce that the **PyCon US 2025** website *and* call for (talk) proposals are officially live! \n\nPlease help us spread the word, and if you're interested in giving a talk [read the guidelines](https://us.pycon.org/2025/speaking/guidelines/) and submit one!\n- **Blog**: &lt;https://pycon.blogspot.com/2024/11/pycon-us-2025-launches.html&gt;\n- **PyCon Website**: https://us.pycon.org/2025",
            "author_fullname": "t2_jlklb3zi",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "PyCon US 2025 Site Launches, CFP Live!",
            "link_flair_richtext": [],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": null,
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1ghdnfr",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.68,
            "author_flair_background_color": "",
            "subreddit_type": "public",
            "ups": 4,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": null,
            "can_mod_post": false,
            "score": 4,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [
                {
                    "a": ":pythonLogo:",
                    "e": "emoji",
                    "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                },
                {
                    "e": "text",
                    "t": " PSF Staff | "
                },
                {
                    "a": ":litestar-logo:",
                    "e": "emoji",
                    "u": "https://emoji.redditmedia.com/a0zgnzwzd9kb1_t5_2qh0y/litestar-logo"
                },
                {
                    "e": "text",
                    "t": " Litestar Maintainer"
                }
            ],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730489160.0,
            "link_flair_type": "text",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "richtext",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h2&gt;PyCon US 2025&lt;/h2&gt;\n\n&lt;p&gt;We&amp;#39;re excited to announce that the &lt;strong&gt;PyCon US 2025&lt;/strong&gt; website &lt;em&gt;and&lt;/em&gt; call for (talk) proposals are officially live! &lt;/p&gt;\n\n&lt;p&gt;Please help us spread the word, and if you&amp;#39;re interested in giving a talk &lt;a href=\"https://us.pycon.org/2025/speaking/guidelines/\"&gt;read the guidelines&lt;/a&gt; and submit one!\n- &lt;strong&gt;Blog&lt;/strong&gt;: &lt;a href=\"https://pycon.blogspot.com/2024/11/pycon-us-2025-launches.html\"&gt;https://pycon.blogspot.com/2024/11/pycon-us-2025-launches.html&lt;/a&gt;\n- &lt;strong&gt;PyCon Website&lt;/strong&gt;: &lt;a href=\"https://us.pycon.org/2025\"&gt;https://us.pycon.org/2025&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": ":pythonLogo: PSF Staff | :litestar-logo: Litestar Maintainer",
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": "moderator",
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "",
            "id": "1ghdnfr",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "monorepo",
            "discussion_type": null,
            "num_comments": 1,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": "dark",
            "permalink": "/r/Python/comments/1ghdnfr/pycon_us_2025_site_launches_cfp_live/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1ghdnfr/pycon_us_2025_site_launches_cfp_live/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730489160.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I’ve been experimenting with an AI tool to generate / deploy Python apps in your browser. It has a lot of glaring issues (minimal logs, slow deployments, only supports FastAPI) but I’m curious to learn if anyone thinks this could be potentially useful before I go deeper on implementation.\n\n\n\nYou can try it here: [ai.launchflow.com](https://ai.launchflow.com/)\n\n\n\nThe source code is here: [github.com/launchflow/launchflow-ai](https://github.com/launchflow/launchflow-ai)\n\n\n\nHere’s an example HTMX + FastAPI app I just generated with it: [Todo App](https://account-2746196416-9.launchflow.cloud/)\n\n\n\n**What it does**\n\nTalk to an AI agent (Claude) to generate new FastAPI apps, edit them in your browser, then deploy to a serverless runtime. \n\n\n\n**Target audience**\n\nAny Python user that wants to prototype a new app.\n\n\n\n**Comparison**\n\nThis project is a fork of [bolt.new](https://github.com/stackblitz/bolt.new) with the webcontainers swapped out for a remote, serverless runtime that better supports Python. (webcontainers only support wasm Python apps, so most packages will not work)  \n\n\n**Disclaimer:** It does require an account to use, but everything (even deployments) is 100% free. The account is only used to enforce rate limiting so we don’t burn through all our Anthropic credits!\n\n\n\nIs this something you would use if it was more polished?",
            "author_fullname": "t2_pxof4neu",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Generate, edit, and deploy FastAPI apps in your browser",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1ghbjv4",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.57,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 5,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 5,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730483735.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I’ve been experimenting with an AI tool to generate / deploy Python apps in your browser. It has a lot of glaring issues (minimal logs, slow deployments, only supports FastAPI) but I’m curious to learn if anyone thinks this could be potentially useful before I go deeper on implementation.&lt;/p&gt;\n\n&lt;p&gt;You can try it here: &lt;a href=\"https://ai.launchflow.com/\"&gt;ai.launchflow.com&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The source code is here: &lt;a href=\"https://github.com/launchflow/launchflow-ai\"&gt;github.com/launchflow/launchflow-ai&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Here’s an example HTMX + FastAPI app I just generated with it: &lt;a href=\"https://account-2746196416-9.launchflow.cloud/\"&gt;Todo App&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What it does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Talk to an AI agent (Claude) to generate new FastAPI apps, edit them in your browser, then deploy to a serverless runtime. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Any Python user that wants to prototype a new app.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This project is a fork of &lt;a href=\"https://github.com/stackblitz/bolt.new\"&gt;bolt.new&lt;/a&gt; with the webcontainers swapped out for a remote, serverless runtime that better supports Python. (webcontainers only support wasm Python apps, so most packages will not work)  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; It does require an account to use, but everything (even deployments) is 100% free. The account is only used to enforce rate limiting so we don’t burn through all our Anthropic credits!&lt;/p&gt;\n\n&lt;p&gt;Is this something you would use if it was more polished?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1ghbjv4",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "josh_flow",
            "discussion_type": null,
            "num_comments": 10,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1ghbjv4/generate_edit_and_deploy_fastapi_apps_in_your/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1ghbjv4/generate_edit_and_deploy_fastapi_apps_in_your/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730483735.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "TLDR: clean up your inbox quickly at [CleanMail](https://cleanmail.bharatkalluri.com/) . Code is over at [https://github.com/BharatKalluri/cleanmail](https://github.com/BharatKalluri/cleanmail)\n\n  \n**What it does**\n\nLet's you bulk delete &amp; unsubscribe to emails grouped by sender. so that you can quickly clean up all the cruft from your email!\n\n**Target audience**\n\nPersonal side project, I think people may find use in it\n\n**Comparison**\n\nTidy mail exists, but unfortunately its last updated 5 years back and the website does not seem to work for me. I wanted a low maintenance / simple app.   \n\n\n**Story time!**\n\nI've started today morning with 1847 emails in my Gmail inbox today morning. After some preliminary analysis, I found that more than 70% of all my emails were marketing junk.\n\nI searched around for some time and found that there are a lot of companies charging a pretty significant amount for something so straightforward.\n\nSo I wrote a open source email cleaning solution, it groups by sender ID and gives you an option to both unsubscribe and delete all emails from that sender email ID.\n\nAfter doing all this, I was around 180 emails which I could quickly scan and Archive or Delete.\n\nPlease feel free to raise issues or share feedback!",
            "author_fullname": "t2_oxf24x0dc",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "CleanMail: a open source tool written with streamlit to get rid of all the cruft in your email",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gh7x39",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.95,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 48,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 48,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730474508.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;TLDR: clean up your inbox quickly at &lt;a href=\"https://cleanmail.bharatkalluri.com/\"&gt;CleanMail&lt;/a&gt; . Code is over at &lt;a href=\"https://github.com/BharatKalluri/cleanmail\"&gt;https://github.com/BharatKalluri/cleanmail&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What it does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Let&amp;#39;s you bulk delete &amp;amp; unsubscribe to emails grouped by sender. so that you can quickly clean up all the cruft from your email!&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Personal side project, I think people may find use in it&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Tidy mail exists, but unfortunately its last updated 5 years back and the website does not seem to work for me. I wanted a low maintenance / simple app.   &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Story time!&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve started today morning with 1847 emails in my Gmail inbox today morning. After some preliminary analysis, I found that more than 70% of all my emails were marketing junk.&lt;/p&gt;\n\n&lt;p&gt;I searched around for some time and found that there are a lot of companies charging a pretty significant amount for something so straightforward.&lt;/p&gt;\n\n&lt;p&gt;So I wrote a open source email cleaning solution, it groups by sender ID and gives you an option to both unsubscribe and delete all emails from that sender email ID.&lt;/p&gt;\n\n&lt;p&gt;After doing all this, I was around 180 emails which I could quickly scan and Archive or Delete.&lt;/p&gt;\n\n&lt;p&gt;Please feel free to raise issues or share feedback!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gh7x39",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "disruptive_pickle",
            "discussion_type": null,
            "num_comments": 15,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gh7x39/cleanmail_a_open_source_tool_written_with/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gh7x39/cleanmail_a_open_source_tool_written_with/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730474508.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I work for an organization where I will start to do some lightweight data analysis &amp; dataviz, with a workflow that means I make static charts then hand off a designer to be jazzed up in Adobe Illustrator.\n\nDoes anyone have thoughts on the best visualization library to use for this? What I'd like is something that A) allows me to create somewhat good looking charts off the bat and B) can export these charts in a clean SVG format, so that a designer can concentrate mostly on adding visual flair without spending a lot of time tidying up things first.\n\nAny reason to recommend say Plotly, Seaborn, Altair, above others? Or something else entirely?",
            "author_fullname": "t2_10nmnf",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Best visualization library for clean SVG exports?",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gh5y83",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.9,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 14,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 14,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730469272.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I work for an organization where I will start to do some lightweight data analysis &amp;amp; dataviz, with a workflow that means I make static charts then hand off a designer to be jazzed up in Adobe Illustrator.&lt;/p&gt;\n\n&lt;p&gt;Does anyone have thoughts on the best visualization library to use for this? What I&amp;#39;d like is something that A) allows me to create somewhat good looking charts off the bat and B) can export these charts in a clean SVG format, so that a designer can concentrate mostly on adding visual flair without spending a lot of time tidying up things first.&lt;/p&gt;\n\n&lt;p&gt;Any reason to recommend say Plotly, Seaborn, Altair, above others? Or something else entirely?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gh5y83",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "interexit",
            "discussion_type": null,
            "num_comments": 7,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gh5y83/best_visualization_library_for_clean_svg_exports/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gh5y83/best_visualization_library_for_clean_svg_exports/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730469272.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Last month [I asked this community](https://www.reddit.com/r/Python/comments/1fq5567/looking_for_volunteers_to_take_my_python_course/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button) if anyone would be willing to take my new course on how to code Python and give me some feedback in return.\n\nThe response was overwhelming and I am so grateful! Loads of people took the course and I got tonnes of feedback which I was able to implement. I'm really pleased to share that since then I have now had over 300 enrolments on the course and a small amount of income coming my way.\n\nThis is massive for me, since this was my first course and I am now going forward onto making more courses - this time on the topic of simulation in Python.\n\nSo as a thank you, I'd like to give away 100 complimentary vouchers for the course, just for this community: [https://www.udemy.com/course/python-for-engineers-scientists-and-analysts/?couponCode=THANKSREDDIT](https://www.udemy.com/course/python-for-engineers-scientists-and-analysts/?couponCode=THANKSREDDIT)\n\nPlease take one of the vouchers if you feel you might benefit from the course. It is aimed at people with some kind of existing technical skillset (e.g. engineers, scientists, etc) so has a focus on data, statistics and modelling. The main libraries covered are numpy, pandas and seaborn.\n\nThanks again r/Python",
            "author_fullname": "t2_7alzrfpm",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Thank you r/Python - I'd like to give something back",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Tutorial"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "tutorial",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gh1svl",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.88,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 140,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Tutorial",
            "can_mod_post": false,
            "score": 140,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1730457420.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730455065.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Last month &lt;a href=\"https://www.reddit.com/r/Python/comments/1fq5567/looking_for_volunteers_to_take_my_python_course/?utm_source=share&amp;amp;utm_medium=web3x&amp;amp;utm_name=web3xcss&amp;amp;utm_term=1&amp;amp;utm_content=share_button\"&gt;I asked this community&lt;/a&gt; if anyone would be willing to take my new course on how to code Python and give me some feedback in return.&lt;/p&gt;\n\n&lt;p&gt;The response was overwhelming and I am so grateful! Loads of people took the course and I got tonnes of feedback which I was able to implement. I&amp;#39;m really pleased to share that since then I have now had over 300 enrolments on the course and a small amount of income coming my way.&lt;/p&gt;\n\n&lt;p&gt;This is massive for me, since this was my first course and I am now going forward onto making more courses - this time on the topic of simulation in Python.&lt;/p&gt;\n\n&lt;p&gt;So as a thank you, I&amp;#39;d like to give away 100 complimentary vouchers for the course, just for this community: &lt;a href=\"https://www.udemy.com/course/python-for-engineers-scientists-and-analysts/?couponCode=THANKSREDDIT\"&gt;https://www.udemy.com/course/python-for-engineers-scientists-and-analysts/?couponCode=THANKSREDDIT&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Please take one of the vouchers if you feel you might benefit from the course. It is aimed at people with some kind of existing technical skillset (e.g. engineers, scientists, etc) so has a focus on data, statistics and modelling. The main libraries covered are numpy, pandas and seaborn.&lt;/p&gt;\n\n&lt;p&gt;Thanks again &lt;a href=\"/r/Python\"&gt;r/Python&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#dadada",
            "id": "1gh1svl",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "bobo-the-merciful",
            "discussion_type": null,
            "num_comments": 34,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gh1svl/thank_you_rpython_id_like_to_give_something_back/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gh1svl/thank_you_rpython_id_like_to_give_something_back/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730455065.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hi all, \n\nI’ve been tasked with implementing a dashboard which will update monthly from a database which needs to show key analysis metrics, have user authentication, and ideally run super smooth. I have been looking at using libraries such as Django and combining it with plotting libraries but I’ve only used Streamlit in the past which required no JavaScript or HTML knowledge. \n\nAre there any other solutions which would allow me to have greater control than Streamlit but without losing the ease and speed of deploying such dashboards? Extra points if the libraries are MIT licensed!",
            "author_fullname": "t2_7za8nma2",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Implementing dashboard as a webpage in an enterprise setting",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gh0qde",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.92,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 36,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 36,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730449999.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi all, &lt;/p&gt;\n\n&lt;p&gt;I’ve been tasked with implementing a dashboard which will update monthly from a database which needs to show key analysis metrics, have user authentication, and ideally run super smooth. I have been looking at using libraries such as Django and combining it with plotting libraries but I’ve only used Streamlit in the past which required no JavaScript or HTML knowledge. &lt;/p&gt;\n\n&lt;p&gt;Are there any other solutions which would allow me to have greater control than Streamlit but without losing the ease and speed of deploying such dashboards? Extra points if the libraries are MIT licensed!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gh0qde",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Traditional_Parking6",
            "discussion_type": null,
            "num_comments": 37,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gh0qde/implementing_dashboard_as_a_webpage_in_an/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gh0qde/implementing_dashboard_as_a_webpage_in_an/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730449999.0,
            "num_crossposts": 1,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Three diverging colormaps have been added: \"berlin\", \"managua\", and \"vanimo\". They are dark-mode diverging colormaps, with minimum lightness at the center, and maximum at the extremes. These are taken from F. Crameri's Scientific colour maps version 8.0.1 (DOI: https://doi.org/10.5281/zenodo.1243862).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nvals = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(vals, vals)\nimg = np.sin(x*y)\n\n_, ax = plt.subplots(1, 3)\nax[0].imshow(img, cmap=plt.cm.berlin)\nax[1].imshow(img, cmap=plt.cm.managua)\nax[2].imshow(img, cmap=plt.cm.vanimo)\n\n- https://matplotlib.org/devdocs/users/next_whats_new/diverging_colormaps.html\n- https://github.com/matplotlib/matplotlib/pull/28587\n\nAlready available in Matplotlib v3.10.0rc1.\n\nhttps://matplotlib.org/devdocs/_downloads/fae62e20036f0fb6ba139164b87c210e/diverging_colormaps-1.2x.png",
            "author_fullname": "t2_14okit",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Incoming in matplotlib 3.10: Dark-mode diverging colormaps",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "News"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "news",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gh094o",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.94,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 21,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "News",
            "can_mod_post": false,
            "score": 21,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730447610.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Three diverging colormaps have been added: &amp;quot;berlin&amp;quot;, &amp;quot;managua&amp;quot;, and &amp;quot;vanimo&amp;quot;. They are dark-mode diverging colormaps, with minimum lightness at the center, and maximum at the extremes. These are taken from F. Crameri&amp;#39;s Scientific colour maps version 8.0.1 (DOI: &lt;a href=\"https://doi.org/10.5281/zenodo.1243862\"&gt;https://doi.org/10.5281/zenodo.1243862&lt;/a&gt;).&lt;/p&gt;\n\n&lt;p&gt;import numpy as np\nimport matplotlib.pyplot as plt&lt;/p&gt;\n\n&lt;p&gt;vals = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(vals, vals)\nimg = np.sin(x*y)&lt;/p&gt;\n\n&lt;p&gt;_, ax = plt.subplots(1, 3)\nax[0].imshow(img, cmap=plt.cm.berlin)\nax[1].imshow(img, cmap=plt.cm.managua)\nax[2].imshow(img, cmap=plt.cm.vanimo)&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://matplotlib.org/devdocs/users/next_whats_new/diverging_colormaps.html\"&gt;https://matplotlib.org/devdocs/users/next_whats_new/diverging_colormaps.html&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/matplotlib/matplotlib/pull/28587\"&gt;https://github.com/matplotlib/matplotlib/pull/28587&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Already available in Matplotlib v3.10.0rc1.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://matplotlib.org/devdocs/_downloads/fae62e20036f0fb6ba139164b87c210e/diverging_colormaps-1.2x.png\"&gt;https://matplotlib.org/devdocs/_downloads/fae62e20036f0fb6ba139164b87c210e/diverging_colormaps-1.2x.png&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/21coSkV6VO2dw8xkyiIdS3UT_rZUK96PSsjYMpKkoRo.png?auto=webp&amp;s=8ce52e50486059c04650fdad11fbc6a691b2cb30",
                            "width": 1100,
                            "height": 900
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/21coSkV6VO2dw8xkyiIdS3UT_rZUK96PSsjYMpKkoRo.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=32330ce1accde6f85cb4f01441221f82c966d5a7",
                                "width": 108,
                                "height": 88
                            },
                            {
                                "url": "https://external-preview.redd.it/21coSkV6VO2dw8xkyiIdS3UT_rZUK96PSsjYMpKkoRo.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=1f9003c279a0855aa3ba99bcadd4e80fee36b627",
                                "width": 216,
                                "height": 176
                            },
                            {
                                "url": "https://external-preview.redd.it/21coSkV6VO2dw8xkyiIdS3UT_rZUK96PSsjYMpKkoRo.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=0bdff6d94fd08b0bd646e11eda91738c2c8886dd",
                                "width": 320,
                                "height": 261
                            },
                            {
                                "url": "https://external-preview.redd.it/21coSkV6VO2dw8xkyiIdS3UT_rZUK96PSsjYMpKkoRo.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=68ee380f9e1af06d8a5bae33ccf1b3c85b2ede06",
                                "width": 640,
                                "height": 523
                            },
                            {
                                "url": "https://external-preview.redd.it/21coSkV6VO2dw8xkyiIdS3UT_rZUK96PSsjYMpKkoRo.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=f734687696434d7a27ec010b233794b7805506aa",
                                "width": 960,
                                "height": 785
                            },
                            {
                                "url": "https://external-preview.redd.it/21coSkV6VO2dw8xkyiIdS3UT_rZUK96PSsjYMpKkoRo.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=25e2af8b9078643f0eed4d70913fd9c170119596",
                                "width": 1080,
                                "height": 883
                            }
                        ],
                        "variants": {},
                        "id": "iw7xGJ3caHbcMvZ7dzc6H9_bU2yK5g7bqculBzlW0ZU"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#7193ff",
            "id": "1gh094o",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Balance-",
            "discussion_type": null,
            "num_comments": 3,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gh094o/incoming_in_matplotlib_310_darkmode_diverging/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gh094o/incoming_in_matplotlib_310_darkmode_diverging/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730447610.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I am exploring various tools and libraries for data extraction from documents like PDFs. One tool I've looked into is img2table, which has been effective at extracting tables and works as a wrapper around different OCR tools. However, I noticed that PyMuPDF is a requirement for img2table, and I’ve read that if you build with PyMuPDF, you must make your source code open-source in line with its AGPL license. Does this requirement still apply if I use a project where PyMuPDF is a dependency, even if I don’t directly interact with the library myself?",
            "author_fullname": "t2_e5eboqty",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "PymuPDF licensing requirements for other dependencies",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1ggz3d3",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.8,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 6,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 6,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730441947.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am exploring various tools and libraries for data extraction from documents like PDFs. One tool I&amp;#39;ve looked into is img2table, which has been effective at extracting tables and works as a wrapper around different OCR tools. However, I noticed that PyMuPDF is a requirement for img2table, and I’ve read that if you build with PyMuPDF, you must make your source code open-source in line with its AGPL license. Does this requirement still apply if I use a project where PyMuPDF is a dependency, even if I don’t directly interact with the library myself?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1ggz3d3",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "impsanoos",
            "discussion_type": null,
            "num_comments": 4,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1ggz3d3/pymupdf_licensing_requirements_for_other/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1ggz3d3/pymupdf_licensing_requirements_for_other/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730441947.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# Where?\n\nYou can find it here:\n\n* **Source** \\- [FPV - GitHub](https://github.com/Voltaic314/File_Path_Validator)\n* **PyPI** \\- [FPV · PyPI](https://pypi.org/project/file-path-validator/)\n\n\n\n# What My Project Does\n\nFPV is a file path validation and cleaning library that consolidates all the quirky file path rules from different operating systems and cloud storage providers. It's designed to help automate compliance with various platform-specific file naming rules, especially when working with cloud storage services or syncing data across multiple systems.\n\n\n\n# Comparison\n\n# Why not use OS-based utilities?\n\nWhile some built-in OS libraries can validate or clean file paths, they don’t generally cover complex scenarios—like cross-platform checks or cloud provider restrictions. FPV aims to address specific constraints unique to services like SharePoint, Box, OneDrive, and more.\n\n# Can’t I just use regex or string manipulation?\n\nSure, but FPV organizes these rules into classes so that each supported platform has predefined validations and cleaning methods, saving you the time it would take to code all these restrictions individually. FPV can validate and clean file paths based on the platform’s unique restrictions, with modular classes for each service.\n\n\n\n# Target Audience\n\nFPV can be a handy tool for:\n\n* Devs who automate file handling and processing across cloud platforms.\n* People using Python scripts that require cross-platform file path generation and validation.\n* Developers needing consistency across OS and cloud storage provider rules, particularly if they sync with Windows or SharePoint.\n\n# \n\nInstallation\n\n    pip install file-path-validator\n\n\n\nHere’s a quick example of how FPV is used:\n\n    # example.py\n    from FPV import FPV_Windows, FPV_MacOS, FPV_Linux, FPV_Dropbox, FPV_Egnyte, FPV_OneDrive, FPV_SharePoint, FPV_ShareFile\n    \n    # Example path with potential issues\n    example_path = \"C:/ Broken/ **path/to||file . txt\"\n    \n    # Creating a validator object for Windows\n    FPVW = FPV_Windows(example_path, relative=True)\n    \n    # Original path\n    print(\"Original Path:\", FPVW.original_path)\n    \n    # Clean the path\n    cleaned_path = FPVW.clean()\n    print(\"Cleaned Path:\", cleaned_path)\n    \n    # Validate the path\n    try:\n        FPVW.validate()\n        print(\"Path is valid!\")\n    except ValueError as e:\n        print(f\"Validation Error: {e}\")\n    \n    # Auto-cleaning upon instantiation\n    FPVW_auto_clean = FPV_Windows(example_path, auto_clean=True, relative=True)\n    print(\"Automatically Cleaned Path:\", FPVW_auto_clean.path)",
            "author_fullname": "t2_y758o",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "File Path Validation Library",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1ggw9id",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.82,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 10,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 10,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730430740.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Where?&lt;/h1&gt;\n\n&lt;p&gt;You can find it here:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Source&lt;/strong&gt; - &lt;a href=\"https://github.com/Voltaic314/File_Path_Validator\"&gt;FPV - GitHub&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;PyPI&lt;/strong&gt; - &lt;a href=\"https://pypi.org/project/file-path-validator/\"&gt;FPV · PyPI&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;FPV is a file path validation and cleaning library that consolidates all the quirky file path rules from different operating systems and cloud storage providers. It&amp;#39;s designed to help automate compliance with various platform-specific file naming rules, especially when working with cloud storage services or syncing data across multiple systems.&lt;/p&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;h1&gt;Why not use OS-based utilities?&lt;/h1&gt;\n\n&lt;p&gt;While some built-in OS libraries can validate or clean file paths, they don’t generally cover complex scenarios—like cross-platform checks or cloud provider restrictions. FPV aims to address specific constraints unique to services like SharePoint, Box, OneDrive, and more.&lt;/p&gt;\n\n&lt;h1&gt;Can’t I just use regex or string manipulation?&lt;/h1&gt;\n\n&lt;p&gt;Sure, but FPV organizes these rules into classes so that each supported platform has predefined validations and cleaning methods, saving you the time it would take to code all these restrictions individually. FPV can validate and clean file paths based on the platform’s unique restrictions, with modular classes for each service.&lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;FPV can be a handy tool for:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Devs who automate file handling and processing across cloud platforms.&lt;/li&gt;\n&lt;li&gt;People using Python scripts that require cross-platform file path generation and validation.&lt;/li&gt;\n&lt;li&gt;Developers needing consistency across OS and cloud storage provider rules, particularly if they sync with Windows or SharePoint.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Installation&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;pip install file-path-validator\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here’s a quick example of how FPV is used:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# example.py\nfrom FPV import FPV_Windows, FPV_MacOS, FPV_Linux, FPV_Dropbox, FPV_Egnyte, FPV_OneDrive, FPV_SharePoint, FPV_ShareFile\n\n# Example path with potential issues\nexample_path = &amp;quot;C:/ Broken/ **path/to||file . txt&amp;quot;\n\n# Creating a validator object for Windows\nFPVW = FPV_Windows(example_path, relative=True)\n\n# Original path\nprint(&amp;quot;Original Path:&amp;quot;, FPVW.original_path)\n\n# Clean the path\ncleaned_path = FPVW.clean()\nprint(&amp;quot;Cleaned Path:&amp;quot;, cleaned_path)\n\n# Validate the path\ntry:\n    FPVW.validate()\n    print(&amp;quot;Path is valid!&amp;quot;)\nexcept ValueError as e:\n    print(f&amp;quot;Validation Error: {e}&amp;quot;)\n\n# Auto-cleaning upon instantiation\nFPVW_auto_clean = FPV_Windows(example_path, auto_clean=True, relative=True)\nprint(&amp;quot;Automatically Cleaned Path:&amp;quot;, FPVW_auto_clean.path)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/oc8L1kumt_22ahA-4z4S72SWWx1cx4D_EuuVAFwD13c.jpg?auto=webp&amp;s=bdc444c3b4cae82f6aab75e84cdfa932419c3959",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/oc8L1kumt_22ahA-4z4S72SWWx1cx4D_EuuVAFwD13c.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=b8cc6d38942369f66817b52af0ef16d073223a3a",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/oc8L1kumt_22ahA-4z4S72SWWx1cx4D_EuuVAFwD13c.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=1dc7c80801d5018fc39b64017a5663a470445c8f",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/oc8L1kumt_22ahA-4z4S72SWWx1cx4D_EuuVAFwD13c.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=402c62e497a2e0ef05f532f0a8d2440e4dbefbb4",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/oc8L1kumt_22ahA-4z4S72SWWx1cx4D_EuuVAFwD13c.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=762d6c2f04f985accc141944de6802de5b1058e8",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/oc8L1kumt_22ahA-4z4S72SWWx1cx4D_EuuVAFwD13c.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=6d1270f809d6a617972992099239a53b77c21a99",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/oc8L1kumt_22ahA-4z4S72SWWx1cx4D_EuuVAFwD13c.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=320f8afbeba0b6a765dc40927cf4ba90a3c25ef4",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "A7Fzzv-j8gAmQ_vZS2r64eo7kSyqHl2BoTR0V-aAkqU"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1ggw9id",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "MPGaming9000",
            "discussion_type": null,
            "num_comments": 4,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1ggw9id/file_path_validation_library/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1ggw9id/file_path_validation_library/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730430740.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# Weekly Thread: Meta Discussions and Free Talk Friday 🎙️\n\nWelcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!\n\n## How it Works:\n\n1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.\n2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.\n3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.\n\n## Guidelines:\n\n* All topics should be related to Python or the /r/python community.\n* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).\n\n## Example Topics:\n\n1. **New Python Release**: What do you think about the new features in Python 3.11?\n2. **Community Events**: Any Python meetups or webinars coming up?\n3. **Learning Resources**: Found a great Python tutorial? Share it here!\n4. **Job Market**: How has Python impacted your career?\n5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!\n6. **Community Ideas**: Something you'd like to see us do? tell us.\n\nLet's keep the conversation going. Happy discussing! 🌟",
            "author_fullname": "t2_6l4z3",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays",
            "link_flair_richtext": [
                {
                    "a": ":pythonLogo:",
                    "e": "emoji",
                    "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                },
                {
                    "e": "text",
                    "t": " Daily Thread"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "daily-thread",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1ggsqvj",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.61,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 3,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": ":pythonLogo: Daily Thread",
            "can_mod_post": false,
            "score": 3,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": true,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730419296.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: Meta Discussions and Free Talk Friday 🎙️&lt;/h1&gt;\n\n&lt;p&gt;Welcome to Free Talk Friday on &lt;a href=\"/r/Python\"&gt;/r/Python&lt;/a&gt;! This is the place to discuss the &lt;a href=\"/r/Python\"&gt;r/Python&lt;/a&gt; community (meta discussions), Python news, projects, or anything else Python-related!&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Open Mic&lt;/strong&gt;: Share your thoughts, questions, or anything you&amp;#39;d like related to Python or the community.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Community Pulse&lt;/strong&gt;: Discuss what you feel is working well or what could be improved in the &lt;a href=\"/r/python\"&gt;/r/python&lt;/a&gt; community.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;News &amp;amp; Updates&lt;/strong&gt;: Keep up-to-date with the latest in Python and share any news you find interesting.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;All topics should be related to Python or the &lt;a href=\"/r/python\"&gt;/r/python&lt;/a&gt; community.&lt;/li&gt;\n&lt;li&gt;Be respectful and follow Reddit&amp;#39;s &lt;a href=\"https://www.redditinc.com/policies/content-policy\"&gt;Code of Conduct&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Topics:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;New Python Release&lt;/strong&gt;: What do you think about the new features in Python 3.11?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Community Events&lt;/strong&gt;: Any Python meetups or webinars coming up?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Learning Resources&lt;/strong&gt;: Found a great Python tutorial? Share it here!&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Job Market&lt;/strong&gt;: How has Python impacted your career?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Hot Takes&lt;/strong&gt;: Got a controversial Python opinion? Let&amp;#39;s hear it!&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Community Ideas&lt;/strong&gt;: Something you&amp;#39;d like to see us do? tell us.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Let&amp;#39;s keep the conversation going. Happy discussing! 🌟&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#00a6a5",
            "id": "1ggsqvj",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "AutoModerator",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1ggsqvj/friday_daily_thread_rpython_meta_and_freetalk/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1ggsqvj/friday_daily_thread_rpython_meta_and_freetalk/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730419296.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hi all!\n\nI work freelance as a Analytics Engineer. My role with one of my major clients has taken somewhat of a turn lately, as i have been building a couple of internal streamlit apps to automate some of their internal functions in the company. This is all fine and dandy, we have been hosting some on a local server, and in other cases i merely installed python on their PC and made them a quick shortcut that boots up the server.\n\n  \nThey want to make some of these apps available to their international offices.\n\nIt is VERY low traffic (would go from about 5 daily users, to about 30-40 daily users. Each using the app for aproximately 1-2 hours a day, so some sort of serverless solution seems obvious.\n\nSo what do you think would be a suitable solution going forward?  \nDeploy on some sort of cloud solution? (seem like you can host it in a serverless fashion which seems obvious given the low traffic.)  \nSwitch framework? (Taipy looks quite promising)  \nDitch the fullstack python idea and rebuild it with a proper seperate frontend? (my frontend development capeabilities are VERY limited.)\n\nSomething entirely different?\n\nThank you",
            "author_fullname": "t2_7mt7jm9s",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Internal streamlit app expanding, whats next?",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1ggp5h0",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.92,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 60,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 60,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730408954.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi all!&lt;/p&gt;\n\n&lt;p&gt;I work freelance as a Analytics Engineer. My role with one of my major clients has taken somewhat of a turn lately, as i have been building a couple of internal streamlit apps to automate some of their internal functions in the company. This is all fine and dandy, we have been hosting some on a local server, and in other cases i merely installed python on their PC and made them a quick shortcut that boots up the server.&lt;/p&gt;\n\n&lt;p&gt;They want to make some of these apps available to their international offices.&lt;/p&gt;\n\n&lt;p&gt;It is VERY low traffic (would go from about 5 daily users, to about 30-40 daily users. Each using the app for aproximately 1-2 hours a day, so some sort of serverless solution seems obvious.&lt;/p&gt;\n\n&lt;p&gt;So what do you think would be a suitable solution going forward?&lt;br/&gt;\nDeploy on some sort of cloud solution? (seem like you can host it in a serverless fashion which seems obvious given the low traffic.)&lt;br/&gt;\nSwitch framework? (Taipy looks quite promising)&lt;br/&gt;\nDitch the fullstack python idea and rebuild it with a proper seperate frontend? (my frontend development capeabilities are VERY limited.)&lt;/p&gt;\n\n&lt;p&gt;Something entirely different?&lt;/p&gt;\n\n&lt;p&gt;Thank you&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1ggp5h0",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Immediate_Face_8410",
            "discussion_type": null,
            "num_comments": 22,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1ggp5h0/internal_streamlit_app_expanding_whats_next/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1ggp5h0/internal_streamlit_app_expanding_whats_next/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730408954.0,
            "num_crossposts": 1,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hi, I am looking for bot developers interested in deploying discord bots to a server that mainly builds Python projects and solutions in a community with around 10k users. The idea is to boost and expand engagement while implementing new features, so you'll be part of the server transformation journey. If you do have the experience or you are just starting but believe that your portfolio can provide meaningful value, we can start discussing the details. \n\njust DM me to know more.",
            "author_fullname": "t2_qt10ppzy",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Bot Development - growth and engagement",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1ggp51w",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.23,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730408924.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi, I am looking for bot developers interested in deploying discord bots to a server that mainly builds Python projects and solutions in a community with around 10k users. The idea is to boost and expand engagement while implementing new features, so you&amp;#39;ll be part of the server transformation journey. If you do have the experience or you are just starting but believe that your portfolio can provide meaningful value, we can start discussing the details. &lt;/p&gt;\n\n&lt;p&gt;just DM me to know more.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1ggp51w",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "SJCHL0101",
            "discussion_type": null,
            "num_comments": 1,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1ggp51w/bot_development_growth_and_engagement/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1ggp51w/bot_development_growth_and_engagement/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730408924.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I'm trying to print streamable output using Rich. It work flawlessly with out the console.status, however console.status is cause the previous line to be overwritten.\n\n\n\nEg:   \nIterataion One Ouput,  \nHello\n\nIteration Two Output,\n\nThere.\n\n  \nExpectation,  \nIteration one output,  \nHello  \n  \nIteration Two Ouput,\n\nHello There. \n\n  \nAgain this happens only if I introduce console.status, any suggestion. Sharing the following code.\n\n    with console.status(\"\") as status:\n        for chunk in ai.query_llm(user_input):\n            console.print(f\"{chunk.content}\", end=\"\", )\n            sleep(0.1)\n        console.print()\n        sleep(0.1)",
            "author_fullname": "t2_fbm7wtg1",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Support with Python Rich Write Library",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1ggknpe",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.6,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 3,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 3,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730397319.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m trying to print streamable output using Rich. It work flawlessly with out the console.status, however console.status is cause the previous line to be overwritten.&lt;/p&gt;\n\n&lt;p&gt;Eg:&lt;br/&gt;\nIterataion One Ouput,&lt;br/&gt;\nHello&lt;/p&gt;\n\n&lt;p&gt;Iteration Two Output,&lt;/p&gt;\n\n&lt;p&gt;There.&lt;/p&gt;\n\n&lt;p&gt;Expectation,&lt;br/&gt;\nIteration one output,&lt;br/&gt;\nHello  &lt;/p&gt;\n\n&lt;p&gt;Iteration Two Ouput,&lt;/p&gt;\n\n&lt;p&gt;Hello There. &lt;/p&gt;\n\n&lt;p&gt;Again this happens only if I introduce console.status, any suggestion. Sharing the following code.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with console.status(&amp;quot;&amp;quot;) as status:\n    for chunk in ai.query_llm(user_input):\n        console.print(f&amp;quot;{chunk.content}&amp;quot;, end=&amp;quot;&amp;quot;, )\n        sleep(0.1)\n    console.print()\n    sleep(0.1)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1ggknpe",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Mindless-Umpire-9395",
            "discussion_type": null,
            "num_comments": 1,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1ggknpe/support_with_python_rich_write_library/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1ggknpe/support_with_python_rich_write_library/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730397319.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# Where?\n\nYou can find it here:\n\n* Source - [nokusukun/scrunkly](https://github.com/nokusukun/scrunkly)\n* PyPI - [scrunkly · PyPI](https://pypi.org/project/scrunkly/)\n\n**What My Project Does**  \nScrunkly is a zero dependency script runner that fits my needs for a script runner.\n\n# Comparison\n\n**pyproject.toml**  \nI use this for stuff like needing to deploy and ssh so a pyproject.toml isn't as portable.\n\n**Why not use X?**  \nI can't add features to it that caters to my needs.\n\n# Target Audience\n\nWe've been using it in production for the startups that I worked with for quite some time.\n\n**Example**\n\n    # run.py\n    import scrunkly\n    from scrunkly import with_env, py\n    \n    dev_env = with_env({\n        \"DEBUG\": \"1\",\n        \"MONGO_DB_URI\": \"mongodb://localhost:27017\",\n        \"MESSAGING_URL\": \"mongodb://localhost:27017\",\n        \"MONGO_DB_NAME\": \"test\",\n        \"AWS_REGION\": \"ap-southeast-2\",\n        \"AWS_S3_BUCKET_NAME\": \"test-...\",\n        \"AWS_ACCESS_KEY_ID\": \"AKI...\",  # these only have access to test buckets\n        \"AWS_SECRET_ACCESS_KEY\": \"eyFi7...\",\n    })\n    \n    prod_env = with_env({\n        \"DEBUG\": \"0\",\n        \"MONGO_DB_NAME\": \"prod\",\n        \"AWS_REGION\": \"ap-southeast-2\",\n        \"AWS_S3_BUCKET_NAME\": \"prod-...\",\n    })\n    \n    scrunkly.scripts({\n        \"api:dev\": [dev_env, f\"\"\"{py} -m watchfiles --filter python \"uvicorn api.api:app --port 8001\" .\"\"\"],\n        \"api:prod\": [prod_env, f\"{py} -m uvicorn api.api:app --host  --port 8080\"],\n        \"reqs:generate\": f\"{py} -m  pipreqs.pipreqs . --force\",\n        \"worker\": f\"{py} ./run_worker.py\",\n        \"install:dev\": f\"{py} -m pip install -r dev-requirements.txt\",\n        \"install:app\": f\"{py} -m pip install -r requirements.txt\",\n        \"load-data\": f\"{py} ./scripts/part_data_import.py --force\",\n        \"install\": [\"install:dev\", \"install:app\", \"load-data\"],\n        \"api:compose:rebuild\": \"docker-compose up -d --no-deps --build api\",\n        \"worker:compose:rebuild\": \"docker-compose up -d --no-deps --build worker\",\n        \"up:prod\": \"docker-compose up -d --scale worker=10\",\n        \"up:prod:full\": \"docker-compose up -d --scale worker=10 --build\",\n    })\n\nThen you can run it with\n\n    scrunkly api:dev\n\nor if for some reason you don't have scripts installed\n\n    python3 run.py api:dev",
            "author_fullname": "t2_s7uv2g34",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Scrunkly - Stupidly simple script runner",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1ggi2el",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.92,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 20,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 20,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730390598.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Where?&lt;/h1&gt;\n\n&lt;p&gt;You can find it here:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Source - &lt;a href=\"https://github.com/nokusukun/scrunkly\"&gt;nokusukun/scrunkly&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;PyPI - &lt;a href=\"https://pypi.org/project/scrunkly/\"&gt;scrunkly · PyPI&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;br/&gt;\nScrunkly is a zero dependency script runner that fits my needs for a script runner.&lt;/p&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;&lt;strong&gt;pyproject.toml&lt;/strong&gt;&lt;br/&gt;\nI use this for stuff like needing to deploy and ssh so a pyproject.toml isn&amp;#39;t as portable.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Why not use X?&lt;/strong&gt;&lt;br/&gt;\nI can&amp;#39;t add features to it that caters to my needs.&lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;We&amp;#39;ve been using it in production for the startups that I worked with for quite some time.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# run.py\nimport scrunkly\nfrom scrunkly import with_env, py\n\ndev_env = with_env({\n    &amp;quot;DEBUG&amp;quot;: &amp;quot;1&amp;quot;,\n    &amp;quot;MONGO_DB_URI&amp;quot;: &amp;quot;mongodb://localhost:27017&amp;quot;,\n    &amp;quot;MESSAGING_URL&amp;quot;: &amp;quot;mongodb://localhost:27017&amp;quot;,\n    &amp;quot;MONGO_DB_NAME&amp;quot;: &amp;quot;test&amp;quot;,\n    &amp;quot;AWS_REGION&amp;quot;: &amp;quot;ap-southeast-2&amp;quot;,\n    &amp;quot;AWS_S3_BUCKET_NAME&amp;quot;: &amp;quot;test-...&amp;quot;,\n    &amp;quot;AWS_ACCESS_KEY_ID&amp;quot;: &amp;quot;AKI...&amp;quot;,  # these only have access to test buckets\n    &amp;quot;AWS_SECRET_ACCESS_KEY&amp;quot;: &amp;quot;eyFi7...&amp;quot;,\n})\n\nprod_env = with_env({\n    &amp;quot;DEBUG&amp;quot;: &amp;quot;0&amp;quot;,\n    &amp;quot;MONGO_DB_NAME&amp;quot;: &amp;quot;prod&amp;quot;,\n    &amp;quot;AWS_REGION&amp;quot;: &amp;quot;ap-southeast-2&amp;quot;,\n    &amp;quot;AWS_S3_BUCKET_NAME&amp;quot;: &amp;quot;prod-...&amp;quot;,\n})\n\nscrunkly.scripts({\n    &amp;quot;api:dev&amp;quot;: [dev_env, f&amp;quot;&amp;quot;&amp;quot;{py} -m watchfiles --filter python &amp;quot;uvicorn api.api:app --port 8001&amp;quot; .&amp;quot;&amp;quot;&amp;quot;],\n    &amp;quot;api:prod&amp;quot;: [prod_env, f&amp;quot;{py} -m uvicorn api.api:app --host  --port 8080&amp;quot;],\n    &amp;quot;reqs:generate&amp;quot;: f&amp;quot;{py} -m  pipreqs.pipreqs . --force&amp;quot;,\n    &amp;quot;worker&amp;quot;: f&amp;quot;{py} ./run_worker.py&amp;quot;,\n    &amp;quot;install:dev&amp;quot;: f&amp;quot;{py} -m pip install -r dev-requirements.txt&amp;quot;,\n    &amp;quot;install:app&amp;quot;: f&amp;quot;{py} -m pip install -r requirements.txt&amp;quot;,\n    &amp;quot;load-data&amp;quot;: f&amp;quot;{py} ./scripts/part_data_import.py --force&amp;quot;,\n    &amp;quot;install&amp;quot;: [&amp;quot;install:dev&amp;quot;, &amp;quot;install:app&amp;quot;, &amp;quot;load-data&amp;quot;],\n    &amp;quot;api:compose:rebuild&amp;quot;: &amp;quot;docker-compose up -d --no-deps --build api&amp;quot;,\n    &amp;quot;worker:compose:rebuild&amp;quot;: &amp;quot;docker-compose up -d --no-deps --build worker&amp;quot;,\n    &amp;quot;up:prod&amp;quot;: &amp;quot;docker-compose up -d --scale worker=10&amp;quot;,\n    &amp;quot;up:prod:full&amp;quot;: &amp;quot;docker-compose up -d --scale worker=10 --build&amp;quot;,\n})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then you can run it with&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;scrunkly api:dev\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or if for some reason you don&amp;#39;t have scripts installed&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;python3 run.py api:dev\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/muw35WHYR7QyaAkA1nmF0mzSrs3qa6PGdzUB_UOnnvc.jpg?auto=webp&amp;s=0e700d15dcba6decafc40e7a7828ff430087697a",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/muw35WHYR7QyaAkA1nmF0mzSrs3qa6PGdzUB_UOnnvc.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=1d8c70adbc6e74810d83c569a58194135aff99c6",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/muw35WHYR7QyaAkA1nmF0mzSrs3qa6PGdzUB_UOnnvc.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=bd98aab8b5cb69d44dad5147bc988eb2fff9026c",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/muw35WHYR7QyaAkA1nmF0mzSrs3qa6PGdzUB_UOnnvc.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=085d8a3e8e34194c4b291a066529ca09ef84b793",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/muw35WHYR7QyaAkA1nmF0mzSrs3qa6PGdzUB_UOnnvc.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=4663ecb4c7b2bd9a52b8461973cfe203d767e9f0",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/muw35WHYR7QyaAkA1nmF0mzSrs3qa6PGdzUB_UOnnvc.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=71f6539890884063b73684f0f8945449c2c764d9",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/muw35WHYR7QyaAkA1nmF0mzSrs3qa6PGdzUB_UOnnvc.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=f0eda72099ef0c1e0d9089fa9d57dfc94379b450",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "7ByawunTepjHEhH1JnCqazm7n5p9D1D4M3sMcW9bnlg"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1ggi2el",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Ejaculeat",
            "discussion_type": null,
            "num_comments": 8,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1ggi2el/scrunkly_stupidly_simple_script_runner/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1ggi2el/scrunkly_stupidly_simple_script_runner/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730390598.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "You've probably heard of Cadwyn before, and I know it's been mentioned here previously but this video has the creator, Stanislav Zmiev, giving a full overview and demo of how to implement it for advanced API versioning (like DB migrations!) in Python/FastAPI projects:\n\nVideo: [https://youtu.be/9-WPvMsTjj8](https://youtu.be/9-WPvMsTjj8)  \nCadwyn: [https://github.com/zmievsa/cadwyn](https://github.com/zmievsa/cadwyn)",
            "author_fullname": "t2_12f4b1",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Tutorial: Versioning for APIs with Cadwyn using Python &amp; FastAPI",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Tutorial"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "tutorial",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gghbg7",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.8,
            "author_flair_background_color": "transparent",
            "subreddit_type": "public",
            "ups": 9,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": "23190a36-537c-11ee-bf5a-a2ab421cd045",
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Tutorial",
            "can_mod_post": false,
            "score": 9,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [
                {
                    "e": "text",
                    "t": "Pythoneer"
                }
            ],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730388674.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "richtext",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;You&amp;#39;ve probably heard of Cadwyn before, and I know it&amp;#39;s been mentioned here previously but this video has the creator, Stanislav Zmiev, giving a full overview and demo of how to implement it for advanced API versioning (like DB migrations!) in Python/FastAPI projects:&lt;/p&gt;\n\n&lt;p&gt;Video: &lt;a href=\"https://youtu.be/9-WPvMsTjj8\"&gt;https://youtu.be/9-WPvMsTjj8&lt;/a&gt;&lt;br/&gt;\nCadwyn: &lt;a href=\"https://github.com/zmievsa/cadwyn\"&gt;https://github.com/zmievsa/cadwyn&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/EZ861vKrpjJodZ_1b06-JbiIjihw6YjpHALwnYl2qyA.jpg?auto=webp&amp;s=c5467205fad3f884fedb40d562fdd87608e6ff23",
                            "width": 480,
                            "height": 360
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/EZ861vKrpjJodZ_1b06-JbiIjihw6YjpHALwnYl2qyA.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=0a08b4e48f70ebdb15437c23910db75c7c82a046",
                                "width": 108,
                                "height": 81
                            },
                            {
                                "url": "https://external-preview.redd.it/EZ861vKrpjJodZ_1b06-JbiIjihw6YjpHALwnYl2qyA.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=e795cb11151ea479372b4fa07b3bb213c63788b3",
                                "width": 216,
                                "height": 162
                            },
                            {
                                "url": "https://external-preview.redd.it/EZ861vKrpjJodZ_1b06-JbiIjihw6YjpHALwnYl2qyA.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=eebb5fc8e46edfe072933f23ecc39f4da2498ac8",
                                "width": 320,
                                "height": 240
                            }
                        ],
                        "variants": {},
                        "id": "xmCdCCpEYdgY5rUqe6-DUN04RKhi8oxLGXxHX0_0PaI"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": "Pythoneer",
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#dadada",
            "id": "1gghbg7",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "itsemdee",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": "dark",
            "permalink": "/r/Python/comments/1gghbg7/tutorial_versioning_for_apis_with_cadwyn_using/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gghbg7/tutorial_versioning_for_apis_with_cadwyn_using/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730388674.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hello party people,\n\na while ago I started a project called confluent to generate code for different programming languages based on a language neutral YAML configuration to make updating constants-files for different languages easier. As time moved on, I found some flaws in how I implemented this project (especially the name bugged me). So today I'm proud, to finally release it under its new name: [ninja-bear](https://pypi.org/project/ninja-bear) 🥷🐻\n\nIt uses the same configuration principles but adds more flexibility for developers to add their own stuff by offering a plugin-system.\n\nLets say you only want to generate files for C and TypeScript, no problem. Install ninja-bear, ninja-bear-language-c and ninja-bear-language-typescript and you're ready to go.\n\nHere's a short demo on how to use it: [https://youtu.be/bya\\_exGrS68](https://youtu.be/bya_exGrS68)\n\nLet me know what you think :)",
            "author_fullname": "t2_qendtux7",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Generate programming language files from YAML",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "News"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "news",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1ggepxe",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.73,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 13,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "News",
            "can_mod_post": false,
            "score": 13,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730381856.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello party people,&lt;/p&gt;\n\n&lt;p&gt;a while ago I started a project called confluent to generate code for different programming languages based on a language neutral YAML configuration to make updating constants-files for different languages easier. As time moved on, I found some flaws in how I implemented this project (especially the name bugged me). So today I&amp;#39;m proud, to finally release it under its new name: &lt;a href=\"https://pypi.org/project/ninja-bear\"&gt;ninja-bear&lt;/a&gt; 🥷🐻&lt;/p&gt;\n\n&lt;p&gt;It uses the same configuration principles but adds more flexibility for developers to add their own stuff by offering a plugin-system.&lt;/p&gt;\n\n&lt;p&gt;Lets say you only want to generate files for C and TypeScript, no problem. Install ninja-bear, ninja-bear-language-c and ninja-bear-language-typescript and you&amp;#39;re ready to go.&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s a short demo on how to use it: &lt;a href=\"https://youtu.be/bya_exGrS68\"&gt;https://youtu.be/bya_exGrS68&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Let me know what you think :)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/MoP6enMQ2Q6o4o23d5xCmvlBtpeCXWiqxc63UVCX5Rk.jpg?auto=webp&amp;s=85f19a22cbd85fa784cdb417359d8ff7cda9e394",
                            "width": 300,
                            "height": 300
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/MoP6enMQ2Q6o4o23d5xCmvlBtpeCXWiqxc63UVCX5Rk.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=46fa55dd1b1e587ab93bcbbdc6cb2de37b810bf3",
                                "width": 108,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/MoP6enMQ2Q6o4o23d5xCmvlBtpeCXWiqxc63UVCX5Rk.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=cfd7f76ac4c13cdc287edd9856ef0430dbc862a5",
                                "width": 216,
                                "height": 216
                            }
                        ],
                        "variants": {},
                        "id": "IUHM4ctLZQorzkPuYJ4IkGSag8BtaIqZoyqL1L53KuM"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#7193ff",
            "id": "1ggepxe",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "MeLlamoWhoan",
            "discussion_type": null,
            "num_comments": 8,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1ggepxe/generate_programming_language_files_from_yaml/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1ggepxe/generate_programming_language_files_from_yaml/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730381856.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hi I'm trying to remove metadata from a file in python with PyExifTool. I'm doing an execute() with needed parameters to remove metadata like the original tool \"exiftool\". \n\nIn windows, for example, to remove metadata:\n\nexiftool -all= -overwrite-original /path/to/file\n\n  \nSo I'm doing this function on python:\n\n    def remove_metadata_file(filepath):\n        try:\n            \n            with exiftool.ExifTool() as et:\n                result = et.execute(\"-all=\", \"-overwrite_original\", filepath)\n                \n                if \"0 image files updated\" in result:\n                    return f\"Couldn't have removed metadata from file: {os.path.basename(filepath)}\"\n                else:\n                    return f\"File: {os.path.basename(filepath)} metadata has been removed correctly\"\n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"Error on removing metadata from a file: {e}\")\n    \n    And I've done a lot of testings printing results and filepath, and is always:\n    \n    0 image files updated\n      1 image files unchanged\n    \n    I tried to delete '=' on \"-all=\" but this command just prints all the metadata from file. ",
            "author_fullname": "t2_gn4x7mty9",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "PyExifTool problems",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1ggcq7g",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.73,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 5,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 5,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730375900.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi I&amp;#39;m trying to remove metadata from a file in python with PyExifTool. I&amp;#39;m doing an execute() with needed parameters to remove metadata like the original tool &amp;quot;exiftool&amp;quot;. &lt;/p&gt;\n\n&lt;p&gt;In windows, for example, to remove metadata:&lt;/p&gt;\n\n&lt;p&gt;exiftool -all= -overwrite-original /path/to/file&lt;/p&gt;\n\n&lt;p&gt;So I&amp;#39;m doing this function on python:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def remove_metadata_file(filepath):\n    try:\n        \n        with exiftool.ExifTool() as et:\n            result = et.execute(&amp;quot;-all=&amp;quot;, &amp;quot;-overwrite_original&amp;quot;, filepath)\n            \n            if &amp;quot;0 image files updated&amp;quot; in result:\n                return f&amp;quot;Couldn&amp;#39;t have removed metadata from file: {os.path.basename(filepath)}&amp;quot;\n            else:\n                return f&amp;quot;File: {os.path.basename(filepath)} metadata has been removed correctly&amp;quot;\n    except Exception as e:\n        messagebox.showerror(&amp;quot;Error&amp;quot;, f&amp;quot;Error on removing metadata from a file: {e}&amp;quot;)\n\nAnd I&amp;#39;ve done a lot of testings printing results and filepath, and is always:\n\n0 image files updated\n  1 image files unchanged\n\nI tried to delete &amp;#39;=&amp;#39; on &amp;quot;-all=&amp;quot; but this command just prints all the metadata from file. \n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1ggcq7g",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Putrid-Rub6187",
            "discussion_type": null,
            "num_comments": 8,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1ggcq7g/pyexiftool_problems/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1ggcq7g/pyexiftool_problems/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730375900.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I had an interesting experience with trying to run a million empty tests. It showed me some things about how Python works that were not obvious to me before.\n\nhttps://kodare.net/2024/10/31/a-million-tests.html\n\n",
            "author_fullname": "t2_77w4q",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Running a million empty tests",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Resource"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "resource",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gg8gdc",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.33,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Resource",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730357418.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I had an interesting experience with trying to run a million empty tests. It showed me some things about how Python works that were not obvious to me before.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://kodare.net/2024/10/31/a-million-tests.html\"&gt;https://kodare.net/2024/10/31/a-million-tests.html&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ddbd37",
            "id": "1gg8gdc",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "kankyo",
            "discussion_type": null,
            "num_comments": 2,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gg8gdc/running_a_million_empty_tests/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gg8gdc/running_a_million_empty_tests/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730357418.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hey everyone,\n\nI'm a backend/data engineer with 10 years of experience, and I'm hitting a roadblock with the UI for a multi-tenant web app I’m building. My client isn’t satisfied with the current Streamlit-based UI, even after adding custom React components.\n\nThe backend is solid—I’ve set up all the necessary queries and table schemas, and I know exactly how the visuals should look. The app is designed to allow admins to manage CRUD operations for users and metrics, with the ability to view all users' data, while individual users can only see their own information. For authentication, I'm using AWS and Cognito to handle login and user management.\n\nI recently came across Django/react templates, which seem like a great fit for my needs, but I’m finding component libraries a bit overwhelming. I also checked out [Reflex.dev](http://Reflex.dev), though it feels somewhat clunky.\n\nAt this point, I'm open to simplifying the stack, even if that means dropping multi-tenancy. I’d really appreciate any recommendations on an easy way to layer a UI over my database and queries, particularly one that works well with AWS and Cognito.\n\n  \nThanks in advance. ",
            "author_fullname": "t2_l1znu",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Seeking Advice on Best Stack for UI in a Multi-Tenant Web App",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gg6mjm",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.81,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 19,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 19,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1730352466.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730349649.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey everyone,&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m a backend/data engineer with 10 years of experience, and I&amp;#39;m hitting a roadblock with the UI for a multi-tenant web app I’m building. My client isn’t satisfied with the current Streamlit-based UI, even after adding custom React components.&lt;/p&gt;\n\n&lt;p&gt;The backend is solid—I’ve set up all the necessary queries and table schemas, and I know exactly how the visuals should look. The app is designed to allow admins to manage CRUD operations for users and metrics, with the ability to view all users&amp;#39; data, while individual users can only see their own information. For authentication, I&amp;#39;m using AWS and Cognito to handle login and user management.&lt;/p&gt;\n\n&lt;p&gt;I recently came across Django/react templates, which seem like a great fit for my needs, but I’m finding component libraries a bit overwhelming. I also checked out &lt;a href=\"http://Reflex.dev\"&gt;Reflex.dev&lt;/a&gt;, though it feels somewhat clunky.&lt;/p&gt;\n\n&lt;p&gt;At this point, I&amp;#39;m open to simplifying the stack, even if that means dropping multi-tenancy. I’d really appreciate any recommendations on an easy way to layer a UI over my database and queries, particularly one that works well with AWS and Cognito.&lt;/p&gt;\n\n&lt;p&gt;Thanks in advance. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gg6mjm",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "boston101",
            "discussion_type": null,
            "num_comments": 35,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gg6mjm/seeking_advice_on_best_stack_for_ui_in_a/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gg6mjm/seeking_advice_on_best_stack_for_ui_in_a/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730349649.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I've just released version 0.3.1 of IcedPyGui.  Rust bindings using pyo3 and built with maturin.\n\nIPG has many widgets now and more will be added each month.  If you have ever used dearpygui, you'll find the syntax similar.\n\nThere are a ton of examples at [https://github.com/icedpygui/IcedPyGui-Python-Examples](https://github.com/icedpygui/IcedPyGui-Python-Examples)\n\nThese examples will easily get you started.\n\nThe rust repository is [https://github.com/icedpygui/IcedPyGui](https://github.com/icedpygui/IcedPyGui)\n\nThe Iced respository is [https://github.com/iced-rs/iced](https://github.com/iced-rs/iced)",
            "author_fullname": "t2_3fy852si",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "How about a GUI based on Rust's Iced for your Python projects",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "News"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "news",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gg2har",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.89,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 54,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "News",
            "can_mod_post": false,
            "score": 54,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730336284.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve just released version 0.3.1 of IcedPyGui.  Rust bindings using pyo3 and built with maturin.&lt;/p&gt;\n\n&lt;p&gt;IPG has many widgets now and more will be added each month.  If you have ever used dearpygui, you&amp;#39;ll find the syntax similar.&lt;/p&gt;\n\n&lt;p&gt;There are a ton of examples at &lt;a href=\"https://github.com/icedpygui/IcedPyGui-Python-Examples\"&gt;https://github.com/icedpygui/IcedPyGui-Python-Examples&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;These examples will easily get you started.&lt;/p&gt;\n\n&lt;p&gt;The rust repository is &lt;a href=\"https://github.com/icedpygui/IcedPyGui\"&gt;https://github.com/icedpygui/IcedPyGui&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The Iced respository is &lt;a href=\"https://github.com/iced-rs/iced\"&gt;https://github.com/iced-rs/iced&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/jky2BAJw0Q7fWXPI6f3GACuXJH8LSvmEyouyqWte85w.jpg?auto=webp&amp;s=5a84c06a25dbc411af16b24d854c80bd5f07d458",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/jky2BAJw0Q7fWXPI6f3GACuXJH8LSvmEyouyqWte85w.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=9bd495490bddd2d20d3dab22c49bd280793d66a7",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/jky2BAJw0Q7fWXPI6f3GACuXJH8LSvmEyouyqWte85w.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=1fe1da61d692a56a18e5e9a4ec69860e78d27810",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/jky2BAJw0Q7fWXPI6f3GACuXJH8LSvmEyouyqWte85w.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=3efad7af2f2811e6e77b4a2d588a26f353ee0926",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/jky2BAJw0Q7fWXPI6f3GACuXJH8LSvmEyouyqWte85w.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=3f99cfb63c33e0187409e1768debae2f033bd0fa",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/jky2BAJw0Q7fWXPI6f3GACuXJH8LSvmEyouyqWte85w.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=e1edd0bfeb093a0161e7698451543bd8a6f5ea10",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/jky2BAJw0Q7fWXPI6f3GACuXJH8LSvmEyouyqWte85w.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=2a6b4bb028e4cd4cdabb9093a3f530b36a62a296",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "DWpxMG_xXYxTecfuQ-s79JqaLsaVOoVu8bt29NYBg18"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#7193ff",
            "id": "1gg2har",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "cray5252",
            "discussion_type": null,
            "num_comments": 11,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gg2har/how_about_a_gui_based_on_rusts_iced_for_your/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gg2har/how_about_a_gui_based_on_rusts_iced_for_your/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730336284.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hello, I have recently published a new book that focuses on structural pattern matching in Python. You can find it at [https://a.co/d/95C84J6](https://a.co/d/95C84J6). If you find this book interesting and would like me to arrange a free copy, please send me a direct message. ",
            "author_fullname": "t2_1783ej1avh",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Structural Pattern Matching in Python",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "News"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "news",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gg27dt",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.43,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "News",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730335470.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello, I have recently published a new book that focuses on structural pattern matching in Python. You can find it at &lt;a href=\"https://a.co/d/95C84J6\"&gt;https://a.co/d/95C84J6&lt;/a&gt;. If you find this book interesting and would like me to arrange a free copy, please send me a direct message. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#7193ff",
            "id": "1gg27dt",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "life_michael_",
            "discussion_type": null,
            "num_comments": 7,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gg27dt/structural_pattern_matching_in_python/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gg27dt/structural_pattern_matching_in_python/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730335470.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# Weekly Thread: Professional Use, Jobs, and Education 🏢\n\nWelcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.\n\n---\n\n## How it Works:\n\n1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.\n2. **Education Q&amp;A**: Ask or answer questions about Python courses, certifications, and educational resources.\n3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.\n\n---\n\n## Guidelines:\n\n- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.\n- Keep discussions relevant to Python in the professional and educational context.\n  \n---\n\n## Example Topics:\n\n1. **Career Paths**: What kinds of roles are out there for Python developers?\n2. **Certifications**: Are Python certifications worth it?\n3. **Course Recommendations**: Any good advanced Python courses to recommend?\n4. **Workplace Tools**: What Python libraries are indispensable in your professional work?\n5. **Interview Tips**: What types of Python questions are commonly asked in interviews?\n\n---\n\nLet's help each other grow in our careers and education. Happy discussing! 🌟",
            "author_fullname": "t2_6l4z3",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!",
            "link_flair_richtext": [
                {
                    "a": ":pythonLogo:",
                    "e": "emoji",
                    "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                },
                {
                    "e": "text",
                    "t": " Daily Thread"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "daily-thread",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gg1913",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.81,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 3,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": ":pythonLogo: Daily Thread",
            "can_mod_post": false,
            "score": 3,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": true,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730332808.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: Professional Use, Jobs, and Education 🏢&lt;/h1&gt;\n\n&lt;p&gt;Welcome to this week&amp;#39;s discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is &lt;strong&gt;not for recruitment&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Career Talk&lt;/strong&gt;: Discuss using Python in your job, or the job market for Python roles.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Education Q&amp;amp;A&lt;/strong&gt;: Ask or answer questions about Python courses, certifications, and educational resources.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Workplace Chat&lt;/strong&gt;: Share your experiences, challenges, or success stories about using Python professionally.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;hr/&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This thread is &lt;strong&gt;not for recruitment&lt;/strong&gt;. For job postings, please see &lt;a href=\"/r/PythonJobs\"&gt;r/PythonJobs&lt;/a&gt; or the recruitment thread in the sidebar.&lt;/li&gt;\n&lt;li&gt;Keep discussions relevant to Python in the professional and educational context.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr/&gt;\n\n&lt;h2&gt;Example Topics:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Career Paths&lt;/strong&gt;: What kinds of roles are out there for Python developers?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Certifications&lt;/strong&gt;: Are Python certifications worth it?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Course Recommendations&lt;/strong&gt;: Any good advanced Python courses to recommend?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Workplace Tools&lt;/strong&gt;: What Python libraries are indispensable in your professional work?&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Interview Tips&lt;/strong&gt;: What types of Python questions are commonly asked in interviews?&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;Let&amp;#39;s help each other grow in our careers and education. Happy discussing! 🌟&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": "moderator",
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#00a6a5",
            "id": "1gg1913",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "AutoModerator",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": false,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gg1913/thursday_daily_thread_python_careers_courses_and/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gg1913/thursday_daily_thread_python_careers_courses_and/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730332808.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "[Link](https://github.com/voun7/Video_Sub_Extractor)\n\n**What My Project Does**\n\nThis program make it easy to extract hard-coded subtitles from a video. This program uses OpenCV to extract the images from the video, then an OCR to extract the text from the images. The extracted texts are then processed and used to generate a subtitle file.\n\n**Target Audience**\n\nI'm a huge fan of Chinese anime and I watch a lot that usually comes with just hard-coded Chinese subtitles. This program will be useful for anyone with similar interest. Several languages are supported.\n\n**Comparison**\n\nBefore writing this program  I would use a mix of different software programs to extract the images from the video, then extract the text from the images and finally generate a subtitle file which I later translate to English using [this](https://github.com/voun7/Subtitle_Translator).\n\nThis usually took a lot of time, this program combines all this steps into one and is very fast.  \nI came across a similar program some years back, but it was mostly in Chinese, I didn't like the GUI and source code was difficult for me at that time to completely understand. The processing of the extracted text in this program was something that I came up with and I consider kind of ingenious. It's also a lot lighter.\n\nAny feedback will be greatly appreciated.",
            "author_fullname": "t2_15c728",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Video Sub Extractor - A program for extracting hard-coded subtitles from a video.",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gfyew8",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.78,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 7,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 7,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1730437115.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730325215.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/voun7/Video_Sub_Extractor\"&gt;Link&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This program make it easy to extract hard-coded subtitles from a video. This program uses OpenCV to extract the images from the video, then an OCR to extract the text from the images. The extracted texts are then processed and used to generate a subtitle file.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m a huge fan of Chinese anime and I watch a lot that usually comes with just hard-coded Chinese subtitles. This program will be useful for anyone with similar interest. Several languages are supported.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Before writing this program  I would use a mix of different software programs to extract the images from the video, then extract the text from the images and finally generate a subtitle file which I later translate to English using &lt;a href=\"https://github.com/voun7/Subtitle_Translator\"&gt;this&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;This usually took a lot of time, this program combines all this steps into one and is very fast.&lt;br/&gt;\nI came across a similar program some years back, but it was mostly in Chinese, I didn&amp;#39;t like the GUI and source code was difficult for me at that time to completely understand. The processing of the extracted text in this program was something that I came up with and I consider kind of ingenious. It&amp;#39;s also a lot lighter.&lt;/p&gt;\n\n&lt;p&gt;Any feedback will be greatly appreciated.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/8ds_PiF8omVdvPHHTHTtArAYW2U38iwn8Whn7tEnLG8.jpg?auto=webp&amp;s=824f791979b567dba300edd4cf1f30fdc1fe7f0e",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/8ds_PiF8omVdvPHHTHTtArAYW2U38iwn8Whn7tEnLG8.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=b39040f65078b03ba88e7b01fa698c0b5be44bdc",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/8ds_PiF8omVdvPHHTHTtArAYW2U38iwn8Whn7tEnLG8.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=f04b7d683de65602b149059d41ca859febecbd1d",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/8ds_PiF8omVdvPHHTHTtArAYW2U38iwn8Whn7tEnLG8.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=11bfcedc0457011b2b687e12d873663deb751f7c",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/8ds_PiF8omVdvPHHTHTtArAYW2U38iwn8Whn7tEnLG8.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=6588f67000c4e6ecefe1f75dfddb60704af7615a",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/8ds_PiF8omVdvPHHTHTtArAYW2U38iwn8Whn7tEnLG8.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=1d393b766d21e1738b4985d7eaae2b75c1461dc6",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/8ds_PiF8omVdvPHHTHTtArAYW2U38iwn8Whn7tEnLG8.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=33783b26a6c7662b61cd91832e34f65524e4130e",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "jBRiniH_IfOy4zEOOzaQkD---G9IGKwL4Ie6Ybr13Nc"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gfyew8",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "1victorn",
            "discussion_type": null,
            "num_comments": 8,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gfyew8/video_sub_extractor_a_program_for_extracting/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gfyew8/video_sub_extractor_a_program_for_extracting/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730325215.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Imagine if variables declared in the module's scope could access their own name, and on top of that, the parent module as well. Do you think it would be a neat concept?",
            "author_fullname": "t2_e08fbau5",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "What do you think about module-level descriptors?",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gfuj60",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.38,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730315253.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Imagine if variables declared in the module&amp;#39;s scope could access their own name, and on top of that, the parent module as well. Do you think it would be a neat concept?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gfuj60",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "RiP_Nd_tear",
            "discussion_type": null,
            "num_comments": 18,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gfuj60/what_do_you_think_about_modulelevel_descriptors/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gfuj60/what_do_you_think_about_modulelevel_descriptors/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730315253.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hey, r/python!\n\nI'd like to show you what I've been working on for the past month: [an online Streamlit editor.](https://editor.ploomber.io) It allows you to develop and preview Streamlit apps in the browser using WebAssembly (this makes it cheap to host since the heavy computations happen in the client!)\n\n**What my project does:** allows you to develop and preview Streamlit apps in the browser\n\n**Target audience:** Streamlit users\n\n**Comparison:** Runs entirely on the browser, no need to install Streamlit on your local machine, and you can easily share your apps with someone else.\n\nIt contains a bunch of features to make development faster:\n\n1. Prompting a model to generate the initial code\n2. Select code and prompt a model to edit it (similar to Cursor)\n3. In-app chat to ask Streamlit and Python questions\n\nHere are a few things I'd like to add:\n\n1. Better integration between the chat and the editor (similar to the Apply feature in Cursor)\n2. Debugger: combining the source code and information about existing variables to suggest fixes when the app breaks\n\nIf you're curious about the stack:\n\n1. Built on [Remix](https://github.com/remix-run/remix) (for server side-rendering)\n2. A [FastAPI](https://github.com/fastapi) to handle AI requests and database operations (I could do this with JS, but I have a lot more experience with Python)\n3. A Postgres database\n4. NGINX as a reverse proxy\n\nCheck it out here: [https://editor.ploomber.io](https://editor.ploomber.io)\n\nSample app: [https://editor.ploomber.io/editor/nyc-map-with-selection-46e1](https://editor.ploomber.io/editor/nyc-map-with-selection-46e1)\n\n*Note:* the app is rate-limited to prevent a huge OpenAI bill\n\nI'd love to hear your feedback!",
            "author_fullname": "t2_5r54hksr",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "A new Streamlit online editor (powered by WebAssembly) ",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gftest",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.82,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 26,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 26,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730312470.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey, &lt;a href=\"/r/python\"&gt;r/python&lt;/a&gt;!&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;d like to show you what I&amp;#39;ve been working on for the past month: &lt;a href=\"https://editor.ploomber.io\"&gt;an online Streamlit editor.&lt;/a&gt; It allows you to develop and preview Streamlit apps in the browser using WebAssembly (this makes it cheap to host since the heavy computations happen in the client!)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What my project does:&lt;/strong&gt; allows you to develop and preview Streamlit apps in the browser&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target audience:&lt;/strong&gt; Streamlit users&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison:&lt;/strong&gt; Runs entirely on the browser, no need to install Streamlit on your local machine, and you can easily share your apps with someone else.&lt;/p&gt;\n\n&lt;p&gt;It contains a bunch of features to make development faster:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Prompting a model to generate the initial code&lt;/li&gt;\n&lt;li&gt;Select code and prompt a model to edit it (similar to Cursor)&lt;/li&gt;\n&lt;li&gt;In-app chat to ask Streamlit and Python questions&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Here are a few things I&amp;#39;d like to add:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Better integration between the chat and the editor (similar to the Apply feature in Cursor)&lt;/li&gt;\n&lt;li&gt;Debugger: combining the source code and information about existing variables to suggest fixes when the app breaks&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;If you&amp;#39;re curious about the stack:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Built on &lt;a href=\"https://github.com/remix-run/remix\"&gt;Remix&lt;/a&gt; (for server side-rendering)&lt;/li&gt;\n&lt;li&gt;A &lt;a href=\"https://github.com/fastapi\"&gt;FastAPI&lt;/a&gt; to handle AI requests and database operations (I could do this with JS, but I have a lot more experience with Python)&lt;/li&gt;\n&lt;li&gt;A Postgres database&lt;/li&gt;\n&lt;li&gt;NGINX as a reverse proxy&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Check it out here: &lt;a href=\"https://editor.ploomber.io\"&gt;https://editor.ploomber.io&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Sample app: &lt;a href=\"https://editor.ploomber.io/editor/nyc-map-with-selection-46e1\"&gt;https://editor.ploomber.io/editor/nyc-map-with-selection-46e1&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; the app is rate-limited to prevent a huge OpenAI bill&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;d love to hear your feedback!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/7mC2zfO79FDNuevYpk4tUw1GuOrLrVHeuMcSQwk-ccA.jpg?auto=webp&amp;s=b5bfa25435185bebdd8926760a4292b8c4dbd219",
                            "width": 1200,
                            "height": 630
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/7mC2zfO79FDNuevYpk4tUw1GuOrLrVHeuMcSQwk-ccA.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=19fe78b0aad8354f088055cf91941416f540ee1c",
                                "width": 108,
                                "height": 56
                            },
                            {
                                "url": "https://external-preview.redd.it/7mC2zfO79FDNuevYpk4tUw1GuOrLrVHeuMcSQwk-ccA.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=53f7fab30033424f8bc7a0c225e6d4f01a077a1e",
                                "width": 216,
                                "height": 113
                            },
                            {
                                "url": "https://external-preview.redd.it/7mC2zfO79FDNuevYpk4tUw1GuOrLrVHeuMcSQwk-ccA.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=3bb33cb32584c62b093da1682c82b5002d43cb95",
                                "width": 320,
                                "height": 168
                            },
                            {
                                "url": "https://external-preview.redd.it/7mC2zfO79FDNuevYpk4tUw1GuOrLrVHeuMcSQwk-ccA.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=340b8872eed0ae35424cd5cfa2eabe8f01445052",
                                "width": 640,
                                "height": 336
                            },
                            {
                                "url": "https://external-preview.redd.it/7mC2zfO79FDNuevYpk4tUw1GuOrLrVHeuMcSQwk-ccA.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=5a8a4e6d2e8e636e8652f333d0aef55e23ecab10",
                                "width": 960,
                                "height": 504
                            },
                            {
                                "url": "https://external-preview.redd.it/7mC2zfO79FDNuevYpk4tUw1GuOrLrVHeuMcSQwk-ccA.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=c48976e6cfbd0b48effbce130072517228bfdcf3",
                                "width": 1080,
                                "height": 567
                            }
                        ],
                        "variants": {},
                        "id": "tN_YprV9blIsvUQVROhm68s_yLY0AnzCVn9lTkGlEEM"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gftest",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "ploomber-io",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gftest/a_new_streamlit_online_editor_powered_by/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gftest/a_new_streamlit_online_editor_powered_by/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730312470.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Hi again! As a part of Tech Talks Weekly newsletter, I've put together a huge compilation of PyCon tutorials.\n\nPyCon introduced a longer talk format (usually &gt;2h) since 2020 that allows for deep dives into specific topics. They call it “Tutorials”. I have to admit—I love this format and the quality of the talks, so I put together a compilation of all of those published so far. I grouped them by year and ordered by view count for your convenience.\n\n**Here's the top 10:**\n\n1. [**\"Tutorials - Matt Harrison: Getting Started with Polars\"**](https://substack.com/redirect/6d2b9a90-b918-43d6-aa54-744fb8d83d3c?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ⸱ **+15k views** ⸱ 02 Jun 2023 ⸱ 02h 14m 28s\n2. [**\"Tutorials - Felipe, Amanda:Building Your First API with Django and Django Rest Framework\"**](https://substack.com/redirect/663c701f-a28e-451b-8685-58fc5c40595d?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ⸱ **+900 views** ⸱ 28 Jun 2024 ⸱ 02h 54m 17s\n3. [**\"Tutorial: Keith Galli - Natural Language Processing (NLP) in Python - From Zero to Hero\"**](https://substack.com/redirect/b5d6cac6-0295-472e-8974-9399c5abb7a1?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ⸱ **+43k views** ⸱ 29 Apr 2020 ⸱ 01h 39m 23s\n4. [**\"Tutorials - Trey Hunner: Intro to Python for Brand New Programmers\"**](https://substack.com/redirect/960f0827-97b8-4f29-90b8-378256070c26?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ⸱ **+4k views** ⸱ 02 Jun 2023 ⸱ 02h 16m 41s\n5. [**\"Tutorials - Mike Müller: The How and Why of Object-oriented Programming in Python\"**](https://substack.com/redirect/9d235d82-1b4e-4f96-902e-99a646322db5?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ⸱ **+3k views** ⸱ 02 Jun 2023 ⸱ 02h 45m 34s\n6. [**\"Tutorial: Santiago Basulto - Python Concurrency: from beginner to pro\"**](https://substack.com/redirect/c29b02f9-ff4d-48fa-af1d-7a18bc67acf7?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ⸱ **+32k views** ⸱ 06 May 2020 ⸱ 02h 57m 13s\n7. [**\"Tutorial: Kimberly Fessel - It's Officially Legal so Let's Scrape the Web\"**](https://substack.com/redirect/2da664ec-90b6-4808-a778-8c59ac919f75?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ⸱ **+12k views** ⸱ 29 Apr 2020 ⸱ 02h 46m 26s\n8. [**\"Tutorials - Sebastian Raschka: The Fundamentals of Modern Deep Learning with PyTorch\"**](https://substack.com/redirect/5f2a25a0-76a5-42b6-8289-9b4a67da6fae?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ⸱ **+2k views** ⸱ 28 Jun 2024 ⸱ 02h 59m 32s\n9. [**\"Tutorials - Jose Haro Peralta: Fundamentals of API security with Python\"**](https://substack.com/redirect/a26af2e9-962e-4d20-8cee-555ba25795f5?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ⸱ **+900 views** ⸱ 28 Jun 2024 ⸱ 02h 33m 43s\n10. [**\"Tutorials - Reuven M. Lerner: Comprehending comprehensions\"**](https://substack.com/redirect/df779af7-84f9-41b5-8b6d-8477e2024c3d?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw) ⸱ **+6k views** ⸱ 02 Jun 2023 ⸱ 02h 17m 33s\n\nYou can find the full compilation here: [https://www.techtalksweekly.io/p/ttw-extra-8-pycon-deep-dives-aka](https://www.techtalksweekly.io/p/ttw-extra-8-pycon-deep-dives-aka)\n\nLet me know what you think!",
            "author_fullname": "t2_rwx06of2p",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "A huge list of all PyCon deep dives (a.k.a. \"Tutorials\") grouped by year and ordered by view count",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Resource"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "resource",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gftc68",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.76,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 2,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Resource",
            "can_mod_post": false,
            "score": 2,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730312289.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi again! As a part of Tech Talks Weekly newsletter, I&amp;#39;ve put together a huge compilation of PyCon tutorials.&lt;/p&gt;\n\n&lt;p&gt;PyCon introduced a longer talk format (usually &amp;gt;2h) since 2020 that allows for deep dives into specific topics. They call it “Tutorials”. I have to admit—I love this format and the quality of the talks, so I put together a compilation of all of those published so far. I grouped them by year and ordered by view count for your convenience.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Here&amp;#39;s the top 10:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=\"https://substack.com/redirect/6d2b9a90-b918-43d6-aa54-744fb8d83d3c?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw\"&gt;&lt;strong&gt;&amp;quot;Tutorials - Matt Harrison: Getting Started with Polars&amp;quot;&lt;/strong&gt;&lt;/a&gt; ⸱ &lt;strong&gt;+15k views&lt;/strong&gt; ⸱ 02 Jun 2023 ⸱ 02h 14m 28s&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://substack.com/redirect/663c701f-a28e-451b-8685-58fc5c40595d?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw\"&gt;&lt;strong&gt;&amp;quot;Tutorials - Felipe, Amanda:Building Your First API with Django and Django Rest Framework&amp;quot;&lt;/strong&gt;&lt;/a&gt; ⸱ &lt;strong&gt;+900 views&lt;/strong&gt; ⸱ 28 Jun 2024 ⸱ 02h 54m 17s&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://substack.com/redirect/b5d6cac6-0295-472e-8974-9399c5abb7a1?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw\"&gt;&lt;strong&gt;&amp;quot;Tutorial: Keith Galli - Natural Language Processing (NLP) in Python - From Zero to Hero&amp;quot;&lt;/strong&gt;&lt;/a&gt; ⸱ &lt;strong&gt;+43k views&lt;/strong&gt; ⸱ 29 Apr 2020 ⸱ 01h 39m 23s&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://substack.com/redirect/960f0827-97b8-4f29-90b8-378256070c26?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw\"&gt;&lt;strong&gt;&amp;quot;Tutorials - Trey Hunner: Intro to Python for Brand New Programmers&amp;quot;&lt;/strong&gt;&lt;/a&gt; ⸱ &lt;strong&gt;+4k views&lt;/strong&gt; ⸱ 02 Jun 2023 ⸱ 02h 16m 41s&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://substack.com/redirect/9d235d82-1b4e-4f96-902e-99a646322db5?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw\"&gt;&lt;strong&gt;&amp;quot;Tutorials - Mike Müller: The How and Why of Object-oriented Programming in Python&amp;quot;&lt;/strong&gt;&lt;/a&gt; ⸱ &lt;strong&gt;+3k views&lt;/strong&gt; ⸱ 02 Jun 2023 ⸱ 02h 45m 34s&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://substack.com/redirect/c29b02f9-ff4d-48fa-af1d-7a18bc67acf7?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw\"&gt;&lt;strong&gt;&amp;quot;Tutorial: Santiago Basulto - Python Concurrency: from beginner to pro&amp;quot;&lt;/strong&gt;&lt;/a&gt; ⸱ &lt;strong&gt;+32k views&lt;/strong&gt; ⸱ 06 May 2020 ⸱ 02h 57m 13s&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://substack.com/redirect/2da664ec-90b6-4808-a778-8c59ac919f75?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw\"&gt;&lt;strong&gt;&amp;quot;Tutorial: Kimberly Fessel - It&amp;#39;s Officially Legal so Let&amp;#39;s Scrape the Web&amp;quot;&lt;/strong&gt;&lt;/a&gt; ⸱ &lt;strong&gt;+12k views&lt;/strong&gt; ⸱ 29 Apr 2020 ⸱ 02h 46m 26s&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://substack.com/redirect/5f2a25a0-76a5-42b6-8289-9b4a67da6fae?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw\"&gt;&lt;strong&gt;&amp;quot;Tutorials - Sebastian Raschka: The Fundamentals of Modern Deep Learning with PyTorch&amp;quot;&lt;/strong&gt;&lt;/a&gt; ⸱ &lt;strong&gt;+2k views&lt;/strong&gt; ⸱ 28 Jun 2024 ⸱ 02h 59m 32s&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://substack.com/redirect/a26af2e9-962e-4d20-8cee-555ba25795f5?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw\"&gt;&lt;strong&gt;&amp;quot;Tutorials - Jose Haro Peralta: Fundamentals of API security with Python&amp;quot;&lt;/strong&gt;&lt;/a&gt; ⸱ &lt;strong&gt;+900 views&lt;/strong&gt; ⸱ 28 Jun 2024 ⸱ 02h 33m 43s&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://substack.com/redirect/df779af7-84f9-41b5-8b6d-8477e2024c3d?j=eyJ1IjoiMzdqeXgyIn0.mNjyx6av7obPCW4TsyYvaybI1nnQ4rY0uDfFY8tZhcw\"&gt;&lt;strong&gt;&amp;quot;Tutorials - Reuven M. Lerner: Comprehending comprehensions&amp;quot;&lt;/strong&gt;&lt;/a&gt; ⸱ &lt;strong&gt;+6k views&lt;/strong&gt; ⸱ 02 Jun 2023 ⸱ 02h 17m 33s&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;You can find the full compilation here: &lt;a href=\"https://www.techtalksweekly.io/p/ttw-extra-8-pycon-deep-dives-aka\"&gt;https://www.techtalksweekly.io/p/ttw-extra-8-pycon-deep-dives-aka&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Let me know what you think!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ddbd37",
            "id": "1gftc68",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "TechTalksWeekly",
            "discussion_type": null,
            "num_comments": 1,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gftc68/a_huge_list_of_all_pycon_deep_dives_aka_tutorials/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gftc68/a_huge_list_of_all_pycon_deep_dives_aka_tutorials/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730312289.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# What my project does\n\n[Desktop Screenshot](https://imgur.com/a/shortcut-launcher-showcase-h9WzDwU)\n\nI wanted to organize my desktop but wanted a shortcut so I can quickly launch my minecraft servers. Ended up making a quick (and lightweight!) script that can read the dirlist from a directory and display it to quickly launch any one of them!\n\n[Window screenshot](https://imgur.com/a/8Lv2jQ1)\n\nThe script should be cross compatible atleast across Windows/Linux/Mac, tho I didnt test it on Linux/Mac.\n\nThis window is pretty customizable according to me. You can change the font and title of the GUI title and it shows any file put in the folder that it is told to look into!\n\nYou can change these configs in the script itself so that it doesnt have to load another JSON (or similar) file to cut loading times.\n\n# Target audience\n\nYou can sorta say it is a toy, I mean I dont see any prod use here, but it can also be a powerful tool for those who like to organize their desktops and not make it a clutter!\n\nIt is also REALLY lightweight and fast, so this little tool can be used for power users as well.\n\n# Comparision\n\nI couldnt find any software to compare it to, so theres that 🤷‍♀️\n\n\n\nYou can download the script [from here](https://github.com/KavyanshKhaitan2/Shortcut-Launcher).\n\nFeel free to ask me any question or suggestion in the comments!",
            "author_fullname": "t2_dtbh2mce",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Just made a quick script for multi-launching programs!",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gft9ao",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.62,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 3,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 3,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730312085.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;What my project does&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"https://imgur.com/a/shortcut-launcher-showcase-h9WzDwU\"&gt;Desktop Screenshot&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I wanted to organize my desktop but wanted a shortcut so I can quickly launch my minecraft servers. Ended up making a quick (and lightweight!) script that can read the dirlist from a directory and display it to quickly launch any one of them!&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://imgur.com/a/8Lv2jQ1\"&gt;Window screenshot&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The script should be cross compatible atleast across Windows/Linux/Mac, tho I didnt test it on Linux/Mac.&lt;/p&gt;\n\n&lt;p&gt;This window is pretty customizable according to me. You can change the font and title of the GUI title and it shows any file put in the folder that it is told to look into!&lt;/p&gt;\n\n&lt;p&gt;You can change these configs in the script itself so that it doesnt have to load another JSON (or similar) file to cut loading times.&lt;/p&gt;\n\n&lt;h1&gt;Target audience&lt;/h1&gt;\n\n&lt;p&gt;You can sorta say it is a toy, I mean I dont see any prod use here, but it can also be a powerful tool for those who like to organize their desktops and not make it a clutter!&lt;/p&gt;\n\n&lt;p&gt;It is also REALLY lightweight and fast, so this little tool can be used for power users as well.&lt;/p&gt;\n\n&lt;h1&gt;Comparision&lt;/h1&gt;\n\n&lt;p&gt;I couldnt find any software to compare it to, so theres that 🤷‍♀️&lt;/p&gt;\n\n&lt;p&gt;You can download the script &lt;a href=\"https://github.com/KavyanshKhaitan2/Shortcut-Launcher\"&gt;from here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Feel free to ask me any question or suggestion in the comments!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/OCI2sozzQ4uIT5lBwKUPy3Anuckbs3fJ9MrJHjUDlnA.jpg?auto=webp&amp;s=3a56eddf50c03b8936fda48045e28d0f51bf7e47",
                            "width": 1366,
                            "height": 768
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/OCI2sozzQ4uIT5lBwKUPy3Anuckbs3fJ9MrJHjUDlnA.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=51ff7e9e44473e0529b248ee247ae871ecf84183",
                                "width": 108,
                                "height": 60
                            },
                            {
                                "url": "https://external-preview.redd.it/OCI2sozzQ4uIT5lBwKUPy3Anuckbs3fJ9MrJHjUDlnA.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=952f886982bf1fccbdc17303e184611bc47160ba",
                                "width": 216,
                                "height": 121
                            },
                            {
                                "url": "https://external-preview.redd.it/OCI2sozzQ4uIT5lBwKUPy3Anuckbs3fJ9MrJHjUDlnA.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=91e1599d142afb9e1d239c9eb8895578b5c41e60",
                                "width": 320,
                                "height": 179
                            },
                            {
                                "url": "https://external-preview.redd.it/OCI2sozzQ4uIT5lBwKUPy3Anuckbs3fJ9MrJHjUDlnA.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=19007eb965490abd70232b68cde46934797c3230",
                                "width": 640,
                                "height": 359
                            },
                            {
                                "url": "https://external-preview.redd.it/OCI2sozzQ4uIT5lBwKUPy3Anuckbs3fJ9MrJHjUDlnA.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=c994f91cb72d68c8c238a56d278de090e762bee9",
                                "width": 960,
                                "height": 539
                            },
                            {
                                "url": "https://external-preview.redd.it/OCI2sozzQ4uIT5lBwKUPy3Anuckbs3fJ9MrJHjUDlnA.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=ff8f4e9d4fbc63e699f7ea2fdae8a6a458d4fa4e",
                                "width": 1080,
                                "height": 607
                            }
                        ],
                        "variants": {},
                        "id": "M5f5lx9-acCfwrgGdfhuTccHe573St_cX-EYy_cAFjE"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gft9ao",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "KavyanshKhaitan",
            "discussion_type": null,
            "num_comments": 2,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gft9ao/just_made_a_quick_script_for_multilaunching/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gft9ao/just_made_a_quick_script_for_multilaunching/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730312085.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Quick quiz what is the output of this code?\n\n    numbers = [0,1,2,3,4,5,6,7,8,9]\n    numbers_copy = numbers\n    numbers_copy[1] = 2\n    print(numbers[1])",
            "author_fullname": "t2_h8tx0zsf",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Quick quiz on your knowledge\n",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gfs0ee",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.13,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730308996.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Quick quiz what is the output of this code?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;numbers = [0,1,2,3,4,5,6,7,8,9]\nnumbers_copy = numbers\nnumbers_copy[1] = 2\nprint(numbers[1])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gfs0ee",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Bomlerequin",
            "discussion_type": null,
            "num_comments": 4,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gfs0ee/quick_quiz_on_your_knowledge/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gfs0ee/quick_quiz_on_your_knowledge/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730308996.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "As applied scientists, we learn to \"solve\" y = x² and get x = ±√y. But we're never taught that you can't solve y = x −c sin(x) and get a nice equation. That's always bugged me.\n\nTo really understand closed-form solvability, you need advance mathematics (e.g. Galois theory). Instead of that, I used SymPy to search for unsolvable equations.\n\nWhat surprised me:\n\n* Kepler’s Equation, y = x −c sin(x), is wonderfully simple.\n* Lambert’s W function is invaluable when your model includes exp or log (but not both).\n* SymPy is excellent but may not match WolframAlpha in some cases.\n* Mixing trigonometric functions with other terms frequently prevents closed-form solutions.\n* When closed-form solutions remain out of reach, we can rely on plotting and numerical methods.\n\nI've created an open-source [GitHub repo](https://github.com/CarlKCarlK/unsolvable) with full Python code and Jupyter notebooks. The project:\n\n* Shows how to use Jupyter to create and display markdown tables containing equations.\n* Includes a link to a free, no paywall article that can't be included directly in r/ Python.\n\np.s. Last year, I presented a similar project at PyData Seattle. It explained Newtonian Physics via SymPy. The [video of that talk](https://www.youtube.com/watch?v=52n2qKgwW_Q) became the 2nd most popular of the conference.",
            "author_fullname": "t2_7tg7istu",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Exploring Solvable and Unsolvable Equations with SymPy",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Tutorial"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "tutorial",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gfpycw",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.87,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 10,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Tutorial",
            "can_mod_post": false,
            "score": 10,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730303861.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;As applied scientists, we learn to &amp;quot;solve&amp;quot; y = x² and get x = ±√y. But we&amp;#39;re never taught that you can&amp;#39;t solve y = x −c sin(x) and get a nice equation. That&amp;#39;s always bugged me.&lt;/p&gt;\n\n&lt;p&gt;To really understand closed-form solvability, you need advance mathematics (e.g. Galois theory). Instead of that, I used SymPy to search for unsolvable equations.&lt;/p&gt;\n\n&lt;p&gt;What surprised me:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Kepler’s Equation, y = x −c sin(x), is wonderfully simple.&lt;/li&gt;\n&lt;li&gt;Lambert’s W function is invaluable when your model includes exp or log (but not both).&lt;/li&gt;\n&lt;li&gt;SymPy is excellent but may not match WolframAlpha in some cases.&lt;/li&gt;\n&lt;li&gt;Mixing trigonometric functions with other terms frequently prevents closed-form solutions.&lt;/li&gt;\n&lt;li&gt;When closed-form solutions remain out of reach, we can rely on plotting and numerical methods.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I&amp;#39;ve created an open-source &lt;a href=\"https://github.com/CarlKCarlK/unsolvable\"&gt;GitHub repo&lt;/a&gt; with full Python code and Jupyter notebooks. The project:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Shows how to use Jupyter to create and display markdown tables containing equations.&lt;/li&gt;\n&lt;li&gt;Includes a link to a free, no paywall article that can&amp;#39;t be included directly in r/ Python.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;p.s. Last year, I presented a similar project at PyData Seattle. It explained Newtonian Physics via SymPy. The &lt;a href=\"https://www.youtube.com/watch?v=52n2qKgwW_Q\"&gt;video of that talk&lt;/a&gt; became the 2nd most popular of the conference.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/1H97nUw5BtG__Z24EGKHhDnO6u-OuZcQ80C3L8xTKhA.jpg?auto=webp&amp;s=7a224033fc27e5af04813a673c99140fd03aef33",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/1H97nUw5BtG__Z24EGKHhDnO6u-OuZcQ80C3L8xTKhA.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=a1dc67922b2ed019ebc9ceee58367c39e2848fe9",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/1H97nUw5BtG__Z24EGKHhDnO6u-OuZcQ80C3L8xTKhA.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=928e9545b0ff08e2f28ffee25a0cbdff81ccc068",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/1H97nUw5BtG__Z24EGKHhDnO6u-OuZcQ80C3L8xTKhA.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=5441b2ef92a04bd79d26bac85a8dfccf797b3f22",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/1H97nUw5BtG__Z24EGKHhDnO6u-OuZcQ80C3L8xTKhA.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=8bdc4de926bff9c4646b4fd47f638bc0abe92628",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/1H97nUw5BtG__Z24EGKHhDnO6u-OuZcQ80C3L8xTKhA.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=6f725faffb3c76dcebc23430089048c5c8496518",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/1H97nUw5BtG__Z24EGKHhDnO6u-OuZcQ80C3L8xTKhA.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=05c21634ad7a6464fd363690c10dbe25bfbf077f",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "doykw4TWyDGfqFux1jIKS-W_MqnjCo4F_vpREwwZbro"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#dadada",
            "id": "1gfpycw",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "carlk22",
            "discussion_type": null,
            "num_comments": 2,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gfpycw/exploring_solvable_and_unsolvable_equations_with/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gfpycw/exploring_solvable_and_unsolvable_equations_with/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730303861.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "Here’s a draft for your Reddit post:\n\n\n\n\\---\n\n\n\n\\*\\*Title:\\*\\* Can't Create a 1-Page PDF from HTML\n\n\n\nI'm working on a Python script that generates an HTML file called \\`index\\_embedded.html\\`. When I open this file in any browser and print it, it fits perfectly on one page. However, I need the script to generate a PDF directly, and I haven’t been able to get it to output a single-page PDF.\n\n\n\nHere’s my latest attempt:\n\n\n\n`import subprocess`\n\n\n\n`def print_html(html_file, output_pdf, browser='edge'):`\n\n`# Path to the Chrome or Edge executable`\n\n`if browser == 'chrome':`\n\n`browser_path = \"C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\"`\n\n`elif browser == 'edge':`\n\n`browser_path = \"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\"`\n\n`else:`\n\n`raise ValueError(\"Unsupported browser. Use 'chrome' or 'edge'.\")`\n\n\n\n`# Command to print to PDF using Chrome or Edge, with options to remove headers and footers`\n\n`try:`\n\n`subprocess.run([browser_path, '--headless', '--disable-gpu', '--no-pdf-header-footer', '--print-to-pdf=' + output_pdf, '--paper-size=A4',`\n\n`'--margin-top=0', '--margin-bottom=0',`\n\n`'--margin-left=0', '--margin-right=0', '--scale=1', html_file], check=True)`\n\n`print(f\"HTML file converted to PDF at: {output_pdf}\")`\n\n`except subprocess.CalledProcessError as e:`\n\n`print(f\"Error generating PDF: {e}\")`\n\n\\`\\`\\`\n\n\n\nHowever, this code produces a two-page PDF instead of a single page. Any suggestions on how to fix this? Thanks for the help!",
            "author_fullname": "t2_1bxkscpx5t",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Can't Create a 1-Page PDF from HTML",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gfpmvg",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.26,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730303059.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Here’s a draft for your Reddit post:&lt;/p&gt;\n\n&lt;p&gt;---&lt;/p&gt;\n\n&lt;p&gt;**Title:** Can&amp;#39;t Create a 1-Page PDF from HTML&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m working on a Python script that generates an HTML file called `index_embedded.html`. When I open this file in any browser and print it, it fits perfectly on one page. However, I need the script to generate a PDF directly, and I haven’t been able to get it to output a single-page PDF.&lt;/p&gt;\n\n&lt;p&gt;Here’s my latest attempt:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;import subprocess&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;def print_html(html_file, output_pdf, browser=&amp;#39;edge&amp;#39;):&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;# Path to the Chrome or Edge executable&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;if browser == &amp;#39;chrome&amp;#39;:&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;browser_path = &amp;quot;C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe&amp;quot;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;elif browser == &amp;#39;edge&amp;#39;:&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;browser_path = &amp;quot;C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe&amp;quot;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;else:&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;raise ValueError(&amp;quot;Unsupported browser. Use &amp;#39;chrome&amp;#39; or &amp;#39;edge&amp;#39;.&amp;quot;)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;# Command to print to PDF using Chrome or Edge, with options to remove headers and footers&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;try:&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;subprocess.run([browser_path, &amp;#39;--headless&amp;#39;, &amp;#39;--disable-gpu&amp;#39;, &amp;#39;--no-pdf-header-footer&amp;#39;, &amp;#39;--print-to-pdf=&amp;#39; + output_pdf, &amp;#39;--paper-size=A4&amp;#39;,&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;&amp;#39;--margin-top=0&amp;#39;, &amp;#39;--margin-bottom=0&amp;#39;,&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;&amp;#39;--margin-left=0&amp;#39;, &amp;#39;--margin-right=0&amp;#39;, &amp;#39;--scale=1&amp;#39;, html_file], check=True)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;print(f&amp;quot;HTML file converted to PDF at: {output_pdf}&amp;quot;)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;except subprocess.CalledProcessError as e:&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;print(f&amp;quot;Error generating PDF: {e}&amp;quot;)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;```&lt;/p&gt;\n\n&lt;p&gt;However, this code produces a two-page PDF instead of a single page. Any suggestions on how to fix this? Thanks for the help!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gfpmvg",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "Fair_Assistant_5602",
            "discussion_type": null,
            "num_comments": 4,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gfpmvg/cant_create_a_1page_pdf_from_html/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gfpmvg/cant_create_a_1page_pdf_from_html/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730303059.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "I'm writing an application which is local. No server. I'm using python and I'm wanting to know people's opinions on the best gui to use. \n\nSo far I've used tkinter but it feels clunky and heavy, like it's from the early 2000s. \n\nCan anyone recommend something better for modern looking stuff? Maybe I'm using tkinter wrong? \n\nAny advice would be appreciated. ",
            "author_fullname": "t2_5t0ypkgt",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Best gui for local client app? ",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Discussion"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "discussion",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gfopgm",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.95,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 160,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 160,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730300711.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m writing an application which is local. No server. I&amp;#39;m using python and I&amp;#39;m wanting to know people&amp;#39;s opinions on the best gui to use. &lt;/p&gt;\n\n&lt;p&gt;So far I&amp;#39;ve used tkinter but it feels clunky and heavy, like it&amp;#39;s from the early 2000s. &lt;/p&gt;\n\n&lt;p&gt;Can anyone recommend something better for modern looking stuff? Maybe I&amp;#39;m using tkinter wrong? &lt;/p&gt;\n\n&lt;p&gt;Any advice would be appreciated. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#f50057",
            "id": "1gfopgm",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "robbo2020a",
            "discussion_type": null,
            "num_comments": 84,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gfopgm/best_gui_for_local_client_app/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gfopgm/best_gui_for_local_client_app/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730300711.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "# What My Project Does\n\nFuturePool is a package that introduce known concept of multiprocessing Pool to the async/await world. It allows for easy translation from multiprocessing to async/await, while keeping the core principle - specified number of workers. FuturePool allows for more flexible usage by providing starimap/starimap\\_unordered.\n\nFuturePool was created to handle web scrapping, where in order to not overwhelm the website with connections and comply with website requirements, a specified number of workers was used. FuturePool was extended to handle generic scenarios and published on PyPi.\n\n# Target Audience\n\nIt's designed for anyone working with asynchronous programming with additional requirements on number of simultaneous connections/actions. FuturePool gives known interface from multiprocessing. Pool and extends it even more for better developer experience.\n\n# License\n\nMIT\n\n# Comparison\n\nExample translation from multiprocessing to FuturePool\n\n    # multiprocessing\n    from multiprocessing import Pool\n    from time import sleep\n    \n    def pool_fn(i):\n        sleep(i)\n        return i\n    \n    with Pool(2) as p:\n        result = p.map(pool_fn, range(10))\n\n    # FuturePool\n    from futurepool import FuturePool\n    from asyncio import sleep\n    \n    async def async_pool_fn(i):\n        await sleep(i)\n        return i\n    \n    async with FuturePool(2) as fp:\n        result = await fp.map(async_pool_fn, range(10))\n\n# Links\n\nDocs: [https://MichalKarol.github.io/futurepool/](https://MichalKarol.github.io/futurepool/)\n\nPyPi: [https://pypi.org/project/futurepool/](https://pypi.org/project/futurepool/)\n\nGitHub: [https://github.com/MichalKarol/futurepool](https://github.com/MichalKarol/futurepool)\n\n\\---\n\nLooking forward to all comments and improvements. Thanks!",
            "author_fullname": "t2_3dtbtek0",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "futurepool - async/await worker pool",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gfmvis",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.91,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 29,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 29,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": 1730296286.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730295898.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;FuturePool is a package that introduce known concept of multiprocessing Pool to the async/await world. It allows for easy translation from multiprocessing to async/await, while keeping the core principle - specified number of workers. FuturePool allows for more flexible usage by providing starimap/starimap_unordered.&lt;/p&gt;\n\n&lt;p&gt;FuturePool was created to handle web scrapping, where in order to not overwhelm the website with connections and comply with website requirements, a specified number of workers was used. FuturePool was extended to handle generic scenarios and published on PyPi.&lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;It&amp;#39;s designed for anyone working with asynchronous programming with additional requirements on number of simultaneous connections/actions. FuturePool gives known interface from multiprocessing. Pool and extends it even more for better developer experience.&lt;/p&gt;\n\n&lt;h1&gt;License&lt;/h1&gt;\n\n&lt;p&gt;MIT&lt;/p&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;Example translation from multiprocessing to FuturePool&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# multiprocessing\nfrom multiprocessing import Pool\nfrom time import sleep\n\ndef pool_fn(i):\n    sleep(i)\n    return i\n\nwith Pool(2) as p:\n    result = p.map(pool_fn, range(10))\n\n# FuturePool\nfrom futurepool import FuturePool\nfrom asyncio import sleep\n\nasync def async_pool_fn(i):\n    await sleep(i)\n    return i\n\nasync with FuturePool(2) as fp:\n    result = await fp.map(async_pool_fn, range(10))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Links&lt;/h1&gt;\n\n&lt;p&gt;Docs: &lt;a href=\"https://MichalKarol.github.io/futurepool/\"&gt;https://MichalKarol.github.io/futurepool/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;PyPi: &lt;a href=\"https://pypi.org/project/futurepool/\"&gt;https://pypi.org/project/futurepool/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;GitHub: &lt;a href=\"https://github.com/MichalKarol/futurepool\"&gt;https://github.com/MichalKarol/futurepool&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;---&lt;/p&gt;\n\n&lt;p&gt;Looking forward to all comments and improvements. Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gfmvis",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "mackarr",
            "discussion_type": null,
            "num_comments": 13,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gfmvis/futurepool_asyncawait_worker_pool/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gfmvis/futurepool_asyncawait_worker_pool/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730295898.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "[Docs](https://cappa.readthedocs.io/) | [Github](https://github.com/DanCardin/cappa) | [Comparison/justification vs argparse/click/typer/tyro/clipstick](https://cappa.readthedocs.io/en/latest/comparison.html)\n\nAt a high level, the library allows one to declaratively describe their CLI shape using types/annotations and then flexibly select between argparse-like and click-like execution modes.\n\nI posted about this once, roughly a year ago while the library was in its relative infancy. Since then highlights features include:\n\n* Its own argument parser (previously relied on argparse, but still **has** an optional argparse backend)\n* Support for most dataclass-like libraries (dataclasses, attrs, pydantic 1/2, msgspec)\n* Dependency injection system\n* Colored, theme-able output/helptext (powered by rich)\n* Automatic (dynamic) shell completion generation\n* Async support\n* Mutual exclusivity\n* Function based commands\n* Method based subcommands\n* Generally improved type inference of more complex nested type annotations\n* Sphinx plugin (to render --help output)\n\nI'm happy to answer questions that anyone might have! Thanks!",
            "author_fullname": "t2_aj1ll",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Cappa v0.24.0: A declarative command line parsing library",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gflw8o",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.94,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 28,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 28,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730293095.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://cappa.readthedocs.io/\"&gt;Docs&lt;/a&gt; | &lt;a href=\"https://github.com/DanCardin/cappa\"&gt;Github&lt;/a&gt; | &lt;a href=\"https://cappa.readthedocs.io/en/latest/comparison.html\"&gt;Comparison/justification vs argparse/click/typer/tyro/clipstick&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;At a high level, the library allows one to declaratively describe their CLI shape using types/annotations and then flexibly select between argparse-like and click-like execution modes.&lt;/p&gt;\n\n&lt;p&gt;I posted about this once, roughly a year ago while the library was in its relative infancy. Since then highlights features include:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Its own argument parser (previously relied on argparse, but still &lt;strong&gt;has&lt;/strong&gt; an optional argparse backend)&lt;/li&gt;\n&lt;li&gt;Support for most dataclass-like libraries (dataclasses, attrs, pydantic 1/2, msgspec)&lt;/li&gt;\n&lt;li&gt;Dependency injection system&lt;/li&gt;\n&lt;li&gt;Colored, theme-able output/helptext (powered by rich)&lt;/li&gt;\n&lt;li&gt;Automatic (dynamic) shell completion generation&lt;/li&gt;\n&lt;li&gt;Async support&lt;/li&gt;\n&lt;li&gt;Mutual exclusivity&lt;/li&gt;\n&lt;li&gt;Function based commands&lt;/li&gt;\n&lt;li&gt;Method based subcommands&lt;/li&gt;\n&lt;li&gt;Generally improved type inference of more complex nested type annotations&lt;/li&gt;\n&lt;li&gt;Sphinx plugin (to render --help output)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I&amp;#39;m happy to answer questions that anyone might have! Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gflw8o",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "DanCardin",
            "discussion_type": null,
            "num_comments": 6,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gflw8o/cappa_v0240_a_declarative_command_line_parsing/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gflw8o/cappa_v0240_a_declarative_command_line_parsing/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730293095.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    },
    {
        "kind": "t3",
        "data": {
            "approved_at_utc": null,
            "subreddit": "Python",
            "selftext": "**What My Project Does**\n\nI work in data and absolutely freaking love data contracts - they've solved me so many headaches in the past by just adding the simple step of checking data matches expectations before progressing with any additional logic.\n\nI've used great expectations a lot in the past, and it's an absolutely awesome project, but it's pretty hefty, and I often feel likes it's fighting me when I \\*just want to carry out tests in process\\* rather than making use of it's GUI and running it on a server full-time.\n\nSo I started a project called Wimsey, it's based on top of Narwhals (which is an insanely cool project you should definitely check out before mine) meaning it has minimal overheads and can carry out required tests in whichever dataframe library you're already using.\n\n**Target Audience**\n\nIt's designed for anyone working with data, especially users of dataframe libraries like Polars, Modin, Dask or similary where native support doesn't exist yet in many test frameworks.\n\nI think data contracts are especially handy for a regular running data pipeline, where you want some guarantees on the data.\n\n**Comparison**\n\nThe most direct comparisons would be soda-core or great-expectations, they're both great libraries and bring a lot of functionality to the table. Wimsey is notably a lot smaller (partly because it's very new, but also by design) - my goal for it to be something like what DLT is to Airbyte, where there's less functionality on offer, but things are a lot simpler, and easy to run in a python job.\n\n**Link**\n\n[https://github.com/benrutter/wimsey](https://github.com/benrutter/wimsey)",
            "author_fullname": "t2_126zgy",
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Wimsey- lightweight, flexible data contracts for Polars, Pandas, Dask &amp; Modin",
            "link_flair_richtext": [
                {
                    "e": "text",
                    "t": "Showcase"
                }
            ],
            "subreddit_name_prefixed": "r/Python",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "showcase",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1gfju1e",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.84,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 41,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "user_reports": [],
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Showcase",
            "can_mod_post": false,
            "score": 41,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "self",
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1730286116.0,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.Python",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I work in data and absolutely freaking love data contracts - they&amp;#39;ve solved me so many headaches in the past by just adding the simple step of checking data matches expectations before progressing with any additional logic.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve used great expectations a lot in the past, and it&amp;#39;s an absolutely awesome project, but it&amp;#39;s pretty hefty, and I often feel likes it&amp;#39;s fighting me when I *just want to carry out tests in process* rather than making use of it&amp;#39;s GUI and running it on a server full-time.&lt;/p&gt;\n\n&lt;p&gt;So I started a project called Wimsey, it&amp;#39;s based on top of Narwhals (which is an insanely cool project you should definitely check out before mine) meaning it has minimal overheads and can carry out required tests in whichever dataframe library you&amp;#39;re already using.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s designed for anyone working with data, especially users of dataframe libraries like Polars, Modin, Dask or similary where native support doesn&amp;#39;t exist yet in many test frameworks.&lt;/p&gt;\n\n&lt;p&gt;I think data contracts are especially handy for a regular running data pipeline, where you want some guarantees on the data.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The most direct comparisons would be soda-core or great-expectations, they&amp;#39;re both great libraries and bring a lot of functionality to the table. Wimsey is notably a lot smaller (partly because it&amp;#39;s very new, but also by design) - my goal for it to be something like what DLT is to Airbyte, where there&amp;#39;s less functionality on offer, but things are a lot simpler, and easy to run in a python job.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Link&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/benrutter/wimsey\"&gt;https://github.com/benrutter/wimsey&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
                "images": [
                    {
                        "source": {
                            "url": "https://external-preview.redd.it/B5yr8wVwtlCuDR7jZeUzdaD8fW4zayFiDF9GfV7nb64.jpg?auto=webp&amp;s=132a16b63200ce0fbd49bc9bc97a0dd20fc37df5",
                            "width": 1200,
                            "height": 600
                        },
                        "resolutions": [
                            {
                                "url": "https://external-preview.redd.it/B5yr8wVwtlCuDR7jZeUzdaD8fW4zayFiDF9GfV7nb64.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=a0f3157fdde5bd507a1dbf3c8a65c12b8f946d0e",
                                "width": 108,
                                "height": 54
                            },
                            {
                                "url": "https://external-preview.redd.it/B5yr8wVwtlCuDR7jZeUzdaD8fW4zayFiDF9GfV7nb64.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=8ebe28ece4e06666393609fede6b68e35c0a9ba6",
                                "width": 216,
                                "height": 108
                            },
                            {
                                "url": "https://external-preview.redd.it/B5yr8wVwtlCuDR7jZeUzdaD8fW4zayFiDF9GfV7nb64.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=b0808c2a4b79d1a53db8ec1ad792337b7087fb4f",
                                "width": 320,
                                "height": 160
                            },
                            {
                                "url": "https://external-preview.redd.it/B5yr8wVwtlCuDR7jZeUzdaD8fW4zayFiDF9GfV7nb64.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=a4e604ebc5ba15844002547a6f33c471738511df",
                                "width": 640,
                                "height": 320
                            },
                            {
                                "url": "https://external-preview.redd.it/B5yr8wVwtlCuDR7jZeUzdaD8fW4zayFiDF9GfV7nb64.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=9e2c3aae848fbfa5f813ffeec42dce124aaba3fe",
                                "width": 960,
                                "height": 480
                            },
                            {
                                "url": "https://external-preview.redd.it/B5yr8wVwtlCuDR7jZeUzdaD8fW4zayFiDF9GfV7nb64.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=cc90d1b69d0fc1a433f45c25e64a1b4b2ed042f1",
                                "width": 1080,
                                "height": 540
                            }
                        ],
                        "variants": {},
                        "id": "dFvW_OLe5bOmXrqmvpza1X-I7jNt56W8tTJOaUMhmUw"
                    }
                ],
                "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qh0y",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#ff66ac",
            "id": "1gfju1e",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "houseofleft",
            "discussion_type": null,
            "num_comments": 21,
            "send_replies": true,
            "contest_mode": false,
            "mod_reports": [],
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/Python/comments/1gfju1e/wimsey_lightweight_flexible_data_contracts_for/",
            "stickied": false,
            "url": "https://www.reddit.com/r/Python/comments/1gfju1e/wimsey_lightweight_flexible_data_contracts_for/",
            "subreddit_subscribers": 1293429,
            "created_utc": 1730286116.0,
            "num_crossposts": 0,
            "media": null,
            "is_video": false
        }
    }
]